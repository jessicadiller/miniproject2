
miniproject2.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	bc 39 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	bc 39 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	bc 39 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	bc 39 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	bc 39 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	bc 39 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	bc 39 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	bc 39 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	bc 39 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	bc 39 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	bc 39 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	bc 39 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	bc 39 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	bc 39 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	bc 39 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	bc 39 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	bc 39 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	bc 39 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	bc 39 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	bc 39 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	bc 39 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	bc 39 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	bc 39 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	bc 39 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	bc 39 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	bc 39 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	bc 39 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	bc 39 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	bc 39 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	bc 39 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	bc 39 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	bc 39 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	bc 39 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	bc 39 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	bc 39 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	bc 39 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	bc 39 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	bc 39 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	bc 39 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	bc 39 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	bc 39 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	bc 39 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	bc 39 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	bc 39 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	bc 39 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	bc 39 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	bc 39 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	bc 39 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	bc 39 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f c8 20    	mov.w     #0xc80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	85 00 07    	rcall     0x1230 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 94 23    	mov.w     #0x3942, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	20 23 02    	call      0x2320 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 08 20    	mov.w     #0x86, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	fe 2d 04    	goto      0x2dfe <___digitalRead>
    1216:	00 00 00 
    1218:	ba 2d 04    	goto      0x2dba <___digitalWrite>
    121a:	00 00 00 
    121c:	20 2e 04    	goto      0x2e20 <___analogRead>
    121e:	00 00 00 
    1220:	aa 32 04    	goto      0x32aa <___pwmWrite>
    1222:	00 00 00 
    1224:	7c 32 04    	goto      0x327c <___pwmRead>
    1226:	00 00 00 
    1228:	14 33 04    	goto      0x3314 <___servoWrite>
    122a:	00 00 00 
    122c:	e2 32 04    	goto      0x32e2 <___servoRead>
    122e:	00 00 00 

00001230 <__crt_start_mode>:
    1230:	00 00 05    	retlw.w   #0x0, w0

00001232 <___subsf3>:
    1232:	03 f0 a2    	btg.w     w3, #0xf

00001234 <___addsf3>:
    1234:	88 9f be    	mov.d     w8, [w15++]
    1236:	8a 9f be    	mov.d     w10, [w15++]
    1238:	8c 1f 78    	mov.w     w12, [w15++]
    123a:	1b 01 07    	rcall     0x1472 <__funpack2>
    123c:	22 01 33    	bra       N, 0x1482 <__fPropagateNaN>
    123e:	64 50 e1    	cp.w      w10, #0x4
    1240:	4f 00 32    	bra       Z, 0x12e0 <aisinfinite>

00001242 <checkspecialb>:
    1242:	64 20 e1    	cp.w      w4, #0x4
    1244:	52 00 32    	bra       Z, 0x12ea <return2>
    1246:	03 82 6c    	xor.w     w9, w3, w4
    1248:	07 00 3b    	bra       NN, 0x1258 <getsign>
    124a:	09 05 d0    	sl.w      w9, w10
    124c:	03 06 d0    	sl.w      w3, w12
    124e:	82 0f 54    	sub.w     w8, w2, [w15]
    1250:	0c 06 5d    	subb.w    w10, w12, w12
    1252:	02 00 39    	bra       NC, 0x1258 <getsign>
    1254:	02 00 32    	bra       Z, 0x125a <gotsign>
    1256:	89 01 78    	mov.w     w9, w3

00001258 <getsign>:
    1258:	03 06 78    	mov.w     w3, w12

0000125a <gotsign>:
    125a:	85 82 55    	sub.w     w11, w5, w5
    125c:	04 00 3d    	bra       GE, 0x1266 <expcanonical>
    125e:	00 03 fd    	exch      w0, w6
    1260:	81 03 fd    	exch      w1, w7
    1262:	85 02 ea    	neg.w     w5, w5
    1264:	8b 85 42    	add.w     w5, w11, w11

00001266 <expcanonical>:
    1266:	84 0f 72    	ior.w     w4, w4, [w15]
    1268:	02 00 3b    	bra       NN, 0x126e <nonegate>
    126a:	60 00 10    	subr.w    w0, #0x0, w0
    126c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000126e <nonegate>:
    126e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1270:	00 05 eb    	clr.w     w10
    1272:	7a 28 e1    	cp.w      w5, #0x1a
    1274:	0a 00 39    	bra       NC, 0x128a <aligniter>
    1276:	06 00 78    	mov.w     w6, w0
    1278:	c7 5d dd    	sl.w      w11, #0x7, w11
    127a:	f7 07 b2    	and.w     #0x7f, w7
    127c:	87 80 75    	ior.w     w11, w7, w1
    127e:	2d 00 37    	bra       0x12da <signoff>

00001280 <align>:
    1280:	82 81 71    	ior.w     w3, w2, w3
    1282:	0a 01 78    	mov.w     w10, w2
    1284:	61 05 60    	and.w     w0, #0x1, w10
    1286:	81 80 d1    	asr.w     w1, w1
    1288:	00 80 d3    	rrc.w     w0, w0

0000128a <aligniter>:
    128a:	85 02 e9    	dec.w     w5, w5
    128c:	f9 ff 3b    	bra       NN, 0x1280 <align>

0000128e <aligned>:
    128e:	06 04 40    	add.w     w0, w6, w8
    1290:	87 84 48    	addc.w    w1, w7, w9
    1292:	02 00 3b    	bra       NN, 0x1298 <normalizesum>
    1294:	60 04 14    	subr.w    w8, #0x0, w8
    1296:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001298 <normalizesum>:
    1298:	09 88 a3    	btst.z    w9, #0x8
    129a:	07 00 32    	bra       Z, 0x12aa <checknormal>
    129c:	8a 81 71    	ior.w     w3, w10, w3
    129e:	82 81 71    	ior.w     w3, w2, w3
    12a0:	61 01 64    	and.w     w8, #0x1, w2
    12a2:	89 04 d1    	lsr.w     w9, w9
    12a4:	08 84 d3    	rrc.w     w8, w8
    12a6:	8b 05 e8    	inc.w     w11, w11
    12a8:	17 00 37    	bra       0x12d8 <round>

000012aa <checknormal>:
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	13 00 3a    	bra       NZ, 0x12d4 <discardguard>

000012ae <underflow>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	13 00 34    	bra       LE, 0x12d8 <round>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	0a 44 74    	ior.b     w8, w10, w8
    12ba:	09 78 a3    	btst.z    w9, #0x7
    12bc:	0d 00 3a    	bra       NZ, 0x12d8 <round>

000012be <normalizeloop>:
    12be:	0b 00 e0    	cp0.w     w11
    12c0:	07 00 34    	bra       LE, 0x12d0 <normalizeexit>
    12c2:	8b 05 e9    	dec.w     w11, w11
    12c4:	08 04 44    	add.w     w8, w8, w8
    12c6:	89 84 4c    	addc.w    w9, w9, w9
    12c8:	01 00 3a    	bra       NZ, 0x12cc <normalizetest>
    12ca:	0b 00 20    	mov.w     #0x0, w11

000012cc <normalizetest>:
    12cc:	09 78 a3    	btst.z    w9, #0x7
    12ce:	f7 ff 32    	bra       Z, 0x12be <normalizeloop>

000012d0 <normalizeexit>:
    12d0:	00 01 eb    	clr.w     w2
    12d2:	02 00 37    	bra       0x12d8 <round>

000012d4 <discardguard>:
    12d4:	82 81 71    	ior.w     w3, w2, w3
    12d6:	0a 01 78    	mov.w     w10, w2

000012d8 <round>:
    12d8:	91 00 07    	rcall     0x13fc <__fpack>

000012da <signoff>:
    12da:	0c f0 a7    	btsc.w    w12, #0xf
    12dc:	01 f0 a0    	bset.w    w1, #0xf
    12de:	da 00 37    	bra       0x1494 <__fbopExit>

000012e0 <aisinfinite>:
    12e0:	64 20 e1    	cp.w      w4, #0x4
    12e2:	02 00 3a    	bra       NZ, 0x12e8 <return8>
    12e4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12e6:	da 00 33    	bra       N, 0x149c <__fbopReturnNaN>

000012e8 <return8>:
    12e8:	08 01 be    	mov.d     w8, w2

000012ea <return2>:
    12ea:	02 00 be    	mov.d     w2, w0
    12ec:	d3 00 37    	bra       0x1494 <__fbopExit>

000012ee <___divsf3>:
    12ee:	88 9f be    	mov.d     w8, [w15++]
    12f0:	8a 9f be    	mov.d     w10, [w15++]
    12f2:	8c 1f 78    	mov.w     w12, [w15++]
    12f4:	be 00 07    	rcall     0x1472 <__funpack2>
    12f6:	c5 00 33    	bra       N, 0x1482 <__fPropagateNaN>
    12f8:	03 86 6c    	xor.w     w9, w3, w12
    12fa:	64 50 e1    	cp.w      w10, #0x4
    12fc:	2e 00 32    	bra       Z, 0x135a <aisinfinite>
    12fe:	64 20 e1    	cp.w      w4, #0x4
    1300:	33 00 32    	bra       Z, 0x1368 <returnZero>
    1302:	61 50 e1    	cp.w      w10, #0x1
    1304:	2f 00 32    	bra       Z, 0x1364 <aiszero>
    1306:	61 20 e1    	cp.w      w4, #0x1
    1308:	31 00 32    	bra       Z, 0x136c <returnInf>

0000130a <finitenonzero>:
    130a:	85 85 55    	sub.w     w11, w5, w11
    130c:	eb 07 b0    	add.w     #0x7e, w11
    130e:	09 00 20    	mov.w     #0x0, w9
    1310:	08 04 20    	mov.w     #0x40, w8
    1312:	05 00 37    	bra       0x131e <diventry>

00001314 <divnext>:
    1314:	08 04 44    	add.w     w8, w8, w8
    1316:	89 84 4c    	addc.w    w9, w9, w9
    1318:	0a 00 31    	bra       C, 0x132e <divdone> <formsticky>

0000131a <divloop>:
    131a:	06 03 43    	add.w     w6, w6, w6
    131c:	87 83 4b    	addc.w    w7, w7, w7

0000131e <diventry>:
    131e:	00 01 53    	sub.w     w6, w0, w2
    1320:	81 81 5b    	subb.w    w7, w1, w3
    1322:	f8 ff 33    	bra       N, 0x1314 <divnext>
    1324:	02 03 be    	mov.d     w2, w6
    1326:	08 00 a0    	bset.w    w8, #0x0
    1328:	08 04 44    	add.w     w8, w8, w8
    132a:	89 84 4c    	addc.w    w9, w9, w9
    132c:	f6 ff 39    	bra       NC, 0x131a <divloop>

0000132e <divdone>:
    132e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1330:	83 01 73    	ior.w     w6, w3, w3
    1332:	01 00 32    	bra       Z, 0x1336 <stickyok>
    1334:	13 00 20    	mov.w     #0x1, w3

00001336 <stickyok>:
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	09 98 a3    	btst.z    w9, #0x9
    133c:	05 00 32    	bra       Z, 0x1348 <guardused>
    133e:	08 00 a7    	btsc.w    w8, #0x0
    1340:	03 00 a0    	bset.w    w3, #0x0
    1342:	89 04 d1    	lsr.w     w9, w9
    1344:	08 84 d3    	rrc.w     w8, w8
    1346:	8b 05 e8    	inc.w     w11, w11

00001348 <guardused>:
    1348:	89 04 d1    	lsr.w     w9, w9
    134a:	08 84 d3    	rrc.w     w8, w8
    134c:	00 01 eb    	clr.w     w2
    134e:	02 81 d2    	rlc.w     w2, w2
    1350:	55 00 07    	rcall     0x13fc <__fpack>

00001352 <return0>:
    1352:	01 f0 a1    	bclr.w    w1, #0xf
    1354:	0c f0 a7    	btsc.w    w12, #0xf
    1356:	01 f0 a0    	bset.w    w1, #0xf
    1358:	9d 00 37    	bra       0x1494 <__fbopExit>

0000135a <aisinfinite>:
    135a:	64 20 e1    	cp.w      w4, #0x4
    135c:	9f 00 32    	bra       Z, 0x149c <__fbopReturnNaN>

0000135e <return8>:
    135e:	08 01 be    	mov.d     w8, w2

00001360 <return2>:
    1360:	02 00 be    	mov.d     w2, w0
    1362:	f7 ff 37    	bra       0x1352 <return0>

00001364 <aiszero>:
    1364:	61 20 e1    	cp.w      w4, #0x1
    1366:	9a 00 32    	bra       Z, 0x149c <__fbopReturnNaN>

00001368 <returnZero>:
    1368:	60 00 b8    	mul.uu    w0, #0x0, w0
    136a:	f3 ff 37    	bra       0x1352 <return0>

0000136c <returnInf>:
    136c:	00 00 20    	mov.w     #0x0, w0
    136e:	01 f8 27    	mov.w     #0x7f80, w1
    1370:	f0 ff 37    	bra       0x1352 <return0>

00001372 <___eqsf2>:
    1372:	14 00 20    	mov.w     #0x1, w4
    1374:	da 00 37    	bra       0x152a <__fcompare>

00001376 <___gesf2>:
    1376:	f4 ff 2f    	mov.w     #0xffff, w4
    1378:	d8 00 37    	bra       0x152a <__fcompare>

0000137a <___fixsfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	65 00 07    	rcall     0x1448 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	65 09 b1    	sub.w     #0x96, w5
    1384:	16 00 32    	bra       Z, 0x13b2 <setsign>
    1386:	0d 00 35    	bra       LT, 0x13a2 <shiftright>
    1388:	68 28 e1    	cp.w      w5, #0x8
    138a:	06 00 35    	bra       LT, 0x1398 <shiftleft>
    138c:	f0 ff 2f    	mov.w     #0xffff, w0
    138e:	f1 ff 27    	mov.w     #0x7fff, w1
    1390:	03 00 e0    	cp0.w     w3
    1392:	13 00 3b    	bra       NN, 0x13ba <exit>
    1394:	01 00 28    	mov.w     #0x8000, w1
    1396:	00 00 05    	retlw.w   #0x0, w0

00001398 <shiftleft>:
    1398:	00 00 40    	add.w     w0, w0, w0
    139a:	81 80 48    	addc.w    w1, w1, w1
    139c:	85 02 e9    	dec.w     w5, w5
    139e:	fc ff 3a    	bra       NZ, 0x1398 <shiftleft>
    13a0:	08 00 37    	bra       0x13b2 <setsign>

000013a2 <shiftright>:
    13a2:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a4:	02 00 3c    	bra       GT, 0x13aa <shiftrightloop>
    13a6:	80 00 eb    	clr.w     w1
    13a8:	00 00 05    	retlw.w   #0x0, w0

000013aa <shiftrightloop>:
    13aa:	81 00 d1    	lsr.w     w1, w1
    13ac:	00 80 d3    	rrc.w     w0, w0
    13ae:	85 02 e8    	inc.w     w5, w5
    13b0:	fc ff 3a    	bra       NZ, 0x13aa <shiftrightloop>

000013b2 <setsign>:
    13b2:	03 00 e0    	cp0.w     w3
    13b4:	02 00 3b    	bra       NN, 0x13ba <exit>
    13b6:	60 00 10    	subr.w    w0, #0x0, w0
    13b8:	e0 80 18    	subbr.w   w1, #0x0, w1

000013ba <exit>:
    13ba:	00 00 06    	return    

000013bc <___fixunssfsi>:
    13bc:	00 01 be    	mov.d     w0, w2
    13be:	44 00 07    	rcall     0x1448 <__funpack>
    13c0:	04 70 a7    	btsc.w    w4, #0x7
    13c2:	03 f0 a1    	bclr.w    w3, #0xf
    13c4:	03 f8 a3    	btst.z    w3, #0xf
    13c6:	13 00 3a    	bra       NZ, 0x13ee <returnzero>
    13c8:	65 09 b1    	sub.w     #0x96, w5
    13ca:	10 00 32    	bra       Z, 0x13ec <exit>
    13cc:	09 00 35    	bra       LT, 0x13e0 <shiftright>
    13ce:	69 28 e1    	cp.w      w5, #0x9
    13d0:	02 00 35    	bra       LT, 0x13d6 <shiftleft>
    13d2:	01 00 28    	mov.w     #0x8000, w1
    13d4:	00 00 05    	retlw.w   #0x0, w0

000013d6 <shiftleft>:
    13d6:	00 00 40    	add.w     w0, w0, w0
    13d8:	81 80 48    	addc.w    w1, w1, w1
    13da:	85 02 e9    	dec.w     w5, w5
    13dc:	fc ff 3a    	bra       NZ, 0x13d6 <shiftleft>
    13de:	00 00 06    	return    

000013e0 <shiftright>:
    13e0:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13e2:	05 00 35    	bra       LT, 0x13ee <returnzero>

000013e4 <shiftrightloop>:
    13e4:	81 00 d1    	lsr.w     w1, w1
    13e6:	00 80 d3    	rrc.w     w0, w0
    13e8:	85 02 e8    	inc.w     w5, w5
    13ea:	fc ff 3a    	bra       NZ, 0x13e4 <shiftrightloop>

000013ec <exit>:
    13ec:	00 00 06    	return    

000013ee <returnzero>:
    13ee:	80 00 eb    	clr.w     w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <___floatsisf>:
    13f2:	4f 89 de    	asr.w     w1, #0xf, w2
    13f4:	82 01 78    	mov.w     w2, w3
    13f6:	b4 00 37    	bra       0x1560 <___floatdisf>

000013f8 <___floatunsisf>:
    13f8:	60 11 b8    	mul.uu    w2, #0x0, w2
    13fa:	c2 00 37    	bra       0x1580 <___floatundisf>

000013fc <__fpack>:
    13fc:	81 00 20    	mov.w     #0x8, w1
    13fe:	61 80 55    	sub.w     w11, #0x1, w0
    1400:	0b 00 3d    	bra       GE, 0x1418 <notsubnormal>
    1402:	0b 00 20    	mov.w     #0x0, w11
    1404:	61 fe 2f    	mov.w     #0xffe6, w1
    1406:	01 00 e1    	cp.w      w0, w1
    1408:	1d 00 34    	bra       LE, 0x1444 <zerosig>

0000140a <subnormal>:
    140a:	82 81 71    	ior.w     w3, w2, w3
    140c:	61 01 64    	and.w     w8, #0x1, w2
    140e:	89 04 d1    	lsr.w     w9, w9
    1410:	08 84 d3    	rrc.w     w8, w8
    1412:	00 00 e8    	inc.w     w0, w0
    1414:	fa ff 3a    	bra       NZ, 0x140a <subnormal>
    1416:	71 00 20    	mov.w     #0x7, w1

00001418 <notsubnormal>:
    1418:	61 00 64    	and.w     w8, #0x1, w0
    141a:	03 00 70    	ior.w     w0, w3, w0
    141c:	02 00 60    	and.w     w0, w2, w0
    141e:	09 00 32    	bra       Z, 0x1432 <packupandgo>
    1420:	61 04 44    	add.w     w8, #0x1, w8
    1422:	e0 84 4c    	addc.w    w9, #0x0, w9
    1424:	09 88 a5    	btst.z    w9, w1
    1426:	05 00 32    	bra       Z, 0x1432 <packupandgo>
    1428:	8b 05 e8    	inc.w     w11, w11
    142a:	68 08 e1    	cp.w      w1, #0x8
    142c:	02 00 3a    	bra       NZ, 0x1432 <packupandgo>
    142e:	89 04 d1    	lsr.w     w9, w9
    1430:	08 84 d3    	rrc.w     w8, w8

00001432 <packupandgo>:
    1432:	f2 0f 20    	mov.w     #0xff, w2
    1434:	02 58 e1    	cp.w      w11, w2
    1436:	05 00 3d    	bra       GE, 0x1442 <overflow>
    1438:	c7 5d dd    	sl.w      w11, #0x7, w11
    143a:	f9 07 b2    	and.w     #0x7f, w9
    143c:	89 80 75    	ior.w     w11, w9, w1
    143e:	08 00 78    	mov.w     w8, w0
    1440:	00 00 06    	return    

00001442 <overflow>:
    1442:	0b f8 27    	mov.w     #0x7f80, w11

00001444 <zerosig>:
    1444:	8b 00 78    	mov.w     w11, w1
    1446:	00 00 05    	retlw.w   #0x0, w0

00001448 <__funpack>:
    1448:	c7 0a de    	lsr.w     w1, #0x7, w5
    144a:	f1 07 b2    	and.w     #0x7f, w1
    144c:	f5 0f b2    	and.w     #0xff, w5
    144e:	08 00 32    	bra       Z, 0x1460 <zeroorsub>
    1450:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1452:	02 00 32    	bra       Z, 0x1458 <nanorinf>

00001454 <finitereturn>:
    1454:	01 70 a0    	bset.w    w1, #0x7
    1456:	24 00 05    	retlw.w   #0x2, w4

00001458 <nanorinf>:
    1458:	81 0f 70    	ior.w     w0, w1, [w15]
    145a:	01 00 32    	bra       Z, 0x145e <infinite>
    145c:	04 08 05    	retlw.w   #0x80, w4

0000145e <infinite>:
    145e:	44 00 05    	retlw.w   #0x4, w4

00001460 <zeroorsub>:
    1460:	81 0f 70    	ior.w     w0, w1, [w15]
    1462:	02 00 3a    	bra       NZ, 0x1468 <subnormal>
    1464:	14 00 05    	retlw.w   #0x1, w4

00001466 <normalize>:
    1466:	85 02 e9    	dec.w     w5, w5

00001468 <subnormal>:
    1468:	00 00 40    	add.w     w0, w0, w0
    146a:	81 c0 48    	addc.b    w1, w1, w1
    146c:	fc ff 3b    	bra       NN, 0x1466 <normalize>
    146e:	01 70 a0    	bset.w    w1, #0x7
    1470:	24 00 05    	retlw.w   #0x2, w4

00001472 <__funpack2>:
    1472:	00 04 be    	mov.d     w0, w8
    1474:	e9 ff 07    	rcall     0x1448 <__funpack>
    1476:	00 03 be    	mov.d     w0, w6
    1478:	04 05 be    	mov.d     w4, w10
    147a:	02 00 be    	mov.d     w2, w0
    147c:	e5 ff 07    	rcall     0x1448 <__funpack>
    147e:	84 4f 75    	ior.b     w10, w4, [w15]
    1480:	00 00 06    	return    

00001482 <__fPropagateNaN>:
    1482:	02 00 be    	mov.d     w2, w0
    1484:	64 50 e1    	cp.w      w10, #0x4
    1486:	05 00 36    	bra       LEU, 0x1492 <return0>
    1488:	64 20 e1    	cp.w      w4, #0x4
    148a:	02 00 36    	bra       LEU, 0x1490 <return8>
    148c:	09 68 a3    	btst.z    w9, #0x6
    148e:	01 00 3a    	bra       NZ, 0x1492 <return0>

00001490 <return8>:
    1490:	08 00 be    	mov.d     w8, w0

00001492 <return0>:
    1492:	01 60 a0    	bset.w    w1, #0x6

00001494 <__fbopExit>:
    1494:	4f 06 78    	mov.w     [--w15], w12
    1496:	4f 05 be    	mov.d     [--w15], w10
    1498:	4f 04 be    	mov.d     [--w15], w8
    149a:	00 00 06    	return    

0000149c <__fbopReturnNaN>:
    149c:	f0 ff 2f    	mov.w     #0xffff, w0
    149e:	f1 ff 27    	mov.w     #0x7fff, w1
    14a0:	f9 ff 37    	bra       0x1494 <__fbopExit>

000014a2 <___mulsf3>:
    14a2:	88 9f be    	mov.d     w8, [w15++]
    14a4:	8a 9f be    	mov.d     w10, [w15++]
    14a6:	8c 1f 78    	mov.w     w12, [w15++]
    14a8:	e4 ff 07    	rcall     0x1472 <__funpack2>
    14aa:	eb ff 33    	bra       N, 0x1482 <__fPropagateNaN>
    14ac:	03 86 6c    	xor.w     w9, w3, w12
    14ae:	64 50 e1    	cp.w      w10, #0x4
    14b0:	24 00 32    	bra       Z, 0x14fa <aisinfinite>
    14b2:	64 20 e1    	cp.w      w4, #0x4
    14b4:	27 00 32    	bra       Z, 0x1504 <bisinfinite>
    14b6:	61 50 e1    	cp.w      w10, #0x1
    14b8:	22 00 32    	bra       Z, 0x14fe <return8>
    14ba:	61 20 e1    	cp.w      w4, #0x1
    14bc:	21 00 32    	bra       Z, 0x1500 <return2>
    14be:	8b 85 42    	add.w     w5, w11, w11
    14c0:	eb 07 b1    	sub.w     #0x7e, w11
    14c2:	01 34 b8    	mul.uu    w6, w1, w8
    14c4:	00 3a b8    	mul.uu    w7, w0, w4
    14c6:	08 04 42    	add.w     w4, w8, w8
    14c8:	89 84 4a    	addc.w    w5, w9, w9
    14ca:	01 3a b8    	mul.uu    w7, w1, w4
    14cc:	00 30 b8    	mul.uu    w6, w0, w0
    14ce:	88 80 40    	add.w     w1, w8, w1
    14d0:	09 01 4a    	addc.w    w4, w9, w2
    14d2:	04 00 33    	bra       N, 0x14dc <formsticky>
    14d4:	00 00 40    	add.w     w0, w0, w0
    14d6:	81 80 48    	addc.w    w1, w1, w1
    14d8:	02 01 49    	addc.w    w2, w2, w2
    14da:	8b 05 e9    	dec.w     w11, w11

000014dc <formsticky>:
    14dc:	c9 09 dd    	sl.w      w1, #0x9, w3
    14de:	83 01 70    	ior.w     w0, w3, w3
    14e0:	01 00 32    	bra       Z, 0x14e4 <formRandSig>
    14e2:	13 00 20    	mov.w     #0x1, w3

000014e4 <formRandSig>:
    14e4:	c8 14 de    	lsr.w     w2, #0x8, w9
    14e6:	48 14 dd    	sl.w      w2, #0x8, w8
    14e8:	47 09 de    	lsr.w     w1, #0x7, w2
    14ea:	12 00 b2    	and.w     #0x1, w2
    14ec:	c8 08 de    	lsr.w     w1, #0x8, w1
    14ee:	08 84 70    	ior.w     w1, w8, w8
    14f0:	85 ff 07    	rcall     0x13fc <__fpack>

000014f2 <return0>:
    14f2:	01 f0 a1    	bclr.w    w1, #0xf
    14f4:	0c f0 a7    	btsc.w    w12, #0xf
    14f6:	01 f0 a0    	bset.w    w1, #0xf
    14f8:	cd ff 37    	bra       0x1494 <__fbopExit>

000014fa <aisinfinite>:
    14fa:	61 20 e1    	cp.w      w4, #0x1
    14fc:	cf ff 32    	bra       Z, 0x149c <__fbopReturnNaN>

000014fe <return8>:
    14fe:	08 01 be    	mov.d     w8, w2

00001500 <return2>:
    1500:	02 00 be    	mov.d     w2, w0
    1502:	f7 ff 37    	bra       0x14f2 <return0>

00001504 <bisinfinite>:
    1504:	61 50 e1    	cp.w      w10, #0x1
    1506:	fc ff 3a    	bra       NZ, 0x1500 <return2>
    1508:	c9 ff 37    	bra       0x149c <__fbopReturnNaN>

0000150a <___udivsi3>:
    150a:	60 22 b8    	mul.uu    w4, #0x0, w4
    150c:	06 02 20    	mov.w     #0x20, w6

0000150e <nextbit>:
    150e:	00 00 d0    	sl.w      w0, w0
    1510:	81 80 d2    	rlc.w     w1, w1
    1512:	04 82 d2    	rlc.w     w4, w4
    1514:	85 82 d2    	rlc.w     w5, w5
    1516:	00 00 a0    	bset.w    w0, #0x0
    1518:	02 02 52    	sub.w     w4, w2, w4
    151a:	83 82 5a    	subb.w    w5, w3, w5
    151c:	03 00 31    	bra       C, 0x1524 <iterate>
    151e:	02 02 42    	add.w     w4, w2, w4
    1520:	83 82 4a    	addc.w    w5, w3, w5
    1522:	00 00 a1    	bclr.w    w0, #0x0

00001524 <iterate>:
    1524:	06 03 e9    	dec.w     w6, w6
    1526:	f3 ff 3a    	bra       NZ, 0x150e <nextbit>
    1528:	00 00 06    	return    

0000152a <__fcompare>:
    152a:	88 9f be    	mov.d     w8, [w15++]
    152c:	8a 9f be    	mov.d     w10, [w15++]
    152e:	84 1f 78    	mov.w     w4, [w15++]
    1530:	a0 ff 07    	rcall     0x1472 <__funpack2>
    1532:	4f 00 78    	mov.w     [--w15], w0
    1534:	11 00 33    	bra       N, 0x1558 <exit>
    1536:	f0 ff 2f    	mov.w     #0xffff, w0
    1538:	83 8f 6c    	xor.w     w9, w3, [w15]
    153a:	06 00 3b    	bra       NN, 0x1548 <comparemag>
    153c:	04 05 65    	and.w     w10, w4, w10
    153e:	0a 00 a7    	btsc.w    w10, #0x0
    1540:	08 00 37    	bra       0x1552 <returnEqual>
    1542:	09 f0 a6    	btss.w    w9, #0xf
    1544:	10 00 20    	mov.w     #0x1, w0
    1546:	08 00 37    	bra       0x1558 <exit>

00001548 <comparemag>:
    1548:	82 0f 54    	sub.w     w8, w2, [w15]
    154a:	83 8f 5c    	subb.w    w9, w3, [w15]
    154c:	03 00 39    	bra       NC, 0x1554 <adjust>
    154e:	10 00 20    	mov.w     #0x1, w0
    1550:	01 00 3e    	bra       GTU, 0x1554 <adjust>

00001552 <returnEqual>:
    1552:	00 00 20    	mov.w     #0x0, w0

00001554 <adjust>:
    1554:	09 f0 a7    	btsc.w    w9, #0xf
    1556:	00 00 ea    	neg.w     w0, w0

00001558 <exit>:
    1558:	4f 05 be    	mov.d     [--w15], w10
    155a:	4f 04 be    	mov.d     [--w15], w8
    155c:	00 00 e0    	cp0.w     w0
    155e:	00 00 06    	return    

00001560 <___floatdisf>:
    1560:	88 1f 78    	mov.w     w8, [w15++]
    1562:	03 04 78    	mov.w     w3, w8
    1564:	03 00 e0    	cp0.w     w3
    1566:	07 00 3d    	bra       GE, 0x1576 <notspecial>

00001568 <negative>:
    1568:	60 00 10    	subr.w    w0, #0x0, w0
    156a:	e0 80 18    	subbr.w   w1, #0x0, w1
    156c:	60 01 19    	subbr.w   w2, #0x0, w2
    156e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1570:	02 00 3b    	bra       NN, 0x1576 <notspecial>
    1572:	01 f0 2d    	mov.w     #0xdf00, w1
    1574:	03 00 37    	bra       0x157c <return0>

00001576 <notspecial>:
    1576:	04 00 07    	rcall     0x1580 <___floatundisf>
    1578:	08 f0 a7    	btsc.w    w8, #0xf
    157a:	01 f0 a0    	bset.w    w1, #0xf

0000157c <return0>:
    157c:	4f 04 78    	mov.w     [--w15], w8
    157e:	00 00 06    	return    

00001580 <___floatundisf>:
    1580:	88 9f be    	mov.d     w8, [w15++]
    1582:	8a 9f be    	mov.d     w10, [w15++]
    1584:	00 82 70    	ior.w     w1, w0, w4
    1586:	04 02 71    	ior.w     w2, w4, w4
    1588:	04 82 71    	ior.w     w3, w4, w4
    158a:	26 00 32    	bra       Z, 0x15d8 <return0>
    158c:	00 04 be    	mov.d     w0, w8
    158e:	02 00 be    	mov.d     w2, w0
    1590:	60 11 b8    	mul.uu    w2, #0x0, w2
    1592:	6b 09 20    	mov.w     #0x96, w11
    1594:	95 02 20    	mov.w     #0x29, w5
    1596:	01 82 cf    	ff1l      w1, w4
    1598:	0a 00 39    	bra       NC, 0x15ae <fixshift>
    159a:	05 41 b1    	sub.b     #0x10, w5
    159c:	00 82 cf    	ff1l      w0, w4
    159e:	07 00 39    	bra       NC, 0x15ae <fixshift>
    15a0:	05 41 b1    	sub.b     #0x10, w5
    15a2:	09 82 cf    	ff1l      w9, w4
    15a4:	04 00 39    	bra       NC, 0x15ae <fixshift>
    15a6:	05 41 b1    	sub.b     #0x10, w5
    15a8:	08 82 cf    	ff1l      w8, w4
    15aa:	01 00 39    	bra       NC, 0x15ae <fixshift>
    15ac:	05 41 b1    	sub.b     #0x10, w5

000015ae <fixshift>:
    15ae:	05 42 52    	sub.b     w4, w5, w4
    15b0:	12 00 32    	bra       Z, 0x15d6 <round>
    15b2:	0a 00 3b    	bra       NN, 0x15c8 <shiftleft>

000015b4 <shiftright>:
    15b4:	82 81 71    	ior.w     w3, w2, w3
    15b6:	61 01 64    	and.w     w8, #0x1, w2
    15b8:	81 00 d1    	lsr.w     w1, w1
    15ba:	00 80 d3    	rrc.w     w0, w0
    15bc:	89 84 d3    	rrc.w     w9, w9
    15be:	08 84 d3    	rrc.w     w8, w8
    15c0:	8b 05 e8    	inc.w     w11, w11
    15c2:	04 42 e8    	inc.b     w4, w4
    15c4:	f7 ff 3a    	bra       NZ, 0x15b4 <shiftright>
    15c6:	07 00 37    	bra       0x15d6 <round>

000015c8 <shiftleft>:
    15c8:	08 04 44    	add.w     w8, w8, w8
    15ca:	89 84 4c    	addc.w    w9, w9, w9
    15cc:	00 00 48    	addc.w    w0, w0, w0
    15ce:	81 80 48    	addc.w    w1, w1, w1
    15d0:	8b 05 e9    	dec.w     w11, w11
    15d2:	04 42 e9    	dec.b     w4, w4
    15d4:	f9 ff 3a    	bra       NZ, 0x15c8 <shiftleft>

000015d6 <round>:
    15d6:	12 ff 07    	rcall     0x13fc <__fpack>

000015d8 <return0>:
    15d8:	4f 05 be    	mov.d     [--w15], w10
    15da:	4f 04 be    	mov.d     [--w15], w8
    15dc:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	bc 39 04    	goto      0x39bc <L0>
    1006:	00 00 00 
    1008:	bc 39 04    	goto      0x39bc <L0>
    100a:	00 00 00 
    100c:	bc 39 04    	goto      0x39bc <L0>
    100e:	00 00 00 
    1010:	bc 39 04    	goto      0x39bc <L0>
    1012:	00 00 00 
    1014:	bc 39 04    	goto      0x39bc <L0>
    1016:	00 00 00 
    1018:	bc 39 04    	goto      0x39bc <L0>
    101a:	00 00 00 
    101c:	bc 39 04    	goto      0x39bc <L0>
    101e:	00 00 00 
    1020:	bc 39 04    	goto      0x39bc <L0>
    1022:	00 00 00 
    1024:	3a 24 04    	goto      0x243a <__T1Interrupt>
    1026:	00 00 00 
    1028:	bc 39 04    	goto      0x39bc <L0>
    102a:	00 00 00 
    102c:	bc 39 04    	goto      0x39bc <L0>
    102e:	00 00 00 
    1030:	68 24 04    	goto      0x2468 <__T2Interrupt>
    1032:	00 00 00 
    1034:	96 24 04    	goto      0x2496 <__T3Interrupt>
    1036:	00 00 00 
    1038:	bc 39 04    	goto      0x39bc <L0>
    103a:	00 00 00 
    103c:	bc 39 04    	goto      0x39bc <L0>
    103e:	00 00 00 
    1040:	bc 39 04    	goto      0x39bc <L0>
    1042:	00 00 00 
    1044:	bc 39 04    	goto      0x39bc <L0>
    1046:	00 00 00 
    1048:	bc 39 04    	goto      0x39bc <L0>
    104a:	00 00 00 
    104c:	bc 39 04    	goto      0x39bc <L0>
    104e:	00 00 00 
    1050:	bc 39 04    	goto      0x39bc <L0>
    1052:	00 00 00 
    1054:	bc 39 04    	goto      0x39bc <L0>
    1056:	00 00 00 
    1058:	bc 39 04    	goto      0x39bc <L0>
    105a:	00 00 00 
    105c:	bc 39 04    	goto      0x39bc <L0>
    105e:	00 00 00 
    1060:	bc 39 04    	goto      0x39bc <L0>
    1062:	00 00 00 
    1064:	bc 39 04    	goto      0x39bc <L0>
    1066:	00 00 00 
    1068:	bc 39 04    	goto      0x39bc <L0>
    106a:	00 00 00 
    106c:	bc 39 04    	goto      0x39bc <L0>
    106e:	00 00 00 
    1070:	c4 24 04    	goto      0x24c4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	f2 24 04    	goto      0x24f2 <__T5Interrupt>
    1076:	00 00 00 
    1078:	bc 39 04    	goto      0x39bc <L0>
    107a:	00 00 00 
    107c:	bc 39 04    	goto      0x39bc <L0>
    107e:	00 00 00 
    1080:	bc 39 04    	goto      0x39bc <L0>
    1082:	00 00 00 
    1084:	bc 39 04    	goto      0x39bc <L0>
    1086:	00 00 00 
    1088:	bc 39 04    	goto      0x39bc <L0>
    108a:	00 00 00 
    108c:	bc 39 04    	goto      0x39bc <L0>
    108e:	00 00 00 
    1090:	bc 39 04    	goto      0x39bc <L0>
    1092:	00 00 00 
    1094:	bc 39 04    	goto      0x39bc <L0>
    1096:	00 00 00 
    1098:	bc 39 04    	goto      0x39bc <L0>
    109a:	00 00 00 
    109c:	bc 39 04    	goto      0x39bc <L0>
    109e:	00 00 00 
    10a0:	bc 39 04    	goto      0x39bc <L0>
    10a2:	00 00 00 
    10a4:	bc 39 04    	goto      0x39bc <L0>
    10a6:	00 00 00 
    10a8:	bc 39 04    	goto      0x39bc <L0>
    10aa:	00 00 00 
    10ac:	bc 39 04    	goto      0x39bc <L0>
    10ae:	00 00 00 
    10b0:	bc 39 04    	goto      0x39bc <L0>
    10b2:	00 00 00 
    10b4:	bc 39 04    	goto      0x39bc <L0>
    10b6:	00 00 00 
    10b8:	bc 39 04    	goto      0x39bc <L0>
    10ba:	00 00 00 
    10bc:	bc 39 04    	goto      0x39bc <L0>
    10be:	00 00 00 
    10c0:	bc 39 04    	goto      0x39bc <L0>
    10c2:	00 00 00 
    10c4:	bc 39 04    	goto      0x39bc <L0>
    10c6:	00 00 00 
    10c8:	bc 39 04    	goto      0x39bc <L0>
    10ca:	00 00 00 
    10cc:	bc 39 04    	goto      0x39bc <L0>
    10ce:	00 00 00 
    10d0:	bc 39 04    	goto      0x39bc <L0>
    10d2:	00 00 00 
    10d4:	bc 39 04    	goto      0x39bc <L0>
    10d6:	00 00 00 
    10d8:	bc 39 04    	goto      0x39bc <L0>
    10da:	00 00 00 
    10dc:	bc 39 04    	goto      0x39bc <L0>
    10de:	00 00 00 
    10e0:	bc 39 04    	goto      0x39bc <L0>
    10e2:	00 00 00 
    10e4:	bc 39 04    	goto      0x39bc <L0>
    10e6:	00 00 00 
    10e8:	bc 39 04    	goto      0x39bc <L0>
    10ea:	00 00 00 
    10ec:	bc 39 04    	goto      0x39bc <L0>
    10ee:	00 00 00 
    10f0:	bc 39 04    	goto      0x39bc <L0>
    10f2:	00 00 00 
    10f4:	bc 39 04    	goto      0x39bc <L0>
    10f6:	00 00 00 
    10f8:	bc 39 04    	goto      0x39bc <L0>
    10fa:	00 00 00 
    10fc:	bc 39 04    	goto      0x39bc <L0>
    10fe:	00 00 00 
    1100:	bc 39 04    	goto      0x39bc <L0>
    1102:	00 00 00 
    1104:	bc 39 04    	goto      0x39bc <L0>
    1106:	00 00 00 
    1108:	bc 39 04    	goto      0x39bc <L0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	bc 39 04    	goto      0x39bc <L0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

000095de <_Device>:
    95de:	12 01       	.word 0x112
    95e0:	00 02       	.word 0x200
    95e2:	00 00       	.word 0
    95e4:	00 40       	.word 0x4000
    95e6:	66 66       	.word 0x6666
    95e8:	03 00       	.word 0x3
    95ea:	00 00       	.word 0
    95ec:	01 02       	.word 0x201
    95ee:	00 01       	.word 0x100

000095f0 <_Configuration1>:
    95f0:	09 02       	.word 0x209
    95f2:	12 00       	.word 0x12
    95f4:	01 01       	.word 0x101
    95f6:	00 a0       	.word 0xa000
    95f8:	32 09       	.word 0x932
    95fa:	04 00       	.word 0x4
    95fc:	00 00       	.word 0
    95fe:	ff 00       	.word 0xff
    9600:	ff 00       	.word 0xff

00009602 <_String0>:
    9602:	04 03       	.word 0x304
    9604:	09 04       	.word 0x409

00009606 <_String1>:
    9606:	1a 03       	.word 0x31a
    9608:	4f 00       	.word 0x4f
    960a:	6c 00       	.word 0x6c
    960c:	69 00       	.word 0x69
    960e:	6e 00       	.word 0x6e
    9610:	20 00       	.word 0x20
    9612:	43 00       	.word 0x43
    9614:	6f 00       	.word 0x6f
    9616:	6c 00       	.word 0x6c
    9618:	6c 00       	.word 0x6c
    961a:	65 00       	.word 0x65
    961c:	67 00       	.word 0x67
    961e:	65 00       	.word 0x65

00009620 <_String2>:
    9620:	44 03       	.word 0x344
    9622:	45 00       	.word 0x45
    9624:	6c 00       	.word 0x6c
    9626:	65 00       	.word 0x65
    9628:	63 00       	.word 0x63
    962a:	61 00       	.word 0x61
    962c:	6e 00       	.word 0x6e
    962e:	69 00       	.word 0x69
    9630:	73 00       	.word 0x73
    9632:	6d 00       	.word 0x6d
    9634:	73 00       	.word 0x73
    9636:	20 00       	.word 0x20
    9638:	4d 00       	.word 0x4d
    963a:	69 00       	.word 0x69
    963c:	6e 00       	.word 0x6e
    963e:	69 00       	.word 0x69
    9640:	70 00       	.word 0x70
    9642:	72 00       	.word 0x72
    9644:	6f 00       	.word 0x6f
    9646:	6a 00       	.word 0x6a
    9648:	65 00       	.word 0x65
    964a:	63 00       	.word 0x63
    964c:	74 00       	.word 0x74
    964e:	20 00       	.word 0x20
    9650:	32 00       	.word 0x32
    9652:	20 00       	.word 0x20
    9654:	46 00       	.word 0x46
    9656:	69 00       	.word 0x69
    9658:	72 00       	.word 0x72
    965a:	6d 00       	.word 0x6d
    965c:	77 00       	.word 0x77
    965e:	61 00       	.word 0x61
    9660:	72 00       	.word 0x72
    9662:	65 00       	.word 0x65
Disassembly of section .text:

00001664 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    1664:	04 00 fa    	lnk       #0x4
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    1666:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    1668:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    166a:	f0 0f 20    	mov.w     #0xff, w0
    166c:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    166e:	94 24 a9    	bclr.b    0x494, #0x1
    U1EP = (unsigned int *)&U1EP0;
    1670:	a0 4a 20    	mov.w     #0x4aa, w0
    1672:	10 07 98    	mov.w     w0, [w14+2]
    for (n = 0; n<16; n++)
    1674:	00 40 eb    	clr.b     w0
    1676:	00 4f 78    	mov.b     w0, [w14]
    1678:	07 00 37    	bra       0x1688 <.L2>

0000167a <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    167a:	1e 80 fb    	ze        [w14], w0
    167c:	00 00 40    	add.w     w0, w0, w0
    167e:	9e 00 90    	mov.w     [w14+2], w1
    1680:	00 80 40    	add.w     w1, w0, w0
    1682:	80 00 eb    	clr.w     w1
    1684:	01 08 78    	mov.w     w1, [w0]
    1686:	1e 4f e8    	inc.b     [w14], [w14]

00001688 <.L2>:
    1688:	1e 40 78    	mov.b     [w14], w0
    168a:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    168c:	f6 ff 36    	bra       LEU, 0x167a <.L3>
    U1EP0 = ENDPT_CONTROL;
    168e:	d0 00 20    	mov.w     #0xd, w0
    1690:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1692:	00 c0 20    	mov.w     #0xc00, w0
    1694:	01 c4 b3    	mov.b     #0x40, w1
    1696:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    1698:	40 ab 20    	mov.w     #0xab4, w0
    169a:	10 60 88    	mov.w     w0, 0xc02
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    169c:	10 c0 20    	mov.w     #0xc01, w0
    169e:	81 c8 b3    	mov.b     #0x88, w1
    16a0:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    16a2:	40 af 20    	mov.w     #0xaf4, w0
    16a4:	30 60 88    	mov.w     w0, 0xc06
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    16a6:	50 c0 20    	mov.w     #0xc05, w0
    16a8:	81 c0 b3    	mov.b     #0x8, w1
    16aa:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0x00;
    16ac:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0x00;
    16ae:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (unsigned int)BD>>8;
    16b0:	00 c0 20    	mov.w     #0xc00, w0
    16b2:	48 00 de    	lsr.w     w0, #0x8, w0
    16b4:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    16b6:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    16b8:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    16ba:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    16bc:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0x00;
    16be:	51 68 ef    	clr.b     0x851
    USB_USWSTAT = 0x00;         // default to powered state
    16c0:	54 68 ef    	clr.b     0x854
    USB_device_status = 0x01;
    16c2:	10 c0 b3    	mov.b     #0x1, w0
    16c4:	52 e8 b7    	mov.b     WREG, 0x852
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    16c6:	40 b3 20    	mov.w     #0xb34, w0
    16c8:	80 c0 eb    	setm.b    w1
    16ca:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    16cc:	50 b3 20    	mov.w     #0xb35, w0
    16ce:	80 c0 eb    	setm.b    w1
    16d0:	01 48 78    	mov.b     w1, [w0]
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    16d2:	00 00 00    	nop       

000016d4 <.L4>:
    16d4:	a1 24 80    	mov.w     0x494, w1
    16d6:	00 04 20    	mov.w     #0x40, w0
    16d8:	00 80 60    	and.w     w1, w0, w0
    16da:	00 00 e0    	cp0.w     w0
    16dc:	fb ff 3a    	bra       NZ, 0x16d4 <.L4>
}
    16de:	00 80 fa    	ulnk      
    16e0:	00 00 06    	return    

000016e2 <_ServiceUSB>:

void ServiceUSB(void) {
    16e2:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    16e4:	50 24 80    	mov.w     0x48a, w0
    16e6:	62 00 60    	and.w     w0, #0x2, w0
    16e8:	00 00 e0    	cp0.w     w0
    16ea:	05 00 32    	bra       Z, 0x16f6 <.L6>
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    16ec:	f0 0f 20    	mov.w     #0xff, w0
    16ee:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;     // clear UERRIF
    16f0:	20 00 20    	mov.w     #0x2, w0
    16f2:	50 24 88    	mov.w     w0, 0x48a
    16f4:	90 00 37    	bra       0x1816 <.L5>

000016f6 <.L6>:
    } else if (U1IRbits.SOFIF) {
    16f6:	50 24 80    	mov.w     0x48a, w0
    16f8:	64 00 60    	and.w     w0, #0x4, w0
    16fa:	00 00 e0    	cp0.w     w0
    16fc:	03 00 32    	bra       Z, 0x1704 <.L8>
        U1IR = U1IR_SOFIF;      // clear SOFIF
    16fe:	40 00 20    	mov.w     #0x4, w0
    1700:	50 24 88    	mov.w     w0, 0x48a
    1702:	89 00 37    	bra       0x1816 <.L5>

00001704 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    1704:	50 24 80    	mov.w     0x48a, w0
    1706:	70 00 60    	and.w     w0, #0x10, w0
    1708:	00 00 e0    	cp0.w     w0
    170a:	03 00 32    	bra       Z, 0x1712 <.L9>
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    170c:	00 01 20    	mov.w     #0x10, w0
    170e:	50 24 88    	mov.w     w0, 0x48a
    1710:	82 00 37    	bra       0x1816 <.L5>

00001712 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    1712:	51 24 80    	mov.w     0x48a, w1
    1714:	00 02 20    	mov.w     #0x20, w0
    1716:	00 80 60    	and.w     w1, w0, w0
    1718:	00 00 e0    	cp0.w     w0
    171a:	03 00 32    	bra       Z, 0x1722 <.L10>
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    171c:	00 02 20    	mov.w     #0x20, w0
    171e:	50 24 88    	mov.w     w0, 0x48a
    1720:	7a 00 37    	bra       0x1816 <.L5>

00001722 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    1722:	51 24 80    	mov.w     0x48a, w1
    1724:	00 08 20    	mov.w     #0x80, w0
    1726:	00 80 60    	and.w     w1, w0, w0
    1728:	00 00 e0    	cp0.w     w0
    172a:	03 00 32    	bra       Z, 0x1732 <.L11>
        U1IR = U1IR_STALLIF;    // clear STALLIF
    172c:	00 08 20    	mov.w     #0x80, w0
    172e:	50 24 88    	mov.w     w0, 0x48a
    1730:	72 00 37    	bra       0x1816 <.L5>

00001732 <.L11>:
    } else if (U1IRbits.URSTIF) {
    1732:	50 24 80    	mov.w     0x48a, w0
    1734:	61 00 60    	and.w     w0, #0x1, w0
    1736:	00 00 e0    	cp0.w     w0
    1738:	34 00 32    	bra       Z, 0x17a2 <.L12>
        USB_curr_config = 0x00;
    173a:	51 68 ef    	clr.b     0x851
        while (U1IRbits.TRNIF) {
    173c:	08 00 37    	bra       0x174e <.L13>

0000173e <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    173e:	80 00 20    	mov.w     #0x8, w0
    1740:	50 24 88    	mov.w     w0, 0x48a
	...

0000174e <.L13>:
    174e:	50 24 80    	mov.w     0x48a, w0
    1750:	68 00 60    	and.w     w0, #0x8, w0
    1752:	00 00 e0    	cp0.w     w0
    1754:	f4 ff 3a    	bra       NZ, 0x173e <.L14>
            __builtin_nop();    // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();    // ...to allow a pending TRNIF to appear
        }
        U1EP = (unsigned int *)&U1EP0;
    1756:	a0 4a 20    	mov.w     #0x4aa, w0
    1758:	10 07 98    	mov.w     w0, [w14+2]
        for (n = 0; n<16; n++)
    175a:	00 40 eb    	clr.b     w0
    175c:	00 4f 78    	mov.b     w0, [w14]
    175e:	07 00 37    	bra       0x176e <.L15>

00001760 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    1760:	1e 80 fb    	ze        [w14], w0
    1762:	00 00 40    	add.w     w0, w0, w0
    1764:	9e 00 90    	mov.w     [w14+2], w1
    1766:	00 80 40    	add.w     w1, w0, w0
    1768:	80 00 eb    	clr.w     w1
    176a:	01 08 78    	mov.w     w1, [w0]
    176c:	1e 4f e8    	inc.b     [w14], [w14]

0000176e <.L15>:
    176e:	1e 40 78    	mov.b     [w14], w0
    1770:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1772:	f6 ff 36    	bra       LEU, 0x1760 <.L16>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1774:	00 c0 20    	mov.w     #0xc00, w0
    1776:	01 c4 b3    	mov.b     #0x40, w1
    1778:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    177a:	40 ab 20    	mov.w     #0xab4, w0
    177c:	10 60 88    	mov.w     w0, 0xc02
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    177e:	10 c0 20    	mov.w     #0xc01, w0
    1780:	81 c8 b3    	mov.b     #0x88, w1
    1782:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    1784:	40 af 20    	mov.w     #0xaf4, w0
    1786:	30 60 88    	mov.w     w0, 0xc06
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    1788:	50 c0 20    	mov.w     #0xc05, w0
    178a:	81 c0 b3    	mov.b     #0x8, w1
    178c:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0x00;                  // set USB Address to 0
    178e:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    1790:	f0 0f 20    	mov.w     #0xff, w0
    1792:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    1794:	d0 00 20    	mov.w     #0xd, w0
    1796:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    1798:	10 c0 b3    	mov.b     #0x1, w0
    179a:	54 e8 b7    	mov.b     WREG, 0x854
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    179c:	10 c0 b3    	mov.b     #0x1, w0
    179e:	52 e8 b7    	mov.b     WREG, 0x852
    17a0:	3a 00 37    	bra       0x1816 <.L5>

000017a2 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    17a2:	50 24 80    	mov.w     0x48a, w0
    17a4:	68 00 60    	and.w     w0, #0x8, w0
    17a6:	00 00 e0    	cp0.w     w0
    17a8:	36 00 32    	bra       Z, 0x1816 <.L5>
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    17aa:	90 24 80    	mov.w     0x492, w0
    17ac:	43 00 de    	lsr.w     w0, #0x3, w0
    17ae:	c2 00 dd    	sl.w      w0, #0x2, w1
    17b0:	00 c0 20    	mov.w     #0xc00, w0
    17b2:	00 80 40    	add.w     w1, w0, w0
    17b4:	20 07 98    	mov.w     w0, [w14+4]
        USB_buffer_desc.status = buf_desc_ptr->status;
    17b6:	2e 00 90    	mov.w     [w14+4], w0
    17b8:	10 40 90    	mov.b     [w0+1], w0
    17ba:	45 e8 b7    	mov.b     WREG, 0x845
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    17bc:	2e 00 90    	mov.w     [w14+4], w0
    17be:	10 40 78    	mov.b     [w0], w0
    17c0:	44 e8 b7    	mov.b     WREG, 0x844
        USB_buffer_desc.address = buf_desc_ptr->address;
    17c2:	2e 00 90    	mov.w     [w14+4], w0
    17c4:	10 00 90    	mov.w     [w0+2], w0
    17c6:	30 42 88    	mov.w     w0, 0x846
        USB_USTAT = U1STAT;             // save the USB status register
    17c8:	90 24 80    	mov.w     0x492, w0
    17ca:	00 40 78    	mov.b     w0, w0
    17cc:	53 e8 b7    	mov.b     WREG, 0x853
        U1IR = U1IR_TRNIF;              // clear TRNIF
    17ce:	80 00 20    	mov.w     #0x8, w0
    17d0:	50 24 88    	mov.w     w0, 0x48a
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    17d2:	50 68 ef    	clr.b     0x850
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    17d4:	45 c8 bf    	mov.b     0x845, WREG
    17d6:	80 80 fb    	ze        w0, w1
    17d8:	c0 03 20    	mov.w     #0x3c, w0
    17da:	00 80 60    	and.w     w1, w0, w0
    17dc:	41 02 20    	mov.w     #0x24, w1
    17de:	81 0f 50    	sub.w     w0, w1, [w15]
    17e0:	08 00 32    	bra       Z, 0x17f2 <.L19>
    17e2:	41 03 20    	mov.w     #0x34, w1
    17e4:	81 0f 50    	sub.w     w0, w1, [w15]
    17e6:	03 00 32    	bra       Z, 0x17ee <.L20>
    17e8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    17ea:	05 00 32    	bra       Z, 0x17f6 <.L18>
    17ec:	05 00 37    	bra       0x17f8 <.L17>

000017ee <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    17ee:	15 00 07    	rcall     0x181a <_ProcessSetupToken> <L0> <.LFB2> <.LFE1>
                break;
    17f0:	03 00 37    	bra       0x17f8 <.L17>

000017f2 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    17f2:	da 02 07    	rcall     0x1da8 <_ProcessInToken> <L0> <.LFB4> <.LFE3>
                break;
    17f4:	01 00 37    	bra       0x17f8 <.L17>

000017f6 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    17f6:	0c 03 07    	rcall     0x1e10 <_ProcessOutToken> <L0> <.LFB5> <.LFE4>

000017f8 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    17f8:	50 c8 bf    	mov.b     0x850, WREG
    17fa:	00 80 fb    	ze        w0, w0
    17fc:	61 00 60    	and.w     w0, #0x1, w0
    17fe:	00 40 78    	mov.b     w0, w0
    1800:	00 04 e0    	cp0.b     w0
    1802:	09 00 32    	bra       Z, 0x1816 <.L5>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    1804:	00 c0 20    	mov.w     #0xc00, w0
    1806:	01 c4 b3    	mov.b     #0x40, w1
    1808:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0x84;
    180a:	50 c0 20    	mov.w     #0xc05, w0
    180c:	41 c8 b3    	mov.b     #0x84, w1
    180e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    1810:	10 c0 20    	mov.w     #0xc01, w0
    1812:	41 c8 b3    	mov.b     #0x84, w1
    1814:	01 48 78    	mov.b     w1, [w0]

00001816 <.L5>:
        }
    }
}
    1816:	00 80 fa    	ulnk      
    1818:	00 00 06    	return    

0000181a <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    181a:	02 00 fa    	lnk       #0x2
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    181c:	31 42 80    	mov.w     0x846, w1
    181e:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    1820:	1e 00 78    	mov.w     [w14], w0
    1822:	90 40 78    	mov.b     [w0], w1
    1824:	80 84 20    	mov.w     #0x848, w0
    1826:	01 48 78    	mov.b     w1, [w0]
    1828:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    182a:	1e 00 78    	mov.w     [w14], w0
    182c:	90 40 78    	mov.b     [w0], w1
    182e:	80 84 20    	mov.w     #0x848, w0
    1830:	11 40 98    	mov.b     w1, [w0+1]
    1832:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    1834:	1e 00 78    	mov.w     [w14], w0
    1836:	90 40 78    	mov.b     [w0], w1
    1838:	80 84 20    	mov.w     #0x848, w0
    183a:	21 40 98    	mov.b     w1, [w0+2]
    183c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    183e:	1e 00 78    	mov.w     [w14], w0
    1840:	90 40 78    	mov.b     [w0], w1
    1842:	80 84 20    	mov.w     #0x848, w0
    1844:	31 40 98    	mov.b     w1, [w0+3]
    1846:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    1848:	1e 00 78    	mov.w     [w14], w0
    184a:	90 40 78    	mov.b     [w0], w1
    184c:	80 84 20    	mov.w     #0x848, w0
    184e:	41 40 98    	mov.b     w1, [w0+4]
    1850:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    1852:	1e 00 78    	mov.w     [w14], w0
    1854:	90 40 78    	mov.b     [w0], w1
    1856:	80 84 20    	mov.w     #0x848, w0
    1858:	51 40 98    	mov.b     w1, [w0+5]
    185a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    185c:	1e 00 78    	mov.w     [w14], w0
    185e:	90 40 78    	mov.b     [w0], w1
    1860:	80 84 20    	mov.w     #0x848, w0
    1862:	61 40 98    	mov.b     w1, [w0+6]
    1864:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1866:	1e 00 78    	mov.w     [w14], w0
    1868:	90 40 78    	mov.b     [w0], w1
    186a:	80 84 20    	mov.w     #0x848, w0
    186c:	71 40 98    	mov.b     w1, [w0+7]
    186e:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    1870:	00 c0 20    	mov.w     #0xc00, w0
    1872:	01 c4 b3    	mov.b     #0x40, w1
    1874:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    1876:	50 c0 20    	mov.w     #0xc05, w0
    1878:	81 c0 b3    	mov.b     #0x8, w1
    187a:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    187c:	80 84 20    	mov.w     #0x848, w0
    187e:	10 40 78    	mov.b     [w0], w0
    1880:	00 04 e0    	cp0.b     w0
    1882:	06 00 35    	bra       LT, 0x1890 <.L22>
    1884:	80 84 20    	mov.w     #0x848, w0
    1886:	30 00 90    	mov.w     [w0+6], w0
    1888:	00 00 e0    	cp0.w     w0
    188a:	02 00 32    	bra       Z, 0x1890 <.L22>
    188c:	80 cc b3    	mov.b     #0xc8, w0
    188e:	01 00 37    	bra       0x1892 <.L23>

00001890 <.L22>:
    1890:	80 c8 b3    	mov.b     #0x88, w0

00001892 <.L23>:
    1892:	11 c0 20    	mov.w     #0xc01, w1
    1894:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    1896:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    1898:	40 b3 20    	mov.w     #0xb34, w0
    189a:	80 c0 eb    	setm.b    w1
    189c:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    189e:	50 b3 20    	mov.w     #0xb35, w0
    18a0:	80 c0 eb    	setm.b    w1
    18a2:	01 48 78    	mov.b     w1, [w0]
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    18a4:	80 84 20    	mov.w     #0x848, w0
    18a6:	10 40 78    	mov.b     [w0], w0
    18a8:	80 80 fb    	ze        w0, w1
    18aa:	00 06 20    	mov.w     #0x60, w0
    18ac:	00 80 60    	and.w     w1, w0, w0
    18ae:	00 00 e0    	cp0.w     w0
    18b0:	04 00 32    	bra       Z, 0x18ba <.L25>
    18b2:	01 04 20    	mov.w     #0x40, w1
    18b4:	81 0f 50    	sub.w     w0, w1, [w15]
    18b6:	03 00 32    	bra       Z, 0x18be <.L26>
    18b8:	04 00 37    	bra       0x18c2 <.L28>

000018ba <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    18ba:	08 00 07    	rcall     0x18cc <_StandardRequests> <L0> <.LFB3> <.LFE2>
            break;
    18bc:	05 00 37    	bra       0x18c8 <.L21>

000018be <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    18be:	74 04 07    	rcall     0x21a8 <_VendorRequests> <L0> <.LFB17> <.LFE16>
            break;
    18c0:	03 00 37    	bra       0x18c8 <.L21>

000018c2 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    18c2:	50 c8 bf    	mov.b     0x850, WREG
    18c4:	00 04 a0    	bset.b    w0, #0x0
    18c6:	50 e8 b7    	mov.b     WREG, 0x850

000018c8 <.L21>:
    }
}
    18c8:	00 80 fa    	ulnk      
    18ca:	00 00 06    	return    

000018cc <_StandardRequests>:

void StandardRequests(void) {
    18cc:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    18ce:	80 84 20    	mov.w     #0x848, w0
    18d0:	10 40 90    	mov.b     [w0+1], w0
    18d2:	00 80 fb    	ze        w0, w0
    18d4:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    18d6:	77 01 32    	bra       Z, 0x1bc6 <.L34>
    18d8:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    18da:	0c 00 3c    	bra       GT, 0x18f4 <.L39>
    18dc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18de:	bf 00 32    	bra       Z, 0x1a5e <.L32>
    18e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18e2:	03 00 3c    	bra       GT, 0x18ea <.L40>
    18e4:	00 00 e0    	cp0.w     w0
    18e6:	12 00 32    	bra       Z, 0x190c <.L31>
    18e8:	5a 02 37    	bra       0x1d9e <.L30>

000018ea <.L40>:
    18ea:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18ec:	b8 00 32    	bra       Z, 0x1a5e <.L32>
    18ee:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    18f0:	4a 01 32    	bra       Z, 0x1b86 <.L33>
    18f2:	55 02 37    	bra       0x1d9e <.L30>

000018f4 <.L39>:
    18f4:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    18f6:	ed 01 32    	bra       Z, 0x1cd2 <.L36>
    18f8:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    18fa:	03 00 3c    	bra       GT, 0x1902 <.L41>
    18fc:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    18fe:	de 01 32    	bra       Z, 0x1cbc <.L35>
    1900:	4e 02 37    	bra       0x1d9e <.L30>

00001902 <.L41>:
    1902:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    1904:	10 02 32    	bra       Z, 0x1d26 <.L37>
    1906:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    1908:	29 02 32    	bra       Z, 0x1d5c <.L38>
    190a:	49 02 37    	bra       0x1d9e <.L30>

0000190c <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    190c:	80 84 20    	mov.w     #0x848, w0
    190e:	10 40 78    	mov.b     [w0], w0
    1910:	00 80 fb    	ze        w0, w0
    1912:	7f 00 60    	and.w     w0, #0x1f, w0
    1914:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1916:	13 00 32    	bra       Z, 0x193e <.L44>
    1918:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    191a:	32 00 32    	bra       Z, 0x1980 <.L45>
    191c:	00 00 e0    	cp0.w     w0
    191e:	9a 00 3a    	bra       NZ, 0x1a54 <.L128>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    1920:	30 60 80    	mov.w     0xc06, w0
    1922:	21 85 20    	mov.w     #0x852, w1
    1924:	91 40 78    	mov.b     [w1], w1
    1926:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0x00;
    1928:	30 60 80    	mov.w     0xc06, w0
    192a:	00 00 e8    	inc.w     w0, w0
    192c:	80 40 eb    	clr.b     w1
    192e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0x02;
    1930:	40 c0 20    	mov.w     #0xc04, w0
    1932:	21 c0 b3    	mov.b     #0x2, w1
    1934:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    1936:	50 c0 20    	mov.w     #0xc05, w0
    1938:	81 cc b3    	mov.b     #0xc8, w1
    193a:	01 48 78    	mov.b     w1, [w0]
                    break;
    193c:	8f 00 37    	bra       0x1a5c <.L46>

0000193e <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    193e:	54 c8 bf    	mov.b     0x854, WREG
    1940:	00 80 fb    	ze        w0, w0
    1942:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1944:	03 00 32    	bra       Z, 0x194c <.L48>
    1946:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1948:	05 00 32    	bra       Z, 0x1954 <.L49>
    194a:	19 00 37    	bra       0x197e <.L47>

0000194c <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    194c:	50 c8 bf    	mov.b     0x850, WREG
    194e:	00 04 a0    	bset.b    w0, #0x0
    1950:	50 e8 b7    	mov.b     WREG, 0x850
                            break;
    1952:	15 00 37    	bra       0x197e <.L47>

00001954 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1954:	80 84 20    	mov.w     #0x848, w0
    1956:	40 40 90    	mov.b     [w0+4], w0
    1958:	00 04 e0    	cp0.b     w0
    195a:	0e 00 3a    	bra       NZ, 0x1978 <.L50>
                                BD[EP0IN].address[0] = 0x00;
    195c:	30 60 80    	mov.w     0xc06, w0
    195e:	80 40 eb    	clr.b     w1
    1960:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0x00;
    1962:	30 60 80    	mov.w     0xc06, w0
    1964:	00 00 e8    	inc.w     w0, w0
    1966:	80 40 eb    	clr.b     w1
    1968:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    196a:	40 c0 20    	mov.w     #0xc04, w0
    196c:	21 c0 b3    	mov.b     #0x2, w1
    196e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1970:	50 c0 20    	mov.w     #0xc05, w0
    1972:	81 cc b3    	mov.b     #0xc8, w1
    1974:	01 48 78    	mov.b     w1, [w0]
    1976:	03 00 37    	bra       0x197e <.L47>

00001978 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1978:	50 c8 bf    	mov.b     0x850, WREG
    197a:	00 04 a0    	bset.b    w0, #0x0
    197c:	50 e8 b7    	mov.b     WREG, 0x850

0000197e <.L47>:
                            }
                    }
                    break;
    197e:	6e 00 37    	bra       0x1a5c <.L46>

00001980 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1980:	54 c8 bf    	mov.b     0x854, WREG
    1982:	00 80 fb    	ze        w0, w0
    1984:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1986:	03 00 32    	bra       Z, 0x198e <.L52>
    1988:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    198a:	29 00 32    	bra       Z, 0x19de <.L53>
    198c:	5f 00 37    	bra       0x1a4c <.L129>

0000198e <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    198e:	80 84 20    	mov.w     #0x848, w0
    1990:	40 40 90    	mov.b     [w0+4], w0
    1992:	00 80 fb    	ze        w0, w0
    1994:	6f 00 60    	and.w     w0, #0xf, w0
    1996:	00 00 e0    	cp0.w     w0
    1998:	1e 00 3a    	bra       NZ, 0x19d6 <.L54>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    199a:	31 60 80    	mov.w     0xc06, w1
    199c:	80 84 20    	mov.w     #0x848, w0
    199e:	40 40 90    	mov.b     [w0+4], w0
    19a0:	00 04 e0    	cp0.b     w0
    19a2:	07 00 3d    	bra       GE, 0x19b2 <.L55>
    19a4:	50 c0 20    	mov.w     #0xc05, w0
    19a6:	10 40 78    	mov.b     [w0], w0
    19a8:	00 80 fb    	ze        w0, w0
    19aa:	64 00 60    	and.w     w0, #0x4, w0
    19ac:	42 80 de    	asr.w     w0, #0x2, w0
    19ae:	00 40 78    	mov.b     w0, w0
    19b0:	06 00 37    	bra       0x19be <.L56>

000019b2 <.L55>:
    19b2:	10 c0 20    	mov.w     #0xc01, w0
    19b4:	10 40 78    	mov.b     [w0], w0
    19b6:	00 80 fb    	ze        w0, w0
    19b8:	64 00 60    	and.w     w0, #0x4, w0
    19ba:	42 80 de    	asr.w     w0, #0x2, w0
    19bc:	00 40 78    	mov.b     w0, w0

000019be <.L56>:
    19be:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0x00;
    19c0:	30 60 80    	mov.w     0xc06, w0
    19c2:	00 00 e8    	inc.w     w0, w0
    19c4:	80 40 eb    	clr.b     w1
    19c6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    19c8:	40 c0 20    	mov.w     #0xc04, w0
    19ca:	21 c0 b3    	mov.b     #0x2, w1
    19cc:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    19ce:	50 c0 20    	mov.w     #0xc05, w0
    19d0:	81 cc b3    	mov.b     #0xc8, w1
    19d2:	01 48 78    	mov.b     w1, [w0]
    19d4:	03 00 37    	bra       0x19dc <.L57>

000019d6 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    19d6:	50 c8 bf    	mov.b     0x850, WREG
    19d8:	00 04 a0    	bset.b    w0, #0x0
    19da:	50 e8 b7    	mov.b     WREG, 0x850

000019dc <.L57>:
                            }
                            break;
    19dc:	3a 00 37    	bra       0x1a52 <.L58>

000019de <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    19de:	a0 4a 20    	mov.w     #0x4aa, w0
    19e0:	10 07 98    	mov.w     w0, [w14+2]
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    19e2:	80 84 20    	mov.w     #0x848, w0
    19e4:	40 40 90    	mov.b     [w0+4], w0
    19e6:	6f 4f 60    	and.b     w0, #0xf, [w14]
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    19e8:	1e 80 fb    	ze        [w14], w0
    19ea:	00 00 40    	add.w     w0, w0, w0
    19ec:	80 00 78    	mov.w     w0, w1
    19ee:	80 84 20    	mov.w     #0x848, w0
    19f0:	40 40 90    	mov.b     [w0+4], w0
    19f2:	00 00 fb    	se        w0, w0
    19f4:	4f 00 de    	lsr.w     w0, #0xf, w0
    19f6:	01 00 70    	ior.w     w0, w1, w0
    19f8:	c2 00 dd    	sl.w      w0, #0x2, w1
    19fa:	00 c0 20    	mov.w     #0xc00, w0
    19fc:	00 80 40    	add.w     w1, w0, w0
    19fe:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    1a00:	1e 80 fb    	ze        [w14], w0
    1a02:	00 00 40    	add.w     w0, w0, w0
    1a04:	9e 00 90    	mov.w     [w14+2], w1
    1a06:	00 80 40    	add.w     w1, w0, w0
    1a08:	90 00 78    	mov.w     [w0], w1
    1a0a:	80 84 20    	mov.w     #0x848, w0
    1a0c:	40 40 90    	mov.b     [w0+4], w0
    1a0e:	00 04 e0    	cp0.b     w0
    1a10:	02 00 3d    	bra       GE, 0x1a16 <.L59>
    1a12:	40 00 20    	mov.w     #0x4, w0
    1a14:	01 00 37    	bra       0x1a18 <.L60>

00001a16 <.L59>:
    1a16:	80 00 20    	mov.w     #0x8, w0

00001a18 <.L60>:
    1a18:	00 80 60    	and.w     w1, w0, w0
    1a1a:	00 00 e0    	cp0.w     w0
    1a1c:	13 00 32    	bra       Z, 0x1a44 <.L61>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    1a1e:	30 60 80    	mov.w     0xc06, w0
    1a20:	ae 00 90    	mov.w     [w14+4], w1
    1a22:	91 40 90    	mov.b     [w1+1], w1
    1a24:	81 80 fb    	ze        w1, w1
    1a26:	e4 80 60    	and.w     w1, #0x4, w1
    1a28:	c2 88 de    	asr.w     w1, #0x2, w1
    1a2a:	81 40 78    	mov.b     w1, w1
    1a2c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0x00;
    1a2e:	30 60 80    	mov.w     0xc06, w0
    1a30:	00 00 e8    	inc.w     w0, w0
    1a32:	80 40 eb    	clr.b     w1
    1a34:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    1a36:	40 c0 20    	mov.w     #0xc04, w0
    1a38:	21 c0 b3    	mov.b     #0x2, w1
    1a3a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1a3c:	50 c0 20    	mov.w     #0xc05, w0
    1a3e:	81 cc b3    	mov.b     #0xc8, w1
    1a40:	01 48 78    	mov.b     w1, [w0]
    1a42:	03 00 37    	bra       0x1a4a <.L62>

00001a44 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1a44:	50 c8 bf    	mov.b     0x850, WREG
    1a46:	00 04 a0    	bset.b    w0, #0x0
    1a48:	50 e8 b7    	mov.b     WREG, 0x850

00001a4a <.L62>:
                            }
                            break;
    1a4a:	03 00 37    	bra       0x1a52 <.L58>

00001a4c <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    1a4c:	50 c8 bf    	mov.b     0x850, WREG
    1a4e:	00 04 a0    	bset.b    w0, #0x0
    1a50:	50 e8 b7    	mov.b     WREG, 0x850

00001a52 <.L58>:
                    }
                    break;
    1a52:	04 00 37    	bra       0x1a5c <.L46>

00001a54 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    1a54:	50 c8 bf    	mov.b     0x850, WREG
    1a56:	00 04 a0    	bset.b    w0, #0x0
    1a58:	50 e8 b7    	mov.b     WREG, 0x850
            }
            break;
    1a5a:	a4 01 37    	bra       0x1da4 <.L29>

00001a5c <.L46>:
    1a5c:	a3 01 37    	bra       0x1da4 <.L29>

00001a5e <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    1a5e:	80 84 20    	mov.w     #0x848, w0
    1a60:	10 40 78    	mov.b     [w0], w0
    1a62:	00 80 fb    	ze        w0, w0
    1a64:	7f 00 60    	and.w     w0, #0x1f, w0
    1a66:	00 00 e0    	cp0.w     w0
    1a68:	03 00 32    	bra       Z, 0x1a70 <.L65>
    1a6a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1a6c:	1c 00 32    	bra       Z, 0x1aa6 <.L66>
    1a6e:	86 00 37    	bra       0x1b7c <.L130>

00001a70 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    1a70:	80 84 20    	mov.w     #0x848, w0
    1a72:	20 40 90    	mov.b     [w0+2], w0
    1a74:	00 80 fb    	ze        w0, w0
    1a76:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1a78:	12 00 3a    	bra       NZ, 0x1a9e <.L131>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    1a7a:	80 84 20    	mov.w     #0x848, w0
    1a7c:	10 40 90    	mov.b     [w0+1], w0
    1a7e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a80:	04 00 3a    	bra       NZ, 0x1a8a <.L69>
                                USB_device_status &= 0xFE;
    1a82:	52 c8 bf    	mov.b     0x852, WREG
    1a84:	00 04 a1    	bclr.b    w0, #0x0
    1a86:	52 e8 b7    	mov.b     WREG, 0x852
    1a88:	03 00 37    	bra       0x1a90 <.L70>

00001a8a <.L69>:
                            else
                                USB_device_status |= 0x01;
    1a8a:	52 c8 bf    	mov.b     0x852, WREG
    1a8c:	00 04 a0    	bset.b    w0, #0x0
    1a8e:	52 e8 b7    	mov.b     WREG, 0x852

00001a90 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    1a90:	40 c0 20    	mov.w     #0xc04, w0
    1a92:	80 40 eb    	clr.b     w1
    1a94:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    1a96:	50 c0 20    	mov.w     #0xc05, w0
    1a98:	81 cc b3    	mov.b     #0xc8, w1
    1a9a:	01 48 78    	mov.b     w1, [w0]
                            break;
    1a9c:	03 00 37    	bra       0x1aa4 <.L71>

00001a9e <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    1a9e:	50 c8 bf    	mov.b     0x850, WREG
    1aa0:	00 04 a0    	bset.b    w0, #0x0
    1aa2:	50 e8 b7    	mov.b     WREG, 0x850

00001aa4 <.L71>:
                    }
                    break;
    1aa4:	6f 00 37    	bra       0x1b84 <.L72>

00001aa6 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1aa6:	54 c8 bf    	mov.b     0x854, WREG
    1aa8:	00 80 fb    	ze        w0, w0
    1aaa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1aac:	03 00 32    	bra       Z, 0x1ab4 <.L74>
    1aae:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ab0:	12 00 32    	bra       Z, 0x1ad6 <.L75>
    1ab2:	60 00 37    	bra       0x1b74 <.L132>

00001ab4 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    1ab4:	80 84 20    	mov.w     #0x848, w0
    1ab6:	40 40 90    	mov.b     [w0+4], w0
    1ab8:	00 80 fb    	ze        w0, w0
    1aba:	6f 00 60    	and.w     w0, #0xf, w0
    1abc:	00 00 e0    	cp0.w     w0
    1abe:	07 00 3a    	bra       NZ, 0x1ace <.L76>
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    1ac0:	40 c0 20    	mov.w     #0xc04, w0
    1ac2:	80 40 eb    	clr.b     w1
    1ac4:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1ac6:	50 c0 20    	mov.w     #0xc05, w0
    1ac8:	81 cc b3    	mov.b     #0xc8, w1
    1aca:	01 48 78    	mov.b     w1, [w0]
    1acc:	03 00 37    	bra       0x1ad4 <.L77>

00001ace <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1ace:	50 c8 bf    	mov.b     0x850, WREG
    1ad0:	00 04 a0    	bset.b    w0, #0x0
    1ad2:	50 e8 b7    	mov.b     WREG, 0x850

00001ad4 <.L77>:
                            }
                            break;
    1ad4:	52 00 37    	bra       0x1b7a <.L78>

00001ad6 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    1ad6:	a0 4a 20    	mov.w     #0x4aa, w0
    1ad8:	10 07 98    	mov.w     w0, [w14+2]
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    1ada:	80 84 20    	mov.w     #0x848, w0
    1adc:	40 40 90    	mov.b     [w0+4], w0
    1ade:	6f 4f 60    	and.b     w0, #0xf, [w14]
    1ae0:	1e 40 78    	mov.b     [w14], w0
    1ae2:	00 04 e0    	cp0.b     w0
    1ae4:	3b 00 32    	bra       Z, 0x1b5c <.L79>
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    1ae6:	1e 80 fb    	ze        [w14], w0
    1ae8:	00 00 40    	add.w     w0, w0, w0
    1aea:	80 00 78    	mov.w     w0, w1
    1aec:	80 84 20    	mov.w     #0x848, w0
    1aee:	40 40 90    	mov.b     [w0+4], w0
    1af0:	00 00 fb    	se        w0, w0
    1af2:	4f 00 de    	lsr.w     w0, #0xf, w0
    1af4:	01 00 70    	ior.w     w0, w1, w0
    1af6:	c2 00 dd    	sl.w      w0, #0x2, w1
    1af8:	00 c0 20    	mov.w     #0xc00, w0
    1afa:	00 80 40    	add.w     w1, w0, w0
    1afc:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    1afe:	80 84 20    	mov.w     #0x848, w0
    1b00:	40 40 90    	mov.b     [w0+4], w0
    1b02:	00 04 e0    	cp0.b     w0
    1b04:	16 00 3d    	bra       GE, 0x1b32 <.L80>
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    1b06:	1e 80 fb    	ze        [w14], w0
    1b08:	00 00 40    	add.w     w0, w0, w0
    1b0a:	9e 00 90    	mov.w     [w14+2], w1
    1b0c:	00 80 40    	add.w     w1, w0, w0
    1b0e:	10 00 78    	mov.w     [w0], w0
    1b10:	64 00 60    	and.w     w0, #0x4, w0
    1b12:	00 00 e0    	cp0.w     w0
    1b14:	0a 00 32    	bra       Z, 0x1b2a <.L81>
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    1b16:	80 84 20    	mov.w     #0x848, w0
    1b18:	10 40 90    	mov.b     [w0+1], w0
    1b1a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1b1c:	02 00 3a    	bra       NZ, 0x1b22 <.L82>
    1b1e:	00 40 eb    	clr.b     w0
    1b20:	01 00 37    	bra       0x1b24 <.L83>

00001b22 <.L82>:
    1b22:	40 c8 b3    	mov.b     #0x84, w0

00001b24 <.L83>:
    1b24:	ae 00 90    	mov.w     [w14+4], w1
    1b26:	90 40 98    	mov.b     w0, [w1+1]
    1b28:	19 00 37    	bra       0x1b5c <.L79>

00001b2a <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    1b2a:	50 c8 bf    	mov.b     0x850, WREG
    1b2c:	00 04 a0    	bset.b    w0, #0x0
    1b2e:	50 e8 b7    	mov.b     WREG, 0x850
    1b30:	15 00 37    	bra       0x1b5c <.L79>

00001b32 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    1b32:	1e 80 fb    	ze        [w14], w0
    1b34:	00 00 40    	add.w     w0, w0, w0
    1b36:	9e 00 90    	mov.w     [w14+2], w1
    1b38:	00 80 40    	add.w     w1, w0, w0
    1b3a:	10 00 78    	mov.w     [w0], w0
    1b3c:	68 00 60    	and.w     w0, #0x8, w0
    1b3e:	00 00 e0    	cp0.w     w0
    1b40:	0a 00 32    	bra       Z, 0x1b56 <.L84>
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    1b42:	80 84 20    	mov.w     #0x848, w0
    1b44:	10 40 90    	mov.b     [w0+1], w0
    1b46:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1b48:	02 00 3a    	bra       NZ, 0x1b4e <.L85>
    1b4a:	80 c8 b3    	mov.b     #0x88, w0
    1b4c:	01 00 37    	bra       0x1b50 <.L86>

00001b4e <.L85>:
    1b4e:	40 c8 b3    	mov.b     #0x84, w0

00001b50 <.L86>:
    1b50:	ae 00 90    	mov.w     [w14+4], w1
    1b52:	90 40 98    	mov.b     w0, [w1+1]
    1b54:	03 00 37    	bra       0x1b5c <.L79>

00001b56 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    1b56:	50 c8 bf    	mov.b     0x850, WREG
    1b58:	00 04 a0    	bset.b    w0, #0x0
    1b5a:	50 e8 b7    	mov.b     WREG, 0x850

00001b5c <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    1b5c:	50 c8 bf    	mov.b     0x850, WREG
    1b5e:	00 80 fb    	ze        w0, w0
    1b60:	61 00 60    	and.w     w0, #0x1, w0
    1b62:	00 00 e0    	cp0.w     w0
    1b64:	06 00 3a    	bra       NZ, 0x1b72 <.L87>
                                BD[EP0IN].bytecount = 0x00;
    1b66:	40 c0 20    	mov.w     #0xc04, w0
    1b68:	80 40 eb    	clr.b     w1
    1b6a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    1b6c:	50 c0 20    	mov.w     #0xc05, w0
    1b6e:	81 cc b3    	mov.b     #0xc8, w1
    1b70:	01 48 78    	mov.b     w1, [w0]

00001b72 <.L87>:
                            }
                            break;
    1b72:	03 00 37    	bra       0x1b7a <.L78>

00001b74 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    1b74:	50 c8 bf    	mov.b     0x850, WREG
    1b76:	00 04 a0    	bset.b    w0, #0x0
    1b78:	50 e8 b7    	mov.b     WREG, 0x850

00001b7a <.L78>:
                    }
                    break;
    1b7a:	04 00 37    	bra       0x1b84 <.L72>

00001b7c <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    1b7c:	50 c8 bf    	mov.b     0x850, WREG
    1b7e:	00 04 a0    	bset.b    w0, #0x0
    1b80:	50 e8 b7    	mov.b     WREG, 0x850
            }
            break;
    1b82:	10 01 37    	bra       0x1da4 <.L29>

00001b84 <.L72>:
    1b84:	0f 01 37    	bra       0x1da4 <.L29>

00001b86 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    1b86:	80 84 20    	mov.w     #0x848, w0
    1b88:	20 40 90    	mov.b     [w0+2], w0
    1b8a:	00 04 e0    	cp0.b     w0
    1b8c:	04 00 3d    	bra       GE, 0x1b96 <.L88>
                USB_error_flags |= 0x01;            // set Request Error Flag
    1b8e:	50 c8 bf    	mov.b     0x850, WREG
    1b90:	00 04 a0    	bset.b    w0, #0x0
    1b92:	50 e8 b7    	mov.b     WREG, 0x850
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    1b94:	07 01 37    	bra       0x1da4 <.L29>

00001b96 <.L88>:
    1b96:	80 84 20    	mov.w     #0x848, w0
    1b98:	90 40 78    	mov.b     [w0], w1
    1b9a:	40 b3 20    	mov.w     #0xb34, w0
    1b9c:	01 48 78    	mov.b     w1, [w0]
    1b9e:	80 84 20    	mov.w     #0x848, w0
    1ba0:	90 40 90    	mov.b     [w0+1], w1
    1ba2:	50 b3 20    	mov.w     #0xb35, w0
    1ba4:	01 48 78    	mov.b     w1, [w0]
    1ba6:	80 84 20    	mov.w     #0x848, w0
    1ba8:	10 00 90    	mov.w     [w0+2], w0
    1baa:	b0 59 88    	mov.w     w0, 0xb36
    1bac:	80 84 20    	mov.w     #0x848, w0
    1bae:	20 00 90    	mov.w     [w0+4], w0
    1bb0:	c0 59 88    	mov.w     w0, 0xb38
    1bb2:	80 84 20    	mov.w     #0x848, w0
    1bb4:	30 00 90    	mov.w     [w0+6], w0
    1bb6:	d0 59 88    	mov.w     w0, 0xb3a
    1bb8:	40 c0 20    	mov.w     #0xc04, w0
    1bba:	80 40 eb    	clr.b     w1
    1bbc:	01 48 78    	mov.b     w1, [w0]
    1bbe:	50 c0 20    	mov.w     #0xc05, w0
    1bc0:	81 cc b3    	mov.b     #0xc8, w1
    1bc2:	01 48 78    	mov.b     w1, [w0]
    1bc4:	ef 00 37    	bra       0x1da4 <.L29>

00001bc6 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    1bc6:	80 84 20    	mov.w     #0x848, w0
    1bc8:	90 40 78    	mov.b     [w0], w1
    1bca:	40 b3 20    	mov.w     #0xb34, w0
    1bcc:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    1bce:	80 84 20    	mov.w     #0x848, w0
    1bd0:	90 40 90    	mov.b     [w0+1], w1
    1bd2:	50 b3 20    	mov.w     #0xb35, w0
    1bd4:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    1bd6:	80 84 20    	mov.w     #0x848, w0
    1bd8:	10 00 90    	mov.w     [w0+2], w0
    1bda:	b0 59 88    	mov.w     w0, 0xb36
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    1bdc:	80 84 20    	mov.w     #0x848, w0
    1bde:	20 00 90    	mov.w     [w0+4], w0
    1be0:	c0 59 88    	mov.w     w0, 0xb38
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    1be2:	80 84 20    	mov.w     #0x848, w0
    1be4:	30 00 90    	mov.w     [w0+6], w0
    1be6:	d0 59 88    	mov.w     w0, 0xb3a
            switch (USB_setup.wValue.b[1]) {
    1be8:	80 84 20    	mov.w     #0x848, w0
    1bea:	30 40 90    	mov.b     [w0+3], w0
    1bec:	00 80 fb    	ze        w0, w0
    1bee:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1bf0:	14 00 32    	bra       Z, 0x1c1a <.L92>
    1bf2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1bf4:	36 00 32    	bra       Z, 0x1c62 <.L93>
    1bf6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1bf8:	5c 00 3a    	bra       NZ, 0x1cb2 <.L133>
                case DEVICE:
                    USB_request.data_ptr = Device;
    1bfa:	e0 5d 29    	mov.w     #0x95de, w0
    1bfc:	e0 59 88    	mov.w     w0, 0xb3c
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    1bfe:	e0 59 80    	mov.w     0xb3c, w0
    1c00:	10 40 78    	mov.b     [w0], w0
    1c02:	00 80 fb    	ze        w0, w0
    1c04:	f0 59 88    	mov.w     w0, 0xb3e
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1c06:	80 84 20    	mov.w     #0x848, w0
    1c08:	b0 00 90    	mov.w     [w0+6], w1
    1c0a:	f0 59 80    	mov.w     0xb3e, w0
    1c0c:	80 8f 50    	sub.w     w1, w0, [w15]
    1c0e:	03 00 31    	bra       C, 0x1c16 <.L94>
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    1c10:	80 84 20    	mov.w     #0x848, w0
    1c12:	30 00 90    	mov.w     [w0+6], w0
    1c14:	f0 59 88    	mov.w     w0, 0xb3e

00001c16 <.L94>:
                    }
                    SendDataPacket();
    1c16:	22 01 07    	rcall     0x1e5c <_SendDataPacket> <L0> <.LFB6> <.LFE5>
                    break;
    1c18:	50 00 37    	bra       0x1cba <.L95>

00001c1a <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    1c1a:	80 84 20    	mov.w     #0x848, w0
    1c1c:	20 40 90    	mov.b     [w0+2], w0
    1c1e:	00 80 fb    	ze        w0, w0
    1c20:	00 00 e0    	cp0.w     w0
    1c22:	03 00 3a    	bra       NZ, 0x1c2a <.L134>
                        case 0:
                            USB_request.data_ptr = Configuration1;
    1c24:	00 5f 29    	mov.w     #0x95f0, w0
    1c26:	e0 59 88    	mov.w     w0, 0xb3c
                            break;
    1c28:	03 00 37    	bra       0x1c30 <.L98>

00001c2a <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    1c2a:	50 c8 bf    	mov.b     0x850, WREG
    1c2c:	00 04 a0    	bset.b    w0, #0x0
    1c2e:	50 e8 b7    	mov.b     WREG, 0x850

00001c30 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    1c30:	50 c8 bf    	mov.b     0x850, WREG
    1c32:	00 80 fb    	ze        w0, w0
    1c34:	61 00 60    	and.w     w0, #0x1, w0
    1c36:	00 00 e0    	cp0.w     w0
    1c38:	13 00 3a    	bra       NZ, 0x1c60 <.L99>
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    1c3a:	e0 59 80    	mov.w     0xb3c, w0
    1c3c:	00 80 e8    	inc2.w    w0, w0
    1c3e:	90 40 78    	mov.b     [w0], w1
    1c40:	e0 b3 20    	mov.w     #0xb3e, w0
    1c42:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    1c44:	e0 59 80    	mov.w     0xb3c, w0
    1c46:	63 00 40    	add.w     w0, #0x3, w0
    1c48:	90 40 78    	mov.b     [w0], w1
    1c4a:	f0 b3 20    	mov.w     #0xb3f, w0
    1c4c:	01 48 78    	mov.b     w1, [w0]
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1c4e:	80 84 20    	mov.w     #0x848, w0
    1c50:	b0 00 90    	mov.w     [w0+6], w1
    1c52:	f0 59 80    	mov.w     0xb3e, w0
    1c54:	80 8f 50    	sub.w     w1, w0, [w15]
    1c56:	03 00 31    	bra       C, 0x1c5e <.L100>
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    1c58:	80 84 20    	mov.w     #0x848, w0
    1c5a:	30 00 90    	mov.w     [w0+6], w0
    1c5c:	f0 59 88    	mov.w     w0, 0xb3e

00001c5e <.L100>:
                        }
                        SendDataPacket();
    1c5e:	fe 00 07    	rcall     0x1e5c <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001c60 <.L99>:
                    }
                    break;
    1c60:	2c 00 37    	bra       0x1cba <.L95>

00001c62 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    1c62:	80 84 20    	mov.w     #0x848, w0
    1c64:	20 40 90    	mov.b     [w0+2], w0
    1c66:	00 80 fb    	ze        w0, w0
    1c68:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1c6a:	07 00 32    	bra       Z, 0x1c7a <.L103>
    1c6c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1c6e:	08 00 32    	bra       Z, 0x1c80 <.L104>
    1c70:	00 00 e0    	cp0.w     w0
    1c72:	09 00 3a    	bra       NZ, 0x1c86 <.L135>
                        case 0:
                            USB_request.data_ptr = String0;
    1c74:	20 60 29    	mov.w     #0x9602, w0
    1c76:	e0 59 88    	mov.w     w0, 0xb3c
                            break;
    1c78:	09 00 37    	bra       0x1c8c <.L105>

00001c7a <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    1c7a:	60 60 29    	mov.w     #0x9606, w0
    1c7c:	e0 59 88    	mov.w     w0, 0xb3c
                            break;
    1c7e:	06 00 37    	bra       0x1c8c <.L105>

00001c80 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    1c80:	00 62 29    	mov.w     #0x9620, w0
    1c82:	e0 59 88    	mov.w     w0, 0xb3c
                            break;
    1c84:	03 00 37    	bra       0x1c8c <.L105>

00001c86 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    1c86:	50 c8 bf    	mov.b     0x850, WREG
    1c88:	00 04 a0    	bset.b    w0, #0x0
    1c8a:	50 e8 b7    	mov.b     WREG, 0x850

00001c8c <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    1c8c:	50 c8 bf    	mov.b     0x850, WREG
    1c8e:	00 80 fb    	ze        w0, w0
    1c90:	61 00 60    	and.w     w0, #0x1, w0
    1c92:	00 00 e0    	cp0.w     w0
    1c94:	0d 00 3a    	bra       NZ, 0x1cb0 <.L106>
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    1c96:	e0 59 80    	mov.w     0xb3c, w0
    1c98:	10 40 78    	mov.b     [w0], w0
    1c9a:	00 80 fb    	ze        w0, w0
    1c9c:	f0 59 88    	mov.w     w0, 0xb3e
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1c9e:	80 84 20    	mov.w     #0x848, w0
    1ca0:	b0 00 90    	mov.w     [w0+6], w1
    1ca2:	f0 59 80    	mov.w     0xb3e, w0
    1ca4:	80 8f 50    	sub.w     w1, w0, [w15]
    1ca6:	03 00 31    	bra       C, 0x1cae <.L107>
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    1ca8:	80 84 20    	mov.w     #0x848, w0
    1caa:	30 00 90    	mov.w     [w0+6], w0
    1cac:	f0 59 88    	mov.w     w0, 0xb3e

00001cae <.L107>:
                        }
                        SendDataPacket();
    1cae:	d6 00 07    	rcall     0x1e5c <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001cb0 <.L106>:
                    }
                    break;
    1cb0:	04 00 37    	bra       0x1cba <.L95>

00001cb2 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    1cb2:	50 c8 bf    	mov.b     0x850, WREG
    1cb4:	00 04 a0    	bset.b    w0, #0x0
    1cb6:	50 e8 b7    	mov.b     WREG, 0x850
            }
            break;
    1cb8:	75 00 37    	bra       0x1da4 <.L29>

00001cba <.L95>:
    1cba:	74 00 37    	bra       0x1da4 <.L29>

00001cbc <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    1cbc:	30 60 80    	mov.w     0xc06, w0
    1cbe:	11 85 20    	mov.w     #0x851, w1
    1cc0:	91 40 78    	mov.b     [w1], w1
    1cc2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 0x01;
    1cc4:	40 c0 20    	mov.w     #0xc04, w0
    1cc6:	11 c0 b3    	mov.b     #0x1, w1
    1cc8:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    1cca:	50 c0 20    	mov.w     #0xc05, w0
    1ccc:	81 cc b3    	mov.b     #0xc8, w1
    1cce:	01 48 78    	mov.b     w1, [w0]
            break;
    1cd0:	69 00 37    	bra       0x1da4 <.L29>

00001cd2 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    1cd2:	80 84 20    	mov.w     #0x848, w0
    1cd4:	20 40 90    	mov.b     [w0+2], w0
    1cd6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1cd8:	22 00 3e    	bra       GTU, 0x1d1e <.L108>
                U1EP = (unsigned int *)&U1EP0;
    1cda:	a0 4a 20    	mov.w     #0x4aa, w0
    1cdc:	10 07 98    	mov.w     w0, [w14+2]
                for (n = 1; n<16; n++)
    1cde:	10 c0 b3    	mov.b     #0x1, w0
    1ce0:	00 4f 78    	mov.b     w0, [w14]
    1ce2:	07 00 37    	bra       0x1cf2 <.L109>

00001ce4 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    1ce4:	1e 80 fb    	ze        [w14], w0
    1ce6:	00 00 40    	add.w     w0, w0, w0
    1ce8:	9e 00 90    	mov.w     [w14+2], w1
    1cea:	00 80 40    	add.w     w1, w0, w0
    1cec:	80 00 eb    	clr.w     w1
    1cee:	01 08 78    	mov.w     w1, [w0]
    1cf0:	1e 4f e8    	inc.b     [w14], [w14]

00001cf2 <.L109>:
    1cf2:	1e 40 78    	mov.b     [w14], w0
    1cf4:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1cf6:	f6 ff 36    	bra       LEU, 0x1ce4 <.L110>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1cf8:	80 84 20    	mov.w     #0x848, w0
    1cfa:	20 40 90    	mov.b     [w0+2], w0
    1cfc:	51 e8 b7    	mov.b     WREG, 0x851
    1cfe:	51 c8 bf    	mov.b     0x851, WREG
    1d00:	00 80 fb    	ze        w0, w0
    1d02:	00 00 e0    	cp0.w     w0
    1d04:	03 00 3a    	bra       NZ, 0x1d0c <.L136>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1d06:	20 c0 b3    	mov.b     #0x2, w0
    1d08:	54 e8 b7    	mov.b     WREG, 0x854
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    1d0a:	02 00 37    	bra       0x1d10 <.L113>

00001d0c <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1d0c:	30 c0 b3    	mov.b     #0x3, w0
    1d0e:	54 e8 b7    	mov.b     WREG, 0x854

00001d10 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    1d10:	40 c0 20    	mov.w     #0xc04, w0
    1d12:	80 40 eb    	clr.b     w1
    1d14:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    1d16:	50 c0 20    	mov.w     #0xc05, w0
    1d18:	81 cc b3    	mov.b     #0xc8, w1
    1d1a:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    1d1c:	43 00 37    	bra       0x1da4 <.L29>

00001d1e <.L108>:
    1d1e:	50 c8 bf    	mov.b     0x850, WREG
    1d20:	00 04 a0    	bset.b    w0, #0x0
    1d22:	50 e8 b7    	mov.b     WREG, 0x850
    1d24:	3f 00 37    	bra       0x1da4 <.L29>

00001d26 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1d26:	54 c8 bf    	mov.b     0x854, WREG
    1d28:	00 80 fb    	ze        w0, w0
    1d2a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1d2c:	13 00 3a    	bra       NZ, 0x1d54 <.L137>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1d2e:	80 84 20    	mov.w     #0x848, w0
    1d30:	40 40 90    	mov.b     [w0+4], w0
    1d32:	00 04 e0    	cp0.b     w0
    1d34:	0a 00 3a    	bra       NZ, 0x1d4a <.L117>
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    1d36:	30 60 80    	mov.w     0xc06, w0
    1d38:	80 40 eb    	clr.b     w1
    1d3a:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 0x01;
    1d3c:	40 c0 20    	mov.w     #0xc04, w0
    1d3e:	11 c0 b3    	mov.b     #0x1, w1
    1d40:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    1d42:	50 c0 20    	mov.w     #0xc05, w0
    1d44:	81 cc b3    	mov.b     #0xc8, w1
    1d46:	01 48 78    	mov.b     w1, [w0]
    1d48:	03 00 37    	bra       0x1d50 <.L118>

00001d4a <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    1d4a:	50 c8 bf    	mov.b     0x850, WREG
    1d4c:	00 04 a0    	bset.b    w0, #0x0
    1d4e:	50 e8 b7    	mov.b     WREG, 0x850

00001d50 <.L118>:
                    }
                    break;
    1d50:	00 00 00    	nop       
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    1d52:	28 00 37    	bra       0x1da4 <.L29>

00001d54 <.L137>:
    1d54:	50 c8 bf    	mov.b     0x850, WREG
    1d56:	00 04 a0    	bset.b    w0, #0x0
    1d58:	50 e8 b7    	mov.b     WREG, 0x850
    1d5a:	24 00 37    	bra       0x1da4 <.L29>

00001d5c <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1d5c:	54 c8 bf    	mov.b     0x854, WREG
    1d5e:	00 80 fb    	ze        w0, w0
    1d60:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1d62:	19 00 3a    	bra       NZ, 0x1d96 <.L138>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1d64:	80 84 20    	mov.w     #0x848, w0
    1d66:	40 40 90    	mov.b     [w0+4], w0
    1d68:	00 04 e0    	cp0.b     w0
    1d6a:	10 00 3a    	bra       NZ, 0x1d8c <.L122>
                        switch (USB_setup.wValue.b[0]) {
    1d6c:	80 84 20    	mov.w     #0x848, w0
    1d6e:	20 40 90    	mov.b     [w0+2], w0
    1d70:	00 80 fb    	ze        w0, w0
    1d72:	00 00 e0    	cp0.w     w0
    1d74:	07 00 3a    	bra       NZ, 0x1d84 <.L139>
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    1d76:	40 c0 20    	mov.w     #0xc04, w0
    1d78:	80 40 eb    	clr.b     w1
    1d7a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    1d7c:	50 c0 20    	mov.w     #0xc05, w0
    1d7e:	81 cc b3    	mov.b     #0xc8, w1
    1d80:	01 48 78    	mov.b     w1, [w0]
                                break;
    1d82:	07 00 37    	bra       0x1d92 <.L126>

00001d84 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1d84:	50 c8 bf    	mov.b     0x850, WREG
    1d86:	00 04 a0    	bset.b    w0, #0x0
    1d88:	50 e8 b7    	mov.b     WREG, 0x850
    1d8a:	03 00 37    	bra       0x1d92 <.L126>

00001d8c <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    1d8c:	50 c8 bf    	mov.b     0x850, WREG
    1d8e:	00 04 a0    	bset.b    w0, #0x0
    1d90:	50 e8 b7    	mov.b     WREG, 0x850

00001d92 <.L126>:
                    }
                    break;
    1d92:	00 00 00    	nop       
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    1d94:	07 00 37    	bra       0x1da4 <.L29>

00001d96 <.L138>:
    1d96:	50 c8 bf    	mov.b     0x850, WREG
    1d98:	00 04 a0    	bset.b    w0, #0x0
    1d9a:	50 e8 b7    	mov.b     WREG, 0x850
    1d9c:	03 00 37    	bra       0x1da4 <.L29>

00001d9e <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    1d9e:	50 c8 bf    	mov.b     0x850, WREG
    1da0:	00 04 a0    	bset.b    w0, #0x0
    1da2:	50 e8 b7    	mov.b     WREG, 0x850

00001da4 <.L29>:
    }
}
    1da4:	00 80 fa    	ulnk      
    1da6:	00 00 06    	return    

00001da8 <_ProcessInToken>:

void ProcessInToken(void) {
    1da8:	00 00 fa    	lnk       #0x0
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    1daa:	53 c8 bf    	mov.b     0x853, WREG
    1dac:	80 80 fb    	ze        w0, w1
    1dae:	00 0f 20    	mov.w     #0xf0, w0
    1db0:	00 80 60    	and.w     w1, w0, w0
    1db2:	00 00 e0    	cp0.w     w0
    1db4:	2b 00 3a    	bra       NZ, 0x1e0c <.L140>
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    1db6:	40 b3 20    	mov.w     #0xb34, w0
    1db8:	10 40 78    	mov.b     [w0], w0
    1dba:	80 80 fb    	ze        w0, w1
    1dbc:	00 06 20    	mov.w     #0x60, w0
    1dbe:	00 80 60    	and.w     w1, w0, w0
    1dc0:	01 02 20    	mov.w     #0x20, w1
    1dc2:	81 0f 50    	sub.w     w0, w1, [w15]
    1dc4:	1f 00 32    	bra       Z, 0x1e04 <.L154>
    1dc6:	01 04 20    	mov.w     #0x40, w1
    1dc8:	81 0f 50    	sub.w     w0, w1, [w15]
    1dca:	1a 00 32    	bra       Z, 0x1e00 <.L146>
    1dcc:	00 00 e0    	cp0.w     w0
    1dce:	1d 00 3a    	bra       NZ, 0x1e0a <.L155>
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    1dd0:	50 b3 20    	mov.w     #0xb35, w0
    1dd2:	10 40 78    	mov.b     [w0], w0
    1dd4:	00 80 fb    	ze        w0, w0
    1dd6:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1dd8:	03 00 32    	bra       Z, 0x1de0 <.L148>
    1dda:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1ddc:	0e 00 32    	bra       Z, 0x1dfa <.L149>
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    1dde:	13 00 37    	bra       0x1e06 <.L143>

00001de0 <.L148>:
    1de0:	60 b3 20    	mov.w     #0xb36, w0
    1de2:	10 40 78    	mov.b     [w0], w0
    1de4:	00 80 fb    	ze        w0, w0
    1de6:	b0 24 88    	mov.w     w0, 0x496
    1de8:	b0 24 80    	mov.w     0x496, w0
    1dea:	00 00 e0    	cp0.w     w0
    1dec:	03 00 3a    	bra       NZ, 0x1df4 <.L153>
    1dee:	10 c0 b3    	mov.b     #0x1, w0
    1df0:	54 e8 b7    	mov.b     WREG, 0x854
    1df2:	02 00 37    	bra       0x1df8 <.L152>

00001df4 <.L153>:
    1df4:	20 c0 b3    	mov.b     #0x2, w0
    1df6:	54 e8 b7    	mov.b     WREG, 0x854

00001df8 <.L152>:
    1df8:	02 00 37    	bra       0x1dfe <.L147>

00001dfa <.L149>:
    1dfa:	30 00 07    	rcall     0x1e5c <_SendDataPacket> <L0> <.LFB6> <.LFE5>
    1dfc:	00 00 00    	nop       

00001dfe <.L147>:
    1dfe:	03 00 37    	bra       0x1e06 <.L143>

00001e00 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    1e00:	83 02 07    	rcall     0x2308 <_VendorRequestsIn> <L0> <.LFB18> <.LFE17>
                    break;
    1e02:	01 00 37    	bra       0x1e06 <.L143>

00001e04 <.L154>:
    1e04:	00 00 00    	nop       

00001e06 <.L143>:
            }
            break;
    1e06:	00 00 00    	nop       
    1e08:	01 00 37    	bra       0x1e0c <.L140>

00001e0a <.L155>:
    1e0a:	00 00 00    	nop       

00001e0c <.L140>:
    }
}
    1e0c:	00 80 fa    	ulnk      
    1e0e:	00 00 06    	return    

00001e10 <_ProcessOutToken>:

void ProcessOutToken(void) {
    1e10:	00 00 fa    	lnk       #0x0
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    1e12:	53 c8 bf    	mov.b     0x853, WREG
    1e14:	80 80 fb    	ze        w0, w1
    1e16:	00 0f 20    	mov.w     #0xf0, w0
    1e18:	00 80 60    	and.w     w1, w0, w0
    1e1a:	00 00 e0    	cp0.w     w0
    1e1c:	1d 00 3a    	bra       NZ, 0x1e58 <.L156>

00001e1e <.L0>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    1e1e:	40 b3 20    	mov.w     #0xb34, w0
    1e20:	10 40 78    	mov.b     [w0], w0
    1e22:	80 80 fb    	ze        w0, w1
    1e24:	00 06 20    	mov.w     #0x60, w0
    1e26:	00 80 60    	and.w     w1, w0, w0
    1e28:	01 02 20    	mov.w     #0x20, w1
    1e2a:	81 0f 50    	sub.w     w0, w1, [w15]
    1e2c:	05 00 32    	bra       Z, 0x1e38 <.L163>
    1e2e:	01 04 20    	mov.w     #0x40, w1
    1e30:	81 0f 50    	sub.w     w0, w1, [w15]
    1e32:	04 00 3a    	bra       NZ, 0x1e3c <.L164>

00001e34 <.L0>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    1e34:	6f 02 07    	rcall     0x2314 <_VendorRequestsOut> <L0> <.LFB19> <.LFE18>
                    break;
    1e36:	03 00 37    	bra       0x1e3e <.L159>

00001e38 <.L163>:
    1e38:	00 00 00    	nop       
    1e3a:	01 00 37    	bra       0x1e3e <.L159>

00001e3c <.L164>:
    1e3c:	00 00 00    	nop       

00001e3e <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1e3e:	00 c0 20    	mov.w     #0xc00, w0
    1e40:	01 c4 b3    	mov.b     #0x40, w1
    1e42:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = 0x88;
    1e44:	10 c0 20    	mov.w     #0xc01, w0
    1e46:	81 c8 b3    	mov.b     #0x88, w1
    1e48:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    1e4a:	40 c0 20    	mov.w     #0xc04, w0
    1e4c:	80 40 eb    	clr.b     w1
    1e4e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1e50:	50 c0 20    	mov.w     #0xc05, w0
    1e52:	81 cc b3    	mov.b     #0xc8, w1
    1e54:	01 48 78    	mov.b     w1, [w0]
            break;
    1e56:	00 00 00    	nop       

00001e58 <.L156>:
    }
}
    1e58:	00 80 fa    	ulnk      
    1e5a:	00 00 06    	return    

00001e5c <_SendDataPacket>:

void SendDataPacket(void) {
    1e5c:	02 00 fa    	lnk       #0x2
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    1e5e:	f1 59 80    	mov.w     0xb3e, w1
    1e60:	f0 03 20    	mov.w     #0x3f, w0
    1e62:	80 8f 50    	sub.w     w1, w0, [w15]
    1e64:	0b 00 3e    	bra       GTU, 0x1e7c <.L166>
        packet_length = (BYTE)USB_request.bytes_left.w;
    1e66:	f0 59 80    	mov.w     0xb3e, w0
    1e68:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1e6a:	00 00 eb    	clr.w     w0
    1e6c:	f0 59 88    	mov.w     w0, 0xb3e
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1e6e:	40 b3 20    	mov.w     #0xb34, w0
    1e70:	80 c0 eb    	setm.b    w1
    1e72:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1e74:	50 b3 20    	mov.w     #0xb35, w0
    1e76:	80 c0 eb    	setm.b    w1
    1e78:	01 48 78    	mov.b     w1, [w0]
    1e7a:	05 00 37    	bra       0x1e86 <.L167>

00001e7c <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1e7c:	00 c4 b3    	mov.b     #0x40, w0
    1e7e:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1e80:	f0 59 80    	mov.w     0xb3e, w0
    1e82:	00 04 b1    	sub.w     #0x40, w0
    1e84:	f0 59 88    	mov.w     w0, 0xb3e

00001e86 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    1e86:	00 40 eb    	clr.b     w0
    1e88:	10 47 98    	mov.b     w0, [w14+1]
    1e8a:	0c 00 37    	bra       0x1ea4 <.L168>

00001e8c <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    1e8c:	31 60 80    	mov.w     0xc06, w1
    1e8e:	1e 40 90    	mov.b     [w14+1], w0
    1e90:	00 80 fb    	ze        w0, w0
    1e92:	80 80 40    	add.w     w1, w0, w1
    1e94:	e0 59 80    	mov.w     0xb3c, w0
    1e96:	10 41 78    	mov.b     [w0], w2
    1e98:	82 48 78    	mov.b     w2, [w1]
    1e9a:	00 00 e8    	inc.w     w0, w0
    1e9c:	e0 59 88    	mov.w     w0, 0xb3c
    1e9e:	1e 40 90    	mov.b     [w14+1], w0
    1ea0:	00 40 e8    	inc.b     w0, w0
    1ea2:	10 47 98    	mov.b     w0, [w14+1]

00001ea4 <.L168>:
    1ea4:	1e 40 90    	mov.b     [w14+1], w0
    1ea6:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1ea8:	f1 ff 39    	bra       NC, 0x1e8c <.L169>
    }
    BD[EP0IN].bytecount = packet_length;
    1eaa:	40 c0 20    	mov.w     #0xc04, w0
    1eac:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1eae:	50 c0 20    	mov.w     #0xc05, w0
    1eb0:	10 40 78    	mov.b     [w0], w0
    1eb2:	00 c0 ea    	com.b     w0, w0
    1eb4:	02 c4 b3    	mov.b     #0x40, w2
    1eb6:	82 40 60    	and.b     w0, w2, w1
    1eb8:	80 c8 b3    	mov.b     #0x88, w0
    1eba:	00 c0 70    	ior.b     w1, w0, w0
    1ebc:	80 40 78    	mov.b     w0, w1
    1ebe:	50 c0 20    	mov.w     #0xc05, w0
    1ec0:	01 48 78    	mov.b     w1, [w0]
}
    1ec2:	00 80 fa    	ulnk      
    1ec4:	00 00 06    	return    

00001ec6 <_enc_read_reg>:
    1ec6:	06 00 fa    	lnk       #0x6
    1ec8:	88 9f be    	mov.d     w8, [w15++]
    1eca:	00 04 78    	mov.w     w0, w8
    1ecc:	21 07 98    	mov.w     w1, [w14+4]
    1ece:	2e 00 90    	mov.w     [w14+4], w0
    1ed0:	00 e0 a0    	bset.w    w0, #0xe
    1ed2:	00 0f 78    	mov.w     w0, [w14]
    1ed4:	9e 04 78    	mov.w     [w14], w9
    1ed6:	1e 00 78    	mov.w     [w14], w0
    1ed8:	5e 0d 07    	rcall     0x3996 <_parity> <.L0> <.LFB0> <.Ltext0>
    1eda:	00 80 fb    	ze        w0, w0
    1edc:	4f 00 dd    	sl.w      w0, #0xf, w0
    1ede:	09 00 70    	ior.w     w0, w9, w0
    1ee0:	00 0f 78    	mov.w     w0, [w14]
    1ee2:	00 42 80    	mov.w     0x840, w0
    1ee4:	84 09 07    	rcall     0x31ee <_pin_clear> <L0> <.LFB9> <.LFE8>
    1ee6:	1e 40 90    	mov.b     [w14+1], w0
    1ee8:	80 40 78    	mov.b     w0, w1
    1eea:	e0 ba 20    	mov.w     #0xbae, w0
    1eec:	51 07 07    	rcall     0x2d90 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    1eee:	1e 40 78    	mov.b     [w14], w0
    1ef0:	80 40 78    	mov.b     w0, w1
    1ef2:	e0 ba 20    	mov.w     #0xbae, w0
    1ef4:	4d 07 07    	rcall     0x2d90 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    1ef6:	00 42 80    	mov.w     0x840, w0
    1ef8:	65 09 07    	rcall     0x31c4 <_pin_set> <L0> <.LFB8> <.LFE7>
    1efa:	00 42 80    	mov.w     0x840, w0
    1efc:	78 09 07    	rcall     0x31ee <_pin_clear> <L0> <.LFB9> <.LFE8>
    1efe:	80 40 eb    	clr.b     w1
    1f00:	e0 ba 20    	mov.w     #0xbae, w0
    1f02:	46 07 07    	rcall     0x2d90 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    1f04:	30 47 98    	mov.b     w0, [w14+3]
    1f06:	80 40 eb    	clr.b     w1
    1f08:	e0 ba 20    	mov.w     #0xbae, w0
    1f0a:	42 07 07    	rcall     0x2d90 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    1f0c:	20 47 98    	mov.b     w0, [w14+2]
    1f0e:	00 42 80    	mov.w     0x840, w0
    1f10:	59 09 07    	rcall     0x31c4 <_pin_set> <L0> <.LFB8> <.LFE7>
    1f12:	9e 00 90    	mov.w     [w14+2], w1
    1f14:	01 0c 78    	mov.w     w1, [w8]
    1f16:	08 00 78    	mov.w     w8, w0
    1f18:	4f 04 be    	mov.d     [--w15], w8
    1f1a:	00 80 fa    	ulnk      
    1f1c:	00 00 06    	return    

00001f1e <_set_wall_threshold>:
    1f1e:	02 00 fa    	lnk       #0x2
    1f20:	00 0f 78    	mov.w     w0, [w14]
    1f22:	9e 00 78    	mov.w     [w14], w1
    1f24:	c1 42 88    	mov.w     w1, 0x858
    1f26:	00 80 fa    	ulnk      
    1f28:	00 00 06    	return    

00001f2a <_get_wall_threshold>:
    1f2a:	00 00 fa    	lnk       #0x0
    1f2c:	c0 42 80    	mov.w     0x858, w0
    1f2e:	00 80 fa    	ulnk      
    1f30:	00 00 06    	return    

00001f32 <_get_speed>:
    1f32:	00 00 fa    	lnk       #0x0
    1f34:	00 80 fa    	ulnk      
    1f36:	00 00 06    	return    

00001f38 <_get_encoder_val_angle>:
    1f38:	02 00 fa    	lnk       #0x2
    1f3a:	00 00 eb    	clr.w     w0
    1f3c:	f0 ff 23    	mov.w     #0x3fff, w0
    1f3e:	80 00 78    	mov.w     w0, w1
    1f40:	0e 00 78    	mov.w     w14, w0
    1f42:	c1 ff 07    	rcall     0x1ec6 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
    1f44:	1e 40 78    	mov.b     [w14], w0
    1f46:	80 80 fb    	ze        w0, w1
    1f48:	1e 40 90    	mov.b     [w14+1], w0
    1f4a:	00 80 fb    	ze        w0, w0
    1f4c:	48 00 dd    	sl.w      w0, #0x8, w0
    1f4e:	00 80 40    	add.w     w1, w0, w0
    1f50:	00 80 fa    	ulnk      
    1f52:	00 00 06    	return    

00001f54 <_get_encoder_val_mag>:
    1f54:	02 00 fa    	lnk       #0x2
    1f56:	00 00 eb    	clr.w     w0
    1f58:	e0 ff 23    	mov.w     #0x3ffe, w0
    1f5a:	80 00 78    	mov.w     w0, w1
  Outputs:  Encoder value
  see GET_ENC?
  Gets encoder value from the magnitute address
  */
  WORD angle = enc_read_reg((WORD)REG_MAG_ADDR);
    1f5c:	0e 00 78    	mov.w     w14, w0
    1f5e:	b3 ff 07    	rcall     0x1ec6 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
  return (int)angle.b[0]+(int)(angle.b[1])*256; 
    1f60:	1e 40 78    	mov.b     [w14], w0
    1f62:	80 80 fb    	ze        w0, w1
    1f64:	1e 40 90    	mov.b     [w14+1], w0
    1f66:	00 80 fb    	ze        w0, w0
    1f68:	48 00 dd    	sl.w      w0, #0x8, w0
    1f6a:	00 80 40    	add.w     w1, w0, w0
}
    1f6c:	00 80 fa    	ulnk      
    1f6e:	00 00 06    	return    

00001f70 <_encoder_to_angle>:

int encoder_to_angle(int encodervalue) {
    1f70:	04 00 fa    	lnk       #0x4
    1f72:	10 07 98    	mov.w     w0, [w14+2]

    // Takes number from encoder, outputs an angle
    int angle = (encodervalue - 16167)/(-47);  // Actual value is (x-16167)/46.59
    1f74:	9e 00 90    	mov.w     [w14+2], w1
    1f76:	90 0d 2c    	mov.w     #0xc0d9, w0
    1f78:	80 80 40    	add.w     w1, w0, w1
    1f7a:	10 fd 2f    	mov.w     #0xffd1, w0
    1f7c:	00 01 78    	mov.w     w0, w2
    1f7e:	11 00 09    	repeat    #0x11
    1f80:	82 00 d8    	div.sw    w1, w2
    1f82:	00 0f 78    	mov.w     w0, [w14]
    return angle;
    1f84:	1e 00 78    	mov.w     [w14], w0
}
    1f86:	00 80 fa    	ulnk      
    1f88:	00 00 06    	return    

00001f8a <_set_zero_point>:
//////////////////////////////Calculating Functions ////////////////////////////
int set_zero_point(){
    1f8a:	04 00 fa    	lnk       #0x4
  /* To be run during initialization - set the zero to be wherever the joystick is at startup
  */
  int zero_pt_enc, zero_pt; 
  zero_pt_enc = get_encoder_val_angle();
    1f8c:	d5 ff 07    	rcall     0x1f38 <_get_encoder_val_angle> <L0> <.LFB4> <.LFE3>
    1f8e:	00 0f 78    	mov.w     w0, [w14]
  zero_pt = encoder_to_angle(zero_pt_enc);
    1f90:	1e 00 78    	mov.w     [w14], w0
    1f92:	ee ff 07    	rcall     0x1f70 <_encoder_to_angle> <L0> <.LFB6> <.LFE5>
    1f94:	10 07 98    	mov.w     w0, [w14+2]
  return zero_pt;
    1f96:	1e 00 90    	mov.w     [w14+2], w0
}
    1f98:	00 80 fa    	ulnk      
    1f9a:	00 00 06    	return    

00001f9c <_set_pwm_duty>:


void set_pwm_duty(int duty){
    1f9c:	02 00 fa    	lnk       #0x2
    1f9e:	00 0f 78    	mov.w     w0, [w14]
  // Need to edit to take signed int for duty and no boolean.
  if (duty>0){
    1fa0:	1e 00 78    	mov.w     [w14], w0
    1fa2:	00 00 e0    	cp0.w     w0
    1fa4:	08 00 34    	bra       LE, 0x1fb6 <.L10>
    pin_write(&D[7], duty);
    1fa6:	1e 00 78    	mov.w     [w14], w0
    1fa8:	80 00 78    	mov.w     w0, w1
    1faa:	40 8f 20    	mov.w     #0x8f4, w0
    1fac:	4b 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    pin_write(&D[8], 0x0);
    1fae:	80 00 eb    	clr.w     w1
    1fb0:	a0 90 20    	mov.w     #0x90a, w0
    1fb2:	48 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    1fb4:	11 00 37    	bra       0x1fd8 <.L9>

00001fb6 <.L10>:
  }
  else if (duty<0){
    1fb6:	1e 00 78    	mov.w     [w14], w0
    1fb8:	00 00 e0    	cp0.w     w0
    1fba:	08 00 3d    	bra       GE, 0x1fcc <.L12>
    pin_write(&D[8], -1*duty);
    1fbc:	1e 00 ea    	neg.w     [w14], w0
    1fbe:	80 00 78    	mov.w     w0, w1
    1fc0:	a0 90 20    	mov.w     #0x90a, w0
    1fc2:	40 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    pin_write(&D[7], 0x0);
    1fc4:	80 00 eb    	clr.w     w1
    1fc6:	40 8f 20    	mov.w     #0x8f4, w0
    1fc8:	3d 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    1fca:	06 00 37    	bra       0x1fd8 <.L9>

00001fcc <.L12>:
  }
  else {
    pin_write(&D[8], 0x0);
    1fcc:	80 00 eb    	clr.w     w1
    1fce:	a0 90 20    	mov.w     #0x90a, w0
    1fd0:	39 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    pin_write(&D[7], 0x0);
    1fd2:	80 00 eb    	clr.w     w1
    1fd4:	40 8f 20    	mov.w     #0x8f4, w0
    1fd6:	36 09 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>

00001fd8 <.L9>:
  }
}
    1fd8:	00 80 fa    	ulnk      
    1fda:	00 00 06    	return    

00001fdc <_relative_angle>:

int relative_angle(int calc_angle, int initial_angle){
    1fdc:	08 00 fa    	lnk       #0x8
    1fde:	20 07 98    	mov.w     w0, [w14+4]
    1fe0:	31 07 98    	mov.w     w1, [w14+6]
  int actual_diff;
  int raw_diff = calc_angle-initial_angle;
    1fe2:	ae 00 90    	mov.w     [w14+4], w1
    1fe4:	3e 00 90    	mov.w     [w14+6], w0
    1fe6:	00 8f 50    	sub.w     w1, w0, [w14]
  if (abs(raw_diff)>100){
    1fe8:	1e 00 78    	mov.w     [w14], w0
    1fea:	80 00 78    	mov.w     w0, w1
    1fec:	01 f0 a7    	btsc.w    w1, #0xf
    1fee:	81 00 ea    	neg.w     w1, w1
    1ff0:	40 06 20    	mov.w     #0x64, w0
    1ff2:	80 8f 50    	sub.w     w1, w0, [w15]
    1ff4:	05 00 34    	bra       LE, 0x2000 <.L14>
    actual_diff = raw_diff - 360;
    1ff6:	81 e9 2f    	mov.w     #0xfe98, w1
    1ff8:	1e 80 40    	add.w     w1, [w14], w0
    1ffa:	10 07 98    	mov.w     w0, [w14+2]
    return actual_diff;
    1ffc:	1e 00 90    	mov.w     [w14+2], w0
    1ffe:	01 00 37    	bra       0x2002 <.L15>

00002000 <.L14>:
  }
  return raw_diff;
    2000:	1e 00 78    	mov.w     [w14], w0

00002002 <.L15>:
}
    2002:	00 80 fa    	ulnk      
    2004:	00 00 06    	return    

00002006 <_deriv_calcs>:

int deriv_calcs(s1,s2,t) {
    2006:	08 00 fa    	lnk       #0x8
    2008:	10 07 98    	mov.w     w0, [w14+2]
    200a:	21 07 98    	mov.w     w1, [w14+4]
    200c:	32 07 98    	mov.w     w2, [w14+6]
  // Takes two values and the time between them, and outputs the derivative
  // Can calculate speed (from two positions) and acceleration (from two speeds)
  int deriv = (s2 - s1)/t;
    200e:	ae 00 90    	mov.w     [w14+4], w1
    2010:	1e 00 90    	mov.w     [w14+2], w0
    2012:	80 80 50    	sub.w     w1, w0, w1
    2014:	3e 00 90    	mov.w     [w14+6], w0
    2016:	00 01 78    	mov.w     w0, w2
    2018:	11 00 09    	repeat    #0x11
    201a:	82 00 d8    	div.sw    w1, w2
    201c:	00 0f 78    	mov.w     w0, [w14]
  return deriv;
    201e:	1e 00 78    	mov.w     [w14], w0
}
    2020:	00 80 fa    	ulnk      
    2022:	00 00 06    	return    

00002024 <_calc_torque>:

float calc_torque(){
    2024:	0e 00 fa    	lnk       #0xe
    WORD vout;
    float realvout;
    float current;
    float torque;

    vout.w = pin_read(CURR_P); //reads analog pin
    2026:	10 42 80    	mov.w     0x842, w0
    2028:	1b 09 07    	rcall     0x3260 <_pin_read> <L0> <.LFB12> <.LFE11>
    202a:	60 07 98    	mov.w     w0, [w14+12]
    vout.b[1]&ANALOG_MASK; //masks last 6 digits
    vout.b[0] = vout.b[0]*256; 
    202c:	00 40 eb    	clr.b     w0
    202e:	40 4f 98    	mov.b     w0, [w14+12]
    realvout = vout.b[0]+vout.b[1]; //combines bytes into integer
    2030:	4e 48 90    	mov.b     [w14+12], w0
    2032:	80 80 fb    	ze        w0, w1
    2034:	5e 48 90    	mov.b     [w14+13], w0
    2036:	00 80 fb    	ze        w0, w0
    2038:	00 80 40    	add.w     w1, w0, w0
    203a:	cf 80 de    	asr.w     w0, #0xf, w1
    203c:	da f9 07    	rcall     0x13f2 <___floatsisf>
    203e:	00 8f be    	mov.d     w0, [w14]
    realvout = (realvout*3.3)/65535; //normalization
    2040:	32 33 23    	mov.w     #0x3333, w2
    2042:	33 05 24    	mov.w     #0x4053, w3
    2044:	1e 00 be    	mov.d     [w14], w0
    2046:	2d fa 07    	rcall     0x14a2 <___mulsf3>
    2048:	02 f0 2f    	mov.w     #0xff00, w2
    204a:	f3 77 24    	mov.w     #0x477f, w3
    204c:	50 f9 07    	rcall     0x12ee <___divsf3>
    204e:	00 8f be    	mov.d     w0, [w14]
    current = (realvout - 1.6) * 0.075;
    2050:	d2 cc 2c    	mov.w     #0xcccd, w2
    2052:	c3 fc 23    	mov.w     #0x3fcc, w3
    2054:	1e 00 be    	mov.d     [w14], w0
    2056:	ed f8 07    	rcall     0x1232 <___subsf3>
    2058:	a2 99 29    	mov.w     #0x999a, w2
    205a:	93 d9 23    	mov.w     #0x3d99, w3
    205c:	22 fa 07    	rcall     0x14a2 <___mulsf3>
    205e:	20 07 98    	mov.w     w0, [w14+4]
    2060:	31 07 98    	mov.w     w1, [w14+6]
    torque = KONSTANT * current;
    2062:	02 00 20    	mov.w     #0x0, w2
    2064:	03 08 24    	mov.w     #0x4080, w3
    2066:	2e 00 90    	mov.w     [w14+4], w0
    2068:	be 00 90    	mov.w     [w14+6], w1
    206a:	1b fa 07    	rcall     0x14a2 <___mulsf3>
    206c:	40 07 98    	mov.w     w0, [w14+8]
    206e:	51 07 98    	mov.w     w1, [w14+10]
    return torque;
    2070:	4e 00 90    	mov.w     [w14+8], w0
    2072:	de 00 90    	mov.w     [w14+10], w1
}
    2074:	00 80 fa    	ulnk      
    2076:	00 00 06    	return    

00002078 <_pwm_control>:

int pwm_control(int ideal, float real, int duty_cycle){
    2078:	0e 00 fa    	lnk       #0xe
    207a:	30 07 98    	mov.w     w0, [w14+6]
    207c:	42 07 98    	mov.w     w2, [w14+8]
    207e:	53 07 98    	mov.w     w3, [w14+10]
    2080:	61 07 98    	mov.w     w1, [w14+12]
  int diff_torque;
  int new_duty;
  int constant_p = (1/3);
    2082:	00 00 eb    	clr.w     w0
    2084:	00 0f 78    	mov.w     w0, [w14]
  diff_torque = ideal - real;
    2086:	3e 00 90    	mov.w     [w14+6], w0
    2088:	cf 80 de    	asr.w     w0, #0xf, w1
    208a:	b3 f9 07    	rcall     0x13f2 <___floatsisf>
    208c:	4e 01 90    	mov.w     [w14+8], w2
    208e:	de 01 90    	mov.w     [w14+10], w3
    2090:	d0 f8 07    	rcall     0x1232 <___subsf3>
    2092:	73 f9 07    	rcall     0x137a <___fixsfsi>
    2094:	10 07 98    	mov.w     w0, [w14+2]
  new_duty = duty_cycle + (constant_p * diff_torque);
    2096:	9e 00 78    	mov.w     [w14], w1
    2098:	1e 00 90    	mov.w     [w14+2], w0
    209a:	00 88 b9    	mul.ss    w1, w0, w0
    209c:	80 00 78    	mov.w     w0, w1
    209e:	6e 00 90    	mov.w     [w14+12], w0
    20a0:	00 80 40    	add.w     w1, w0, w0
    20a2:	20 07 98    	mov.w     w0, [w14+4]
  return new_duty;
    20a4:	2e 00 90    	mov.w     [w14+4], w0

}
    20a6:	00 80 fa    	ulnk      
    20a8:	00 00 06    	return    

000020aa <_wall_control>:

/*
Still need:
replacing vendor requests
Vout -> current math
Current -> torque math
compare torque real to torque Desiredi
increase or decrease or sustain pwm duty cycle
*/

///////////////////////Control Type Calculators/////////////////////////////////
/*
Inputs:  Speed, position
Outputs:  Desired torque

Need:
* Wall
* Spring
* damper
* Texture
*/


int wall_control(int position){
    20aa:	0e 00 fa    	lnk       #0xe
    20ac:	60 07 98    	mov.w     w0, [w14+12]
    // input current angle, ouput desired torque (PWM) 
    float torque = calc_torque(); 
    20ae:	ba ff 07    	rcall     0x2024 <_calc_torque> <L0> <.LFB11> <.LFE10>
    20b0:	00 8f be    	mov.d     w0, [w14]
    int ideal, pwm, threshold; 
    WORD duty;
    //threshold = get_wall_threshold(); // in degrees
    threshold = -1000; 
    20b2:	80 c1 2f    	mov.w     #0xfc18, w0
    20b4:	20 07 98    	mov.w     w0, [w14+4]
    duty.w = pin_read(&D[7]); 
    20b6:	40 8f 20    	mov.w     #0x8f4, w0
    20b8:	d3 08 07    	rcall     0x3260 <_pin_read> <L0> <.LFB12> <.LFE11>
    20ba:	50 07 98    	mov.w     w0, [w14+10]
    if (duty.w == 0x0){
    20bc:	5e 00 90    	mov.w     [w14+10], w0
    20be:	00 00 e0    	cp0.w     w0
    20c0:	03 00 3a    	bra       NZ, 0x20c8 <.L20>
      duty.w = pin_read(&D[8]);
    20c2:	a0 90 20    	mov.w     #0x90a, w0
    20c4:	cd 08 07    	rcall     0x3260 <_pin_read> <L0> <.LFB12> <.LFE11>
    20c6:	50 07 98    	mov.w     w0, [w14+10]

000020c8 <.L20>:
    }
    pwm = duty.b[0]+duty.b[1]*256; //combines bytes into integer
    20c8:	2e 48 90    	mov.b     [w14+10], w0
    20ca:	80 80 fb    	ze        w0, w1
    20cc:	3e 48 90    	mov.b     [w14+11], w0
    20ce:	00 80 fb    	ze        w0, w0
    20d0:	48 00 dd    	sl.w      w0, #0x8, w0
    20d2:	00 80 40    	add.w     w1, w0, w0
    20d4:	30 07 98    	mov.w     w0, [w14+6]
    if (position >= threshold){
    20d6:	ee 00 90    	mov.w     [w14+12], w1
    20d8:	2e 00 90    	mov.w     [w14+4], w0
    20da:	80 8f 50    	sub.w     w1, w0, [w15]
    20dc:	08 00 35    	bra       LT, 0x20ee <.L21>
	   ideal = 30; //set to "safe" max torque, 30/ 42.4 
    20de:	e0 01 20    	mov.w     #0x1e, w0
    20e0:	40 07 98    	mov.w     w0, [w14+8]
     pin_write(&D[8], 0x0);
    20e2:	80 00 eb    	clr.w     w1
    20e4:	a0 90 20    	mov.w     #0x90a, w0
    20e6:	ae 08 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
     pin_write(&D[7], 0x0);
    20e8:	80 00 eb    	clr.w     w1
    20ea:	40 8f 20    	mov.w     #0x8f4, w0
    20ec:	ab 08 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>

000020ee <.L21>:
    } 
    // pwm = pwm_control(ideal, torque, pwm);
    return pwm;
    20ee:	3e 00 90    	mov.w     [w14+6], w0
}
    20f0:	00 80 fa    	ulnk      
    20f2:	00 00 06    	return    

000020f4 <_spring_control>:

int spring_control(int position, int k, int setpt){
    20f4:	06 00 fa    	lnk       #0x6
    20f6:	00 0f 78    	mov.w     w0, [w14]
    20f8:	11 07 98    	mov.w     w1, [w14+2]
    20fa:	22 07 98    	mov.w     w2, [w14+4]
  /*Inputs:  angular position, spring constant. zero set point maybe?
  torque proportinal to -position
  Output:  Desired torque
  */
  return 0;
    20fc:	00 00 eb    	clr.w     w0
}
    20fe:	00 80 fa    	ulnk      
    2100:	00 00 06    	return    

00002102 <_damper_control>:
int damper_control(int speed, int k){
    2102:	04 00 fa    	lnk       #0x4
    2104:	00 0f 78    	mov.w     w0, [w14]
    2106:	11 07 98    	mov.w     w1, [w14+2]
  /* inputs:  angular speed, damping coefficient
  Torque proportional to -speed
  Output:  Desired Torque
  */
  return 0; 
    2108:	00 00 eb    	clr.w     w0
}
    210a:	00 80 fa    	ulnk      
    210c:	00 00 06    	return    

0000210e <_texture_control>:

int texture_control(int position, int speed, int bump_width){
    210e:	0e 00 fa    	lnk       #0xe
    2110:	40 07 98    	mov.w     w0, [w14+8]
    2112:	51 07 98    	mov.w     w1, [w14+10]
    2114:	62 07 98    	mov.w     w2, [w14+12]
  /*Need to figure out what we want for torque.  Right now, switching every 5 degrees
  May need to edit the direction vector
  */
  int effective_pos = position%(bump_width*2);
    2116:	6e 00 90    	mov.w     [w14+12], w0
    2118:	00 00 40    	add.w     w0, w0, w0
    211a:	ce 00 90    	mov.w     [w14+8], w1
    211c:	00 01 78    	mov.w     w0, w2
    211e:	11 00 09    	repeat    #0x11
    2120:	82 00 d8    	div.sw    w1, w2
    2122:	80 00 fd    	exch      w0, w1
    2124:	20 07 98    	mov.w     w0, [w14+4]
  float torque;
  int direction = speed/abs(speed);
    2126:	5e 00 90    	mov.w     [w14+10], w0
    2128:	00 f0 a7    	btsc.w    w0, #0xf
    212a:	00 00 ea    	neg.w     w0, w0
    212c:	de 00 90    	mov.w     [w14+10], w1
    212e:	00 01 78    	mov.w     w0, w2
    2130:	11 00 09    	repeat    #0x11
    2132:	82 00 d8    	div.sw    w1, w2
    2134:	30 07 98    	mov.w     w0, [w14+6]
  if (effective_pos %  (bump_width*2) == 0){ // if going over the edge of a bump
    2136:	6e 00 90    	mov.w     [w14+12], w0
    2138:	00 00 40    	add.w     w0, w0, w0
    213a:	ae 00 90    	mov.w     [w14+4], w1
    213c:	00 01 78    	mov.w     w0, w2
    213e:	11 00 09    	repeat    #0x11
    2140:	82 00 d8    	div.sw    w1, w2
    2142:	80 00 fd    	exch      w0, w1
    2144:	00 00 e0    	cp0.w     w0
    2146:	08 00 3a    	bra       NZ, 0x2158 <.L25>
    torque = 0.5 * direction;
    2148:	3e 00 90    	mov.w     [w14+6], w0
    214a:	cf 80 de    	asr.w     w0, #0xf, w1
    214c:	52 f9 07    	rcall     0x13f2 <___floatsisf>
    214e:	02 00 20    	mov.w     #0x0, w2
    2150:	03 f0 23    	mov.w     #0x3f00, w3
    2152:	a7 f9 07    	rcall     0x14a2 <___mulsf3>
    2154:	00 8f be    	mov.d     w0, [w14]
    2156:	23 00 37    	bra       0x219e <.L26>

00002158 <.L25>:
  }
  else if (effective_pos %  (bump_width*2) == 5){
    2158:	6e 00 90    	mov.w     [w14+12], w0
    215a:	00 00 40    	add.w     w0, w0, w0
    215c:	ae 00 90    	mov.w     [w14+4], w1
    215e:	00 01 78    	mov.w     w0, w2
    2160:	11 00 09    	repeat    #0x11
    2162:	82 00 d8    	div.sw    w1, w2
    2164:	80 00 fd    	exch      w0, w1
    2166:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2168:	08 00 3a    	bra       NZ, 0x217a <.L27>
    torque = -0.5 * direction;
    216a:	3e 00 90    	mov.w     [w14+6], w0
    216c:	cf 80 de    	asr.w     w0, #0xf, w1
    216e:	41 f9 07    	rcall     0x13f2 <___floatsisf>
    2170:	02 00 20    	mov.w     #0x0, w2
    2172:	03 f0 2b    	mov.w     #0xbf00, w3
    2174:	96 f9 07    	rcall     0x14a2 <___mulsf3>
    2176:	00 8f be    	mov.d     w0, [w14]
    2178:	12 00 37    	bra       0x219e <.L26>

0000217a <.L27>:
  }
  else if (effective_pos < bump_width){
    217a:	ae 00 90    	mov.w     [w14+4], w1
    217c:	6e 00 90    	mov.w     [w14+12], w0
    217e:	80 8f 50    	sub.w     w1, w0, [w15]
    2180:	03 00 3d    	bra       GE, 0x2188 <.L28>
    torque = 0;
    2182:	60 00 b8    	mul.uu    w0, #0x0, w0
    2184:	00 8f be    	mov.d     w0, [w14]
    2186:	0b 00 37    	bra       0x219e <.L26>

00002188 <.L28>:
  }
  else if (effective_pos > bump_width){
    2188:	ae 00 90    	mov.w     [w14+4], w1
    218a:	6e 00 90    	mov.w     [w14+12], w0
    218c:	80 8f 50    	sub.w     w1, w0, [w15]
    218e:	07 00 34    	bra       LE, 0x219e <.L26>
    torque = 0.25 * direction;
    2190:	3e 00 90    	mov.w     [w14+6], w0
    2192:	cf 80 de    	asr.w     w0, #0xf, w1
    2194:	2e f9 07    	rcall     0x13f2 <___floatsisf>
    2196:	02 00 20    	mov.w     #0x0, w2
    2198:	03 e8 23    	mov.w     #0x3e80, w3
    219a:	83 f9 07    	rcall     0x14a2 <___mulsf3>
    219c:	00 8f be    	mov.d     w0, [w14]

0000219e <.L26>:
  }
  return torque;
    219e:	1e 00 be    	mov.d     [w14], w0
    21a0:	ec f8 07    	rcall     0x137a <___fixsfsi>
    21a2:	00 00 78    	mov.w     w0, w0
}
    21a4:	00 80 fa    	ulnk      
    21a6:	00 00 06    	return    

000021a8 <_VendorRequests>:



void VendorRequests(void) {
    21a8:	0c 00 fa    	lnk       #0xc
    WORD32 address;
    WORD temp;
    WORD angle;

    switch (USB_setup.bRequest) {
    21aa:	80 84 20    	mov.w     #0x848, w0
    21ac:	10 40 90    	mov.b     [w0+1], w0
    21ae:	00 80 fb    	ze        w0, w0
    21b0:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    21b2:	57 00 32    	bra       Z, 0x2262 <.L35>
    21b4:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    21b6:	0c 00 3c    	bra       GT, 0x21d0 <.L40>
    21b8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    21ba:	1f 00 32    	bra       Z, 0x21fa <.L32>
    21bc:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    21be:	03 00 3c    	bra       GT, 0x21c6 <.L41>
    21c0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21c2:	12 00 32    	bra       Z, 0x21e8 <.L31> <.LBB2>
    21c4:	9c 00 37    	bra       0x22fe <.L30>

000021c6 <.L41>:
    21c6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    21c8:	27 00 32    	bra       Z, 0x2218 <.L33>
    21ca:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    21cc:	36 00 32    	bra       Z, 0x223a <.L34>
    21ce:	97 00 37    	bra       0x22fe <.L30>

000021d0 <.L40>:
    21d0:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    21d2:	71 00 32    	bra       Z, 0x22b6 <.L37>
    21d4:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    21d6:	03 00 3c    	bra       GT, 0x21de <.L42>
    21d8:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    21da:	59 00 32    	bra       Z, 0x228e <.L36>
    21dc:	90 00 37    	bra       0x22fe <.L30>

000021de <.L42>:
    21de:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    21e0:	74 00 32    	bra       Z, 0x22ca <.L38>
    21e2:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    21e4:	82 00 32    	bra       Z, 0x22ea <.L39>
    21e6:	8b 00 37    	bra       0x22fe <.L30>

000021e8 <.L31>:
        case TOGGLE_LED1:
            led_toggle(&led1);
    21e8:	00 80 20    	mov.w     #0x800, w0
    21ea:	2a 0b 07    	rcall     0x3840 <_led_toggle> <L0> <.LFB4> <.LFE3>
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    21ec:	40 c0 20    	mov.w     #0xc04, w0
    21ee:	80 40 eb    	clr.b     w1
    21f0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    21f2:	50 c0 20    	mov.w     #0xc05, w0
    21f4:	81 cc b3    	mov.b     #0xc8, w1
    21f6:	01 48 78    	mov.b     w1, [w0]
            break;
    21f8:	85 00 37    	bra       0x2304 <.L29> <.LBE2>

000021fa <.L32>:
        case SET_DUTY:
            pin_write(&D[7], (uint16_t)USB_setup.wValue.w);
    21fa:	80 84 20    	mov.w     #0x848, w0
    21fc:	10 00 90    	mov.w     [w0+2], w0
    21fe:	80 00 78    	mov.w     w0, w1
    2200:	40 8f 20    	mov.w     #0x8f4, w0
    2202:	20 08 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
            pin_write(&D[8], 0x0);
    2204:	80 00 eb    	clr.w     w1
    2206:	a0 90 20    	mov.w     #0x90a, w0
    2208:	1d 08 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
      // below needed to finish all vendor requests
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    220a:	40 c0 20    	mov.w     #0xc04, w0
    220c:	80 40 eb    	clr.b     w1
    220e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    2210:	50 c0 20    	mov.w     #0xc05, w0
    2212:	81 cc b3    	mov.b     #0xc8, w1
    2214:	01 48 78    	mov.b     w1, [w0]
            break;
    2216:	76 00 37    	bra       0x2304 <.L29> <.LBE2>

00002218 <.L33>:
        case GET_DUTY:
            temp.w = pin_read(&D[7]);
    2218:	40 8f 20    	mov.w     #0x8f4, w0
    221a:	22 08 07    	rcall     0x3260 <_pin_read> <L0> <.LFB12> <.LFE11>
    221c:	30 07 98    	mov.w     w0, [w14+6]
            BD[EP0IN].address[0] = temp.b[0];
    221e:	30 60 80    	mov.w     0xc06, w0
    2220:	ee 40 90    	mov.b     [w14+6], w1
    2222:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = temp.b[1];
    2224:	30 60 80    	mov.w     0xc06, w0
    2226:	00 00 e8    	inc.w     w0, w0
    2228:	fe 40 90    	mov.b     [w14+7], w1
    222a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 2
    222c:	40 c0 20    	mov.w     #0xc04, w0
    222e:	21 c0 b3    	mov.b     #0x2, w1
    2230:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    2232:	50 c0 20    	mov.w     #0xc05, w0
    2234:	81 cc b3    	mov.b     #0xc8, w1
    2236:	01 48 78    	mov.b     w1, [w0]
            break;
    2238:	65 00 37    	bra       0x2304 <.L29> <.LBE2>

0000223a <.L34>:
        case GET_ANGLE:
            angle = enc_read_reg((WORD)REG_ANG_ADDR);
    223a:	00 00 eb    	clr.w     w0
    223c:	f0 ff 23    	mov.w     #0x3fff, w0
    223e:	68 01 47    	add.w     w14, #0x8, w2
    2240:	80 00 78    	mov.w     w0, w1
    2242:	02 00 78    	mov.w     w2, w0
    2244:	40 fe 07    	rcall     0x1ec6 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
            angle.b[0]&SENSOR_MASK;
            BD[EP0IN].address[0] = angle.b[0];
    2246:	30 60 80    	mov.w     0xc06, w0
    2248:	8e 48 90    	mov.b     [w14+8], w1
    224a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = angle.b[1];
    224c:	30 60 80    	mov.w     0xc06, w0
    224e:	00 00 e8    	inc.w     w0, w0
    2250:	9e 48 90    	mov.b     [w14+9], w1
    2252:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 2
    2254:	40 c0 20    	mov.w     #0xc04, w0
    2256:	21 c0 b3    	mov.b     #0x2, w1
    2258:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    225a:	50 c0 20    	mov.w     #0xc05, w0
    225c:	81 cc b3    	mov.b     #0xc8, w1
    225e:	01 48 78    	mov.b     w1, [w0]
            break;
    2260:	51 00 37    	bra       0x2304 <.L29> <.LBE2>

00002262 <.L35>:
        case GET_MAGNITUDE:
            angle = enc_read_reg((WORD)REG_MAG_ADDR);
    2262:	00 00 eb    	clr.w     w0
    2264:	e0 ff 23    	mov.w     #0x3ffe, w0
    2266:	6a 01 47    	add.w     w14, #0xa, w2
    2268:	80 00 78    	mov.w     w0, w1
    226a:	02 00 78    	mov.w     w2, w0
    226c:	2c fe 07    	rcall     0x1ec6 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
    226e:	de 00 90    	mov.w     [w14+10], w1
    2270:	41 07 98    	mov.w     w1, [w14+8]
            BD[EP0IN].address[0] = angle.b[0];
    2272:	30 60 80    	mov.w     0xc06, w0
    2274:	8e 48 90    	mov.b     [w14+8], w1
    2276:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = angle.b[1];
    2278:	30 60 80    	mov.w     0xc06, w0
    227a:	00 00 e8    	inc.w     w0, w0
    227c:	9e 48 90    	mov.b     [w14+9], w1
    227e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 2
    2280:	40 c0 20    	mov.w     #0xc04, w0
    2282:	21 c0 b3    	mov.b     #0x2, w1
    2284:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    2286:	50 c0 20    	mov.w     #0xc05, w0
    2288:	81 cc b3    	mov.b     #0xc8, w1
    228a:	01 48 78    	mov.b     w1, [w0]
            break;
    228c:	3b 00 37    	bra       0x2304 <.L29> <.LBE2>

0000228e <.L36>:
        case GET_ENC:
            angle = enc_read_reg(USB_setup.wValue);
    228e:	6a 00 47    	add.w     w14, #0xa, w0
    2290:	81 84 20    	mov.w     #0x848, w1
    2292:	91 00 90    	mov.w     [w1+2], w1
    2294:	18 fe 07    	rcall     0x1ec6 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
    2296:	de 00 90    	mov.w     [w14+10], w1
    2298:	41 07 98    	mov.w     w1, [w14+8]
            angle.b[0]&SENSOR_MASK;
            BD[EP0IN].address[0] = angle.b[0];
    229a:	30 60 80    	mov.w     0xc06, w0
    229c:	8e 48 90    	mov.b     [w14+8], w1
    229e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = angle.b[1];
    22a0:	30 60 80    	mov.w     0xc06, w0
    22a2:	00 00 e8    	inc.w     w0, w0
    22a4:	9e 48 90    	mov.b     [w14+9], w1
    22a6:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 2
    22a8:	40 c0 20    	mov.w     #0xc04, w0
    22aa:	21 c0 b3    	mov.b     #0x2, w1
    22ac:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    22ae:	50 c0 20    	mov.w     #0xc05, w0
    22b0:	81 cc b3    	mov.b     #0xc8, w1
    22b2:	01 48 78    	mov.b     w1, [w0]
            break;
    22b4:	27 00 37    	bra       0x2304 <.L29> <.LBE2>

000022b6 <.L37>:

      /*case GET_CONTROL:
            Define what control it's going to be.
      */

        case SET_CONTROLLER: 
            control_state = (int)USB_setup.wValue.w;  //changing global variable
    22b6:	80 84 20    	mov.w     #0x848, w0
    22b8:	10 00 90    	mov.w     [w0+2], w0
    22ba:	b0 42 88    	mov.w     w0, 0x856
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    22bc:	40 c0 20    	mov.w     #0xc04, w0
    22be:	80 40 eb    	clr.b     w1
    22c0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    22c2:	50 c0 20    	mov.w     #0xc05, w0
    22c4:	81 cc b3    	mov.b     #0xc8, w1
    22c6:	01 48 78    	mov.b     w1, [w0]
            break;
    22c8:	1d 00 37    	bra       0x2304 <.L29> <.LBE2>

000022ca <.L38>:
        case WALL: 
            control_state = 1;
    22ca:	10 00 20    	mov.w     #0x1, w0
    22cc:	b0 42 88    	mov.w     w0, 0x856
            int a = get_encoder_val_angle(); 
    22ce:	34 fe 07    	rcall     0x1f38 <_get_encoder_val_angle> <L0> <.LFB4> <.LFE3>
    22d0:	00 0f 78    	mov.w     w0, [w14]
            a = encoder_to_angle(a);
    22d2:	1e 00 78    	mov.w     [w14], w0
    22d4:	4d fe 07    	rcall     0x1f70 <_encoder_to_angle> <L0> <.LFB6> <.LFE5>
    22d6:	00 0f 78    	mov.w     w0, [w14]
            wall_control(a);
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	e7 fe 07    	rcall     0x20aa <_wall_control> <L0> <.LFB13> <.LFE12>
	          //temp.w = wall_control(a); // a needs to be in two byte form
            
	          //set_pwm_duty(0x8000);
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    22dc:	40 c0 20    	mov.w     #0xc04, w0
    22de:	80 40 eb    	clr.b     w1
    22e0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    22e2:	50 c0 20    	mov.w     #0xc05, w0
    22e4:	81 cc b3    	mov.b     #0xc8, w1
    22e6:	01 48 78    	mov.b     w1, [w0]
	    break;
    22e8:	0d 00 37    	bra       0x2304 <.L29> <.LBE2>

000022ea <.L39>:
        case SET_WALL_THRESHOLD: 
            set_wall_threshold((int)USB_setup.wValue.w);
    22ea:	80 84 20    	mov.w     #0x848, w0
    22ec:	10 00 90    	mov.w     [w0+2], w0
    22ee:	17 fe 07    	rcall     0x1f1e <_set_wall_threshold> <L0> <.LFB1> <.LFE0>
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    22f0:	40 c0 20    	mov.w     #0xc04, w0
    22f2:	80 40 eb    	clr.b     w1
    22f4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    22f6:	50 c0 20    	mov.w     #0xc05, w0
    22f8:	81 cc b3    	mov.b     #0xc8, w1
    22fa:	01 48 78    	mov.b     w1, [w0]
	    break;
    22fc:	03 00 37    	bra       0x2304 <.L29> <.LBE2>

000022fe <.L30>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    22fe:	50 c8 bf    	mov.b     0x850, WREG
    2300:	00 04 a0    	bset.b    w0, #0x0
    2302:	50 e8 b7    	mov.b     WREG, 0x850

00002304 <.L29>:
    }
}
    2304:	00 80 fa    	ulnk      
    2306:	00 00 06    	return    

00002308 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    2308:	00 00 fa    	lnk       #0x0

    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    230a:	50 c8 bf    	mov.b     0x850, WREG
    230c:	00 04 a0    	bset.b    w0, #0x0
    230e:	50 e8 b7    	mov.b     WREG, 0x850
    }
}
    2310:	00 80 fa    	ulnk      
    2312:	00 00 06    	return    

00002314 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    2314:	00 00 fa    	lnk       #0x0
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    2316:	50 c8 bf    	mov.b     0x850, WREG
    2318:	00 04 a0    	bset.b    w0, #0x0
    231a:	50 e8 b7    	mov.b     WREG, 0x850
    }
}
    231c:	00 80 fa    	ulnk      
    231e:	00 00 06    	return    

00002320 <_main>:
/////////////////////////////Main Function////////////////////////////////////

int16_t main(void) {
    2320:	04 00 fa    	lnk       #0x4
    init_clock();
    2322:	00 10 20    	mov.w     #0x100, w0
    2324:	20 3a 88    	mov.w     w0, 0x744
    init_ui();
    2326:	09 0a 07    	rcall     0x373a <_init_ui> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    init_pin();
    2328:	89 05 07    	rcall     0x2e3c <_init_pin> <L0> <.LFB3> <.LFE2>
    init_oc();
    232a:	12 08 07    	rcall     0x3350 <_init_oc> <L0> <.LFB4> <.LFE3>
    init_spi();
    232c:	e3 02 07    	rcall     0x28f4 <_init_spi> <L0> <.L0> <.LFB0> <.LFE22> <.Letext0> <.Ltext0>
    init_timer();
    232e:	f8 00 07    	rcall     0x2520 <_init_timer> <L0> <.LFB6> <.LFE5>
    struct _TIMER* timer1;
    timer_start(timer1);
    2330:	1e 00 78    	mov.w     [w14], w0
    2332:	30 02 07    	rcall     0x2794 <_timer_start> <L0> <.LFB13> <.LFE12>

    ANG_MOSI = &D[0];
    2334:	a0 85 20    	mov.w     #0x85a, w0
    2336:	f0 41 88    	mov.w     w0, 0x83e
    ANG_MISO = &D[1];
    2338:	00 87 20    	mov.w     #0x870, w0
    233a:	e0 41 88    	mov.w     w0, 0x83c
    ANG_SCK = &D[2];
    233c:	60 88 20    	mov.w     #0x886, w0
    233e:	d0 41 88    	mov.w     w0, 0x83a
    ANG_NCS = &D[3];
    2340:	c0 89 20    	mov.w     #0x89c, w0
    2342:	00 42 88    	mov.w     w0, 0x840
    CURR_P = &A[0];
    2344:	e0 98 20    	mov.w     #0x98e, w0
    2346:	10 42 88    	mov.w     w0, 0x842

    pin_analogIn(CURR_P);
    2348:	10 42 80    	mov.w     0x842, w0
    234a:	14 07 07    	rcall     0x3174 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    pin_digitalOut(ANG_NCS);
    234c:	00 42 80    	mov.w     0x840, w0
    234e:	dd 06 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    pin_set(ANG_NCS);
    2350:	00 42 80    	mov.w     0x840, w0
    2352:	38 07 07    	rcall     0x31c4 <_pin_set> <L0> <.LFB8> <.LFE7>

    spi_open(&spi1, ANG_MISO, ANG_MOSI, ANG_SCK, 2e6, 1); //WHY ONE
    2354:	d2 41 80    	mov.w     0x83a, w2
    2356:	f1 41 80    	mov.w     0x83e, w1
    2358:	e0 41 80    	mov.w     0x83c, w0
    235a:	16 c0 b3    	mov.b     #0x1, w6
    235c:	04 40 22    	mov.w     #0x2400, w4
    235e:	45 9f 24    	mov.w     #0x49f4, w5
    2360:	82 01 78    	mov.w     w2, w3
    2362:	01 01 78    	mov.w     w1, w2
    2364:	80 00 78    	mov.w     w0, w1
    2366:	e0 ba 20    	mov.w     #0xbae, w0
    2368:	18 03 07    	rcall     0x299a <_spi_open> <L0> <.LFB2> <.LFE1>

    oc_pwm(&oc1, &D[7], NULL, 10e3, 0x8000);  // Pin, internal vs external timer, frequency, initial duty cycle
    236a:	03 00 28    	mov.w     #0x8000, w3
    236c:	04 00 24    	mov.w     #0x4000, w4
    236e:	c5 61 24    	mov.w     #0x461c, w5
    2370:	00 01 eb    	clr.w     w2
    2372:	41 8f 20    	mov.w     #0x8f4, w1
    2374:	20 a1 20    	mov.w     #0xa12, w0
    2376:	9b 08 07    	rcall     0x34ae <_oc_pwm> <L0> <.LFB7> <.LFE6>
    oc_pwm(&oc2, &D[8], NULL, 10e3, 0x0);
    2378:	80 01 eb    	clr.w     w3
    237a:	04 00 24    	mov.w     #0x4000, w4
    237c:	c5 61 24    	mov.w     #0x461c, w5
    237e:	00 01 eb    	clr.w     w2
    2380:	a1 90 20    	mov.w     #0x90a, w1
    2382:	40 a2 20    	mov.w     #0xa24, w0
    2384:	94 08 07    	rcall     0x34ae <_oc_pwm> <L0> <.LFB7> <.LFE6>

    InitUSB();
    2386:	6e f9 07    	rcall     0x1664 <_InitUSB> <.L0> <.LFB0> <.Ltext0>

                                  // initialize the USB registers and serial interface engine
    while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    2388:	06 00 37    	bra       0x2396 <.L47> <.LBE3>

0000238a <.L48>:
        ServiceUSB();                       // ...service USB requests
    238a:	ab f9 07    	rcall     0x16e2 <_ServiceUSB> <L0> <.LFB1> <.LFE0>
        time = timer_time(timer1);
    238c:	1e 00 78    	mov.w     [w14], w0
    238e:	e5 01 07    	rcall     0x275a <_timer_time> <L0> <.LFB12> <.LFE11>
    2390:	f4 f7 07    	rcall     0x137a <___fixsfsi>
    2392:	00 00 78    	mov.w     w0, w0
    2394:	c0 41 88    	mov.w     w0, 0x838

00002396 <.L47>:
    2396:	54 c8 bf    	mov.b     0x854, WREG
    2398:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    239a:	f7 ff 3a    	bra       NZ, 0x238a <.L48> <.LBB3>

0000239c <.L54>:
    }
    while (1) {
        ServiceUSB();                       // service any pending USB requests
    239c:	a2 f9 07    	rcall     0x16e2 <_ServiceUSB> <L0> <.LFB1> <.LFE0>
        // variable:  control state
        int old_angle = angle;
    239e:	81 41 80    	mov.w     0x830, w1
    23a0:	11 07 98    	mov.w     w1, [w14+2]
        angle = get_encoder_val_angle(); 
    23a2:	ca fd 07    	rcall     0x1f38 <_get_encoder_val_angle> <L0> <.LFB4> <.LFE3>
    23a4:	80 41 88    	mov.w     w0, 0x830
	      angle = encoder_to_angle(angle);
    23a6:	80 41 80    	mov.w     0x830, w0
    23a8:	e3 fd 07    	rcall     0x1f70 <_encoder_to_angle> <L0> <.LFB6> <.LFE5>
    23aa:	80 41 88    	mov.w     w0, 0x830
            /*set_wall_threshold(2500);
	      angle = encoder_to_angle(angle); 
        time = timer_time(timer1)-time;
        speed = deriv_calcs(old_angle, angle, time);
        /*torque calculation
        get duty calculation.
                */
          switch (control_state){
    23ac:	b0 42 80    	mov.w     0x856, w0
    23ae:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    23b0:	05 00 32    	bra       Z, 0x23bc <.L51>
    23b2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    23b4:	07 00 32    	bra       Z, 0x23c4 <.L52>
    23b6:	00 00 e0    	cp0.w     w0
    23b8:	0e 00 32    	bra       Z, 0x23d6 <.L55>
    23ba:	09 00 37    	bra       0x23ce <.L49>

000023bc <.L51>:
            case 0: //No controller
              break;
            case 1: // Wall
              duty = wall_control(angle); 
    23bc:	80 41 80    	mov.w     0x830, w0
    23be:	75 fe 07    	rcall     0x20aa <_wall_control> <L0> <.LFB13> <.LFE12>
    23c0:	90 41 88    	mov.w     w0, 0x832
              break;
    23c2:	0a 00 37    	bra       0x23d8 <.L53>

000023c4 <.L52>:
            case 2: // Texture
              duty = texture_control(angle,speed,5);
    23c4:	a1 41 80    	mov.w     0x834, w1
    23c6:	80 41 80    	mov.w     0x830, w0
    23c8:	52 00 20    	mov.w     #0x5, w2
    23ca:	a1 fe 07    	rcall     0x210e <_texture_control> <L0> <.LFB16> <.LFE15>
    23cc:	90 41 88    	mov.w     w0, 0x832

000023ce <.L49>:
            default: // No controller
	            duty = wall_control(angle); 
    23ce:	80 41 80    	mov.w     0x830, w0
    23d0:	6c fe 07    	rcall     0x20aa <_wall_control> <L0> <.LFB13> <.LFE12>
    23d2:	90 41 88    	mov.w     w0, 0x832
              break;
    23d4:	01 00 37    	bra       0x23d8 <.L53>

000023d6 <.L55>:
    23d6:	00 00 00    	nop       

000023d8 <.L53>:
          }
	  pin_write(&D[7], duty);
    23d8:	90 41 80    	mov.w     0x832, w0
    23da:	80 00 78    	mov.w     w0, w1
    23dc:	40 8f 20    	mov.w     #0x8f4, w0
    23de:	32 07 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>
    pin_write(&D[8], 0x0); 
    23e0:	80 00 eb    	clr.w     w1
    23e2:	a0 90 20    	mov.w     #0x90a, w0
    23e4:	2f 07 07    	rcall     0x3244 <_pin_write> <L0> <.LFB11> <.LFE10>

000023e6 <.LBE4>:
        // using if statement or similar: check control state, run relevant control calculator
        // Calculate the proper PWM from torque stuff
        // Set variables we need next loop:
          //Current position, current time, current PWM
    }
    23e6:	da ff 37    	bra       0x239c <.L54> <.LBB4>

000023e8 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    23e8:	02 00 fa    	lnk       #0x2
    23ea:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    23ec:	1e 00 78    	mov.w     [w14], w0
    23ee:	01 02 07    	rcall     0x27f2 <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    23f0:	1e 00 78    	mov.w     [w14], w0
    23f2:	10 08 90    	mov.w     [w0+18], w0
    23f4:	00 00 e0    	cp0.w     w0
    23f6:	05 00 32    	bra       Z, 0x2402 <.L2>
        self->every(self);
    23f8:	1e 00 78    	mov.w     [w14], w0
    23fa:	90 08 90    	mov.w     [w0+18], w1
    23fc:	1e 00 78    	mov.w     [w14], w0
    23fe:	01 00 01    	call      w1
    2400:	1a 00 37    	bra       0x2436 <.L1>

00002402 <.L2>:
    } else if (self->after) {
    2402:	1e 00 78    	mov.w     [w14], w0
    2404:	20 08 90    	mov.w     [w0+20], w0
    2406:	00 00 e0    	cp0.w     w0
    2408:	14 00 32    	bra       Z, 0x2432 <.L4>
        if (self->aftercount) {
    240a:	1e 00 78    	mov.w     [w14], w0
    240c:	00 08 90    	mov.w     [w0+16], w0
    240e:	00 00 e0    	cp0.w     w0
    2410:	0a 00 32    	bra       Z, 0x2426 <.L5>
            self->after(self);
    2412:	1e 00 78    	mov.w     [w14], w0
    2414:	a0 08 90    	mov.w     [w0+20], w1
    2416:	1e 00 78    	mov.w     [w14], w0
    2418:	01 00 01    	call      w1
            self->aftercount--;
    241a:	1e 00 78    	mov.w     [w14], w0
    241c:	00 08 90    	mov.w     [w0+16], w0
    241e:	80 00 e9    	dec.w     w0, w1
    2420:	1e 00 78    	mov.w     [w14], w0
    2422:	01 08 98    	mov.w     w1, [w0+16]
    2424:	08 00 37    	bra       0x2436 <.L1>

00002426 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2426:	1e 00 78    	mov.w     [w14], w0
    2428:	0c 02 07    	rcall     0x2842 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    242a:	1e 00 78    	mov.w     [w14], w0
    242c:	80 00 eb    	clr.w     w1
    242e:	21 08 98    	mov.w     w1, [w0+20]
    2430:	02 00 37    	bra       0x2436 <.L1>

00002432 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2432:	1e 00 78    	mov.w     [w14], w0
    2434:	06 02 07    	rcall     0x2842 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

00002436 <.L1>:
    }
}
    2436:	00 80 fa    	ulnk      
    2438:	00 00 06    	return    

0000243a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    243a:	36 00 f8    	push      0x36
    243c:	80 9f be    	mov.d     w0, [w15++]
    243e:	82 9f be    	mov.d     w2, [w15++]
    2440:	84 9f be    	mov.d     w4, [w15++]
    2442:	86 9f be    	mov.d     w6, [w15++]
    2444:	32 00 f8    	push      0x32
    2446:	34 00 f8    	push      0x34
    2448:	10 00 20    	mov.w     #0x1, w0
    244a:	a0 01 88    	mov.w     w0, 0x34
    244c:	00 20 20    	mov.w     #0x200, w0
    244e:	90 01 88    	mov.w     w0, 0x32
    2450:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    2452:	00 b4 20    	mov.w     #0xb40, w0
    2454:	c9 ff 07    	rcall     0x23e8 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE20> <.Letext0> <.Ltext0>
}
    2456:	00 80 fa    	ulnk      
    2458:	34 00 f9    	pop       0x34
    245a:	32 00 f9    	pop       0x32
    245c:	4f 03 be    	mov.d     [--w15], w6
    245e:	4f 02 be    	mov.d     [--w15], w4
    2460:	4f 01 be    	mov.d     [--w15], w2
    2462:	4f 00 be    	mov.d     [--w15], w0
    2464:	36 00 f9    	pop       0x36
    2466:	00 40 06    	retfie    

00002468 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2468:	36 00 f8    	push      0x36
    246a:	80 9f be    	mov.d     w0, [w15++]
    246c:	82 9f be    	mov.d     w2, [w15++]
    246e:	84 9f be    	mov.d     w4, [w15++]
    2470:	86 9f be    	mov.d     w6, [w15++]
    2472:	32 00 f8    	push      0x32
    2474:	34 00 f8    	push      0x34
    2476:	10 00 20    	mov.w     #0x1, w0
    2478:	a0 01 88    	mov.w     w0, 0x34
    247a:	00 20 20    	mov.w     #0x200, w0
    247c:	90 01 88    	mov.w     w0, 0x32
    247e:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    2480:	60 b5 20    	mov.w     #0xb56, w0
    2482:	b2 ff 07    	rcall     0x23e8 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE20> <.Letext0> <.Ltext0>
}
    2484:	00 80 fa    	ulnk      
    2486:	34 00 f9    	pop       0x34
    2488:	32 00 f9    	pop       0x32
    248a:	4f 03 be    	mov.d     [--w15], w6
    248c:	4f 02 be    	mov.d     [--w15], w4
    248e:	4f 01 be    	mov.d     [--w15], w2
    2490:	4f 00 be    	mov.d     [--w15], w0
    2492:	36 00 f9    	pop       0x36
    2494:	00 40 06    	retfie    

00002496 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2496:	36 00 f8    	push      0x36
    2498:	80 9f be    	mov.d     w0, [w15++]
    249a:	82 9f be    	mov.d     w2, [w15++]
    249c:	84 9f be    	mov.d     w4, [w15++]
    249e:	86 9f be    	mov.d     w6, [w15++]
    24a0:	32 00 f8    	push      0x32
    24a2:	34 00 f8    	push      0x34
    24a4:	10 00 20    	mov.w     #0x1, w0
    24a6:	a0 01 88    	mov.w     w0, 0x34
    24a8:	00 20 20    	mov.w     #0x200, w0
    24aa:	90 01 88    	mov.w     w0, 0x32
    24ac:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    24ae:	c0 b6 20    	mov.w     #0xb6c, w0
    24b0:	9b ff 07    	rcall     0x23e8 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE20> <.Letext0> <.Ltext0>
}
    24b2:	00 80 fa    	ulnk      
    24b4:	34 00 f9    	pop       0x34
    24b6:	32 00 f9    	pop       0x32
    24b8:	4f 03 be    	mov.d     [--w15], w6
    24ba:	4f 02 be    	mov.d     [--w15], w4
    24bc:	4f 01 be    	mov.d     [--w15], w2
    24be:	4f 00 be    	mov.d     [--w15], w0
    24c0:	36 00 f9    	pop       0x36
    24c2:	00 40 06    	retfie    

000024c4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    24c4:	36 00 f8    	push      0x36
    24c6:	80 9f be    	mov.d     w0, [w15++]
    24c8:	82 9f be    	mov.d     w2, [w15++]
    24ca:	84 9f be    	mov.d     w4, [w15++]
    24cc:	86 9f be    	mov.d     w6, [w15++]
    24ce:	32 00 f8    	push      0x32
    24d0:	34 00 f8    	push      0x34
    24d2:	10 00 20    	mov.w     #0x1, w0
    24d4:	a0 01 88    	mov.w     w0, 0x34
    24d6:	00 20 20    	mov.w     #0x200, w0
    24d8:	90 01 88    	mov.w     w0, 0x32
    24da:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    24dc:	20 b8 20    	mov.w     #0xb82, w0
    24de:	84 ff 07    	rcall     0x23e8 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE20> <.Letext0> <.Ltext0>
}
    24e0:	00 80 fa    	ulnk      
    24e2:	34 00 f9    	pop       0x34
    24e4:	32 00 f9    	pop       0x32
    24e6:	4f 03 be    	mov.d     [--w15], w6
    24e8:	4f 02 be    	mov.d     [--w15], w4
    24ea:	4f 01 be    	mov.d     [--w15], w2
    24ec:	4f 00 be    	mov.d     [--w15], w0
    24ee:	36 00 f9    	pop       0x36
    24f0:	00 40 06    	retfie    

000024f2 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    24f2:	36 00 f8    	push      0x36
    24f4:	80 9f be    	mov.d     w0, [w15++]
    24f6:	82 9f be    	mov.d     w2, [w15++]
    24f8:	84 9f be    	mov.d     w4, [w15++]
    24fa:	86 9f be    	mov.d     w6, [w15++]
    24fc:	32 00 f8    	push      0x32
    24fe:	34 00 f8    	push      0x34
    2500:	10 00 20    	mov.w     #0x1, w0
    2502:	a0 01 88    	mov.w     w0, 0x34
    2504:	00 20 20    	mov.w     #0x200, w0
    2506:	90 01 88    	mov.w     w0, 0x32
    2508:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    250a:	80 b9 20    	mov.w     #0xb98, w0
    250c:	6d ff 07    	rcall     0x23e8 <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE20> <.Letext0> <.Ltext0>
}
    250e:	00 80 fa    	ulnk      
    2510:	34 00 f9    	pop       0x34
    2512:	32 00 f9    	pop       0x32
    2514:	4f 03 be    	mov.d     [--w15], w6
    2516:	4f 02 be    	mov.d     [--w15], w4
    2518:	4f 01 be    	mov.d     [--w15], w2
    251a:	4f 00 be    	mov.d     [--w15], w0
    251c:	36 00 f9    	pop       0x36
    251e:	00 40 06    	retfie    

00002520 <_init_timer>:

void init_timer(void) {
    2520:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2522:	b0 00 20    	mov.w     #0xb, w0
    2524:	80 1f 78    	mov.w     w0, [w15++]
    2526:	47 00 20    	mov.w     #0x4, w7
    2528:	36 c0 b3    	mov.b     #0x3, w6
    252a:	45 09 20    	mov.w     #0x94, w5
    252c:	44 08 20    	mov.w     #0x84, w4
    252e:	03 10 20    	mov.w     #0x100, w3
    2530:	22 10 20    	mov.w     #0x102, w2
    2532:	41 10 20    	mov.w     #0x104, w1
    2534:	00 b4 20    	mov.w     #0xb40, w0
    2536:	33 00 07    	rcall     0x259e <_timer_init> <L0> <.LFB7> <.LFE6>
    2538:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    253a:	c0 00 20    	mov.w     #0xc, w0
    253c:	80 1f 78    	mov.w     w0, [w15++]
    253e:	80 03 eb    	clr.w     w7
    2540:	76 c0 b3    	mov.b     #0x7, w6
    2542:	45 09 20    	mov.w     #0x94, w5
    2544:	44 08 20    	mov.w     #0x84, w4
    2546:	63 10 20    	mov.w     #0x106, w3
    2548:	c2 10 20    	mov.w     #0x10c, w2
    254a:	01 11 20    	mov.w     #0x110, w1
    254c:	60 b5 20    	mov.w     #0xb56, w0
    254e:	27 00 07    	rcall     0x259e <_timer_init> <L0> <.LFB7> <.LFE6>
    2550:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2552:	d0 00 20    	mov.w     #0xd, w0
    2554:	80 1f 78    	mov.w     w0, [w15++]
    2556:	17 00 20    	mov.w     #0x1, w7
    2558:	86 c0 b3    	mov.b     #0x8, w6
    255a:	45 09 20    	mov.w     #0x94, w5
    255c:	44 08 20    	mov.w     #0x84, w4
    255e:	a3 10 20    	mov.w     #0x10a, w3
    2560:	e2 10 20    	mov.w     #0x10e, w2
    2562:	21 11 20    	mov.w     #0x112, w1
    2564:	c0 b6 20    	mov.w     #0xb6c, w0
    2566:	1b 00 07    	rcall     0x259e <_timer_init> <L0> <.LFB7> <.LFE6>
    2568:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    256a:	e0 00 20    	mov.w     #0xe, w0
    256c:	80 1f 78    	mov.w     w0, [w15++]
    256e:	27 00 20    	mov.w     #0x2, w7
    2570:	b6 c0 b3    	mov.b     #0xb, w6
    2572:	65 09 20    	mov.w     #0x96, w5
    2574:	64 08 20    	mov.w     #0x86, w4
    2576:	43 11 20    	mov.w     #0x114, w3
    2578:	a2 11 20    	mov.w     #0x11a, w2
    257a:	e1 11 20    	mov.w     #0x11e, w1
    257c:	20 b8 20    	mov.w     #0xb82, w0
    257e:	0f 00 07    	rcall     0x259e <_timer_init> <L0> <.LFB7> <.LFE6>
    2580:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2582:	f0 00 20    	mov.w     #0xf, w0
    2584:	80 1f 78    	mov.w     w0, [w15++]
    2586:	37 00 20    	mov.w     #0x3, w7
    2588:	c6 c0 b3    	mov.b     #0xc, w6
    258a:	65 09 20    	mov.w     #0x96, w5
    258c:	64 08 20    	mov.w     #0x86, w4
    258e:	83 11 20    	mov.w     #0x118, w3
    2590:	c2 11 20    	mov.w     #0x11c, w2
    2592:	01 12 20    	mov.w     #0x120, w1
    2594:	80 b9 20    	mov.w     #0xb98, w0
    2596:	03 00 07    	rcall     0x259e <_timer_init> <L0> <.LFB7> <.LFE6>
    2598:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    259a:	00 80 fa    	ulnk      
    259c:	00 00 06    	return    

0000259e <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    259e:	10 00 fa    	lnk       #0x10
    25a0:	00 0f 78    	mov.w     w0, [w14]
    25a2:	11 07 98    	mov.w     w1, [w14+2]
    25a4:	22 07 98    	mov.w     w2, [w14+4]
    25a6:	33 07 98    	mov.w     w3, [w14+6]
    25a8:	44 07 98    	mov.w     w4, [w14+8]
    25aa:	55 07 98    	mov.w     w5, [w14+10]
    25ac:	46 4f 98    	mov.b     w6, [w14+12]
    25ae:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    25b0:	1e 00 78    	mov.w     [w14], w0
    25b2:	9e 00 90    	mov.w     [w14+2], w1
    25b4:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    25b6:	1e 00 78    	mov.w     [w14], w0
    25b8:	ae 00 90    	mov.w     [w14+4], w1
    25ba:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    25bc:	1e 00 78    	mov.w     [w14], w0
    25be:	be 00 90    	mov.w     [w14+6], w1
    25c0:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    25c2:	1e 00 78    	mov.w     [w14], w0
    25c4:	ce 00 90    	mov.w     [w14+8], w1
    25c6:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    25c8:	1e 00 78    	mov.w     [w14], w0
    25ca:	de 00 90    	mov.w     [w14+10], w1
    25cc:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    25ce:	1e 00 78    	mov.w     [w14], w0
    25d0:	ce 48 90    	mov.b     [w14+12], w1
    25d2:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    25d4:	1e 00 78    	mov.w     [w14], w0
    25d6:	fe 00 90    	mov.w     [w14+14], w1
    25d8:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    25da:	1e 00 78    	mov.w     [w14], w0
    25dc:	ce b8 97    	mov.w     [w14-8], w1
    25de:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    25e0:	1e 00 78    	mov.w     [w14], w0
    25e2:	80 00 eb    	clr.w     w1
    25e4:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    25e6:	1e 00 78    	mov.w     [w14], w0
    25e8:	80 00 eb    	clr.w     w1
    25ea:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    25ec:	1e 00 78    	mov.w     [w14], w0
    25ee:	80 00 eb    	clr.w     w1
    25f0:	21 08 98    	mov.w     w1, [w0+20]
}
    25f2:	00 80 fa    	ulnk      
    25f4:	00 00 06    	return    

000025f6 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    25f6:	06 00 fa    	lnk       #0x6
    25f8:	88 1f 78    	mov.w     w8, [w15++]
    25fa:	00 0f 78    	mov.w     w0, [w14]
    25fc:	12 07 98    	mov.w     w2, [w14+2]
    25fe:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    2600:	18 c0 b3    	mov.b     #0x1, w8
    2602:	d2 7b 23    	mov.w     #0x37bd, w2
    2604:	63 f8 23    	mov.w     #0x3f86, w3
    2606:	1e 00 90    	mov.w     [w14+2], w0
    2608:	ae 00 90    	mov.w     [w14+4], w1
    260a:	b5 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    260c:	00 00 e0    	cp0.w     w0
    260e:	01 00 3c    	bra       GT, 0x2612 <.L14>
    2610:	00 44 eb    	clr.b     w8

00002612 <.L14>:
    2612:	08 04 e0    	cp0.b     w8
    2614:	69 00 3a    	bra       NZ, 0x26e8 <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    2616:	18 c0 b3    	mov.b     #0x1, w8
    2618:	d2 7b 23    	mov.w     #0x37bd, w2
    261a:	63 e8 23    	mov.w     #0x3e86, w3
    261c:	1e 00 90    	mov.w     [w14+2], w0
    261e:	ae 00 90    	mov.w     [w14+4], w1
    2620:	aa f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2622:	00 00 e0    	cp0.w     w0
    2624:	01 00 3c    	bra       GT, 0x2628 <.L17>
    2626:	00 44 eb    	clr.b     w8

00002628 <.L17>:
    2628:	08 04 e0    	cp0.b     w8
    262a:	12 00 32    	bra       Z, 0x2650 <.L18>
        timer_stop(self);
    262c:	1e 00 78    	mov.w     [w14], w0
    262e:	c4 00 07    	rcall     0x27b8 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    2630:	1e 00 78    	mov.w     [w14], w0
    2632:	10 00 78    	mov.w     [w0], w0
    2634:	01 03 20    	mov.w     #0x30, w1
    2636:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2638:	1e 00 78    	mov.w     [w14], w0
    263a:	10 04 90    	mov.w     [w0+2], w8
    263c:	02 40 22    	mov.w     #0x2400, w2
    263e:	43 77 24    	mov.w     #0x4774, w3
    2640:	1e 00 90    	mov.w     [w14+2], w0
    2642:	ae 00 90    	mov.w     [w14+4], w1
    2644:	2e f7 07    	rcall     0x14a2 <___mulsf3>
    2646:	ba f6 07    	rcall     0x13bc <___fixunssfsi>
    2648:	00 00 78    	mov.w     w0, w0
    264a:	00 00 e9    	dec.w     w0, w0
    264c:	00 0c 78    	mov.w     w0, [w8]
    264e:	4d 00 37    	bra       0x26ea <.L13>

00002650 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2650:	18 c0 b3    	mov.b     #0x1, w8
    2652:	d2 7b 23    	mov.w     #0x37bd, w2
    2654:	63 d0 23    	mov.w     #0x3d06, w3
    2656:	1e 00 90    	mov.w     [w14+2], w0
    2658:	ae 00 90    	mov.w     [w14+4], w1
    265a:	8d f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    265c:	00 00 e0    	cp0.w     w0
    265e:	01 00 3c    	bra       GT, 0x2662 <.L19>
    2660:	00 44 eb    	clr.b     w8

00002662 <.L19>:
    2662:	08 04 e0    	cp0.b     w8
    2664:	12 00 32    	bra       Z, 0x268a <.L20>
        timer_stop(self);
    2666:	1e 00 78    	mov.w     [w14], w0
    2668:	a7 00 07    	rcall     0x27b8 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    266a:	1e 00 78    	mov.w     [w14], w0
    266c:	10 00 78    	mov.w     [w0], w0
    266e:	01 02 20    	mov.w     #0x20, w1
    2670:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2672:	1e 00 78    	mov.w     [w14], w0
    2674:	10 04 90    	mov.w     [w0+2], w8
    2676:	02 40 22    	mov.w     #0x2400, w2
    2678:	43 87 24    	mov.w     #0x4874, w3
    267a:	1e 00 90    	mov.w     [w14+2], w0
    267c:	ae 00 90    	mov.w     [w14+4], w1
    267e:	11 f7 07    	rcall     0x14a2 <___mulsf3>
    2680:	9d f6 07    	rcall     0x13bc <___fixunssfsi>
    2682:	00 00 78    	mov.w     w0, w0
    2684:	00 00 e9    	dec.w     w0, w0
    2686:	00 0c 78    	mov.w     w0, [w8]
    2688:	30 00 37    	bra       0x26ea <.L13>

0000268a <.L20>:
    } else if (period>(65536.*TCY)) {
    268a:	18 c0 b3    	mov.b     #0x1, w8
    268c:	d2 7b 23    	mov.w     #0x37bd, w2
    268e:	63 b8 23    	mov.w     #0x3b86, w3
    2690:	1e 00 90    	mov.w     [w14+2], w0
    2692:	ae 00 90    	mov.w     [w14+4], w1
    2694:	70 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2696:	00 00 e0    	cp0.w     w0
    2698:	01 00 3c    	bra       GT, 0x269c <.L21>
    269a:	00 44 eb    	clr.b     w8

0000269c <.L21>:
    269c:	08 04 e0    	cp0.b     w8
    269e:	12 00 32    	bra       Z, 0x26c4 <.L22>
        timer_stop(self);
    26a0:	1e 00 78    	mov.w     [w14], w0
    26a2:	8a 00 07    	rcall     0x27b8 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    26a4:	1e 00 78    	mov.w     [w14], w0
    26a6:	10 00 78    	mov.w     [w0], w0
    26a8:	01 01 20    	mov.w     #0x10, w1
    26aa:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    26ac:	1e 00 78    	mov.w     [w14], w0
    26ae:	10 04 90    	mov.w     [w0+2], w8
    26b0:	02 40 22    	mov.w     #0x2400, w2
    26b2:	43 9f 24    	mov.w     #0x49f4, w3
    26b4:	1e 00 90    	mov.w     [w14+2], w0
    26b6:	ae 00 90    	mov.w     [w14+4], w1
    26b8:	f4 f6 07    	rcall     0x14a2 <___mulsf3>
    26ba:	80 f6 07    	rcall     0x13bc <___fixunssfsi>
    26bc:	00 00 78    	mov.w     w0, w0
    26be:	00 00 e9    	dec.w     w0, w0
    26c0:	00 0c 78    	mov.w     w0, [w8]
    26c2:	13 00 37    	bra       0x26ea <.L13>

000026c4 <.L22>:
    } else {
        timer_stop(self);
    26c4:	1e 00 78    	mov.w     [w14], w0
    26c6:	78 00 07    	rcall     0x27b8 <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    26c8:	1e 00 78    	mov.w     [w14], w0
    26ca:	10 00 78    	mov.w     [w0], w0
    26cc:	80 00 eb    	clr.w     w1
    26ce:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    26d0:	1e 00 78    	mov.w     [w14], w0
    26d2:	10 04 90    	mov.w     [w0+2], w8
    26d4:	02 40 22    	mov.w     #0x2400, w2
    26d6:	43 b7 24    	mov.w     #0x4b74, w3
    26d8:	1e 00 90    	mov.w     [w14+2], w0
    26da:	ae 00 90    	mov.w     [w14+4], w1
    26dc:	e2 f6 07    	rcall     0x14a2 <___mulsf3>
    26de:	6e f6 07    	rcall     0x13bc <___fixunssfsi>
    26e0:	00 00 78    	mov.w     w0, w0
    26e2:	00 00 e9    	dec.w     w0, w0
    26e4:	00 0c 78    	mov.w     w0, [w8]
    26e6:	01 00 37    	bra       0x26ea <.L13>

000026e8 <.L23>:
    26e8:	00 00 00    	nop       

000026ea <.L13>:
    }
}
    26ea:	4f 04 78    	mov.w     [--w15], w8
    26ec:	00 80 fa    	ulnk      
    26ee:	00 00 06    	return    

000026f0 <_timer_period>:

float timer_period(_TIMER *self) {
    26f0:	04 00 fa    	lnk       #0x4
    26f2:	88 9f be    	mov.d     w8, [w15++]
    26f4:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    26f6:	1e 00 90    	mov.w     [w14+2], w0
    26f8:	10 00 78    	mov.w     [w0], w0
    26fa:	90 00 78    	mov.w     [w0], w1
    26fc:	00 03 20    	mov.w     #0x30, w0
    26fe:	00 80 60    	and.w     w1, w0, w0
    2700:	44 00 de    	lsr.w     w0, #0x4, w0
    2702:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2704:	1e 00 78    	mov.w     [w14], w0
    2706:	c2 00 dd    	sl.w      w0, #0x2, w1
    2708:	00 bf 20    	mov.w     #0xbf0, w0
    270a:	00 80 40    	add.w     w1, w0, w0
    270c:	10 04 be    	mov.d     [w0], w8
    270e:	1e 00 90    	mov.w     [w14+2], w0
    2710:	10 00 90    	mov.w     [w0+2], w0
    2712:	10 00 78    	mov.w     [w0], w0
    2714:	80 00 eb    	clr.w     w1
    2716:	70 f6 07    	rcall     0x13f8 <___floatunsisf>
    2718:	02 00 20    	mov.w     #0x0, w2
    271a:	03 f8 23    	mov.w     #0x3f80, w3
    271c:	8b f5 07    	rcall     0x1234 <___addsf3>
    271e:	00 01 be    	mov.d     w0, w2
    2720:	08 00 be    	mov.d     w8, w0
    2722:	bf f6 07    	rcall     0x14a2 <___mulsf3>
}
    2724:	4f 04 be    	mov.d     [--w15], w8
    2726:	00 80 fa    	ulnk      
    2728:	00 00 06    	return    

0000272a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    272a:	06 00 fa    	lnk       #0x6
    272c:	00 0f 78    	mov.w     w0, [w14]
    272e:	12 07 98    	mov.w     w2, [w14+2]
    2730:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    2732:	1e 01 90    	mov.w     [w14+2], w2
    2734:	ae 01 90    	mov.w     [w14+4], w3
    2736:	00 00 20    	mov.w     #0x0, w0
    2738:	01 f8 23    	mov.w     #0x3f80, w1
    273a:	d9 f5 07    	rcall     0x12ee <___divsf3>
    273c:	00 01 be    	mov.d     w0, w2
    273e:	1e 00 78    	mov.w     [w14], w0
    2740:	5a ff 07    	rcall     0x25f6 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    2742:	00 80 fa    	ulnk      
    2744:	00 00 06    	return    

00002746 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2746:	02 00 fa    	lnk       #0x2
    2748:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    274a:	1e 00 78    	mov.w     [w14], w0
    274c:	d1 ff 07    	rcall     0x26f0 <_timer_period> <L0> <.LFB9> <.LFE8>
    274e:	00 01 be    	mov.d     w0, w2
    2750:	00 00 20    	mov.w     #0x0, w0
    2752:	01 f8 23    	mov.w     #0x3f80, w1
    2754:	cc f5 07    	rcall     0x12ee <___divsf3>
}
    2756:	00 80 fa    	ulnk      
    2758:	00 00 06    	return    

0000275a <_timer_time>:

float timer_time(_TIMER *self) {
    275a:	04 00 fa    	lnk       #0x4
    275c:	88 9f be    	mov.d     w8, [w15++]
    275e:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2760:	1e 00 90    	mov.w     [w14+2], w0
    2762:	10 00 78    	mov.w     [w0], w0
    2764:	90 00 78    	mov.w     [w0], w1
    2766:	00 03 20    	mov.w     #0x30, w0
    2768:	00 80 60    	and.w     w1, w0, w0
    276a:	44 00 de    	lsr.w     w0, #0x4, w0
    276c:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    276e:	1e 00 78    	mov.w     [w14], w0
    2770:	c2 00 dd    	sl.w      w0, #0x2, w1
    2772:	00 bf 20    	mov.w     #0xbf0, w0
    2774:	00 80 40    	add.w     w1, w0, w0
    2776:	10 04 be    	mov.d     [w0], w8
    2778:	1e 00 90    	mov.w     [w14+2], w0
    277a:	10 00 90    	mov.w     [w0+2], w0
    277c:	10 00 78    	mov.w     [w0], w0
    277e:	80 00 eb    	clr.w     w1
    2780:	3b f6 07    	rcall     0x13f8 <___floatunsisf>
    2782:	02 00 20    	mov.w     #0x0, w2
    2784:	03 f8 23    	mov.w     #0x3f80, w3
    2786:	56 f5 07    	rcall     0x1234 <___addsf3>
    2788:	00 01 be    	mov.d     w0, w2
    278a:	08 00 be    	mov.d     w8, w0
    278c:	8a f6 07    	rcall     0x14a2 <___mulsf3>
}
    278e:	4f 04 be    	mov.d     [--w15], w8
    2790:	00 80 fa    	ulnk      
    2792:	00 00 06    	return    

00002794 <_timer_start>:

void timer_start(_TIMER *self) {
    2794:	02 00 fa    	lnk       #0x2
    2796:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    2798:	1e 00 78    	mov.w     [w14], w0
    279a:	2b 00 07    	rcall     0x27f2 <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    279c:	1e 00 78    	mov.w     [w14], w0
    279e:	20 00 90    	mov.w     [w0+4], w0
    27a0:	80 00 eb    	clr.w     w1
    27a2:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    27a4:	1e 00 78    	mov.w     [w14], w0
    27a6:	10 00 78    	mov.w     [w0], w0
    27a8:	9e 00 78    	mov.w     [w14], w1
    27aa:	91 00 78    	mov.w     [w1], w1
    27ac:	11 01 78    	mov.w     [w1], w2
    27ae:	01 00 28    	mov.w     #0x8000, w1
    27b0:	82 80 70    	ior.w     w1, w2, w1
    27b2:	01 08 78    	mov.w     w1, [w0]
}
    27b4:	00 80 fa    	ulnk      
    27b6:	00 00 06    	return    

000027b8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    27b8:	02 00 fa    	lnk       #0x2
    27ba:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	10 00 78    	mov.w     [w0], w0
    27c0:	9e 00 78    	mov.w     [w14], w1
    27c2:	91 00 78    	mov.w     [w1], w1
    27c4:	11 01 78    	mov.w     [w1], w2
    27c6:	f1 ff 27    	mov.w     #0x7fff, w1
    27c8:	81 00 61    	and.w     w2, w1, w1
    27ca:	01 08 78    	mov.w     w1, [w0]
}
    27cc:	00 80 fa    	ulnk      
    27ce:	00 00 06    	return    

000027d0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    27d0:	02 00 fa    	lnk       #0x2
    27d2:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    27d4:	1e 00 78    	mov.w     [w14], w0
    27d6:	30 00 90    	mov.w     [w0+6], w0
    27d8:	90 00 78    	mov.w     [w0], w1
    27da:	1e 00 78    	mov.w     [w14], w0
    27dc:	20 48 90    	mov.b     [w0+10], w0
    27de:	00 80 fb    	ze        w0, w0
    27e0:	12 00 20    	mov.w     #0x1, w2
    27e2:	00 10 dd    	sl.w      w2, w0, w0
    27e4:	00 80 60    	and.w     w1, w0, w0
    27e6:	00 f0 a7    	btsc.w    w0, #0xf
    27e8:	00 00 ea    	neg.w     w0, w0
    27ea:	00 00 ea    	neg.w     w0, w0
    27ec:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    27ee:	00 80 fa    	ulnk      
    27f0:	00 00 06    	return    

000027f2 <_timer_lower>:

void timer_lower(_TIMER *self) {
    27f2:	02 00 fa    	lnk       #0x2
    27f4:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	30 00 90    	mov.w     [w0+6], w0
    27fa:	9e 00 78    	mov.w     [w14], w1
    27fc:	b1 00 90    	mov.w     [w1+6], w1
    27fe:	11 01 78    	mov.w     [w1], w2
    2800:	9e 00 78    	mov.w     [w14], w1
    2802:	a1 48 90    	mov.b     [w1+10], w1
    2804:	81 80 fb    	ze        w1, w1
    2806:	13 00 20    	mov.w     #0x1, w3
    2808:	81 18 dd    	sl.w      w3, w1, w1
    280a:	81 80 ea    	com.w     w1, w1
    280c:	81 00 61    	and.w     w2, w1, w1
    280e:	01 08 78    	mov.w     w1, [w0]
}
    2810:	00 80 fa    	ulnk      
    2812:	00 00 06    	return    

00002814 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2814:	02 00 fa    	lnk       #0x2
    2816:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    2818:	1e 00 78    	mov.w     [w14], w0
    281a:	20 00 90    	mov.w     [w0+4], w0
    281c:	10 00 78    	mov.w     [w0], w0
}
    281e:	00 80 fa    	ulnk      
    2820:	00 00 06    	return    

00002822 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2822:	02 00 fa    	lnk       #0x2
    2824:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    2826:	1e 00 78    	mov.w     [w14], w0
    2828:	40 00 90    	mov.w     [w0+8], w0
    282a:	9e 00 78    	mov.w     [w14], w1
    282c:	c1 00 90    	mov.w     [w1+8], w1
    282e:	11 01 78    	mov.w     [w1], w2
    2830:	9e 00 78    	mov.w     [w14], w1
    2832:	a1 48 90    	mov.b     [w1+10], w1
    2834:	81 80 fb    	ze        w1, w1
    2836:	13 00 20    	mov.w     #0x1, w3
    2838:	81 18 dd    	sl.w      w3, w1, w1
    283a:	82 80 70    	ior.w     w1, w2, w1
    283c:	01 08 78    	mov.w     w1, [w0]
}
    283e:	00 80 fa    	ulnk      
    2840:	00 00 06    	return    

00002842 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2842:	02 00 fa    	lnk       #0x2
    2844:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    2846:	1e 00 78    	mov.w     [w14], w0
    2848:	40 00 90    	mov.w     [w0+8], w0
    284a:	9e 00 78    	mov.w     [w14], w1
    284c:	c1 00 90    	mov.w     [w1+8], w1
    284e:	11 01 78    	mov.w     [w1], w2
    2850:	9e 00 78    	mov.w     [w14], w1
    2852:	a1 48 90    	mov.b     [w1+10], w1
    2854:	81 80 fb    	ze        w1, w1
    2856:	13 00 20    	mov.w     #0x1, w3
    2858:	81 18 dd    	sl.w      w3, w1, w1
    285a:	81 80 ea    	com.w     w1, w1
    285c:	81 00 61    	and.w     w2, w1, w1
    285e:	01 08 78    	mov.w     w1, [w0]
}
    2860:	00 80 fa    	ulnk      
    2862:	00 00 06    	return    

00002864 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2864:	08 00 fa    	lnk       #0x8
    2866:	00 0f 78    	mov.w     w0, [w14]
    2868:	12 07 98    	mov.w     w2, [w14+2]
    286a:	23 07 98    	mov.w     w3, [w14+4]
    286c:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    286e:	1e 00 78    	mov.w     [w14], w0
    2870:	e8 ff 07    	rcall     0x2842 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    2872:	1e 01 90    	mov.w     [w14+2], w2
    2874:	ae 01 90    	mov.w     [w14+4], w3
    2876:	1e 00 78    	mov.w     [w14], w0
    2878:	be fe 07    	rcall     0x25f6 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    287a:	1e 00 78    	mov.w     [w14], w0
    287c:	80 00 eb    	clr.w     w1
    287e:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    2880:	1e 00 78    	mov.w     [w14], w0
    2882:	be 00 90    	mov.w     [w14+6], w1
    2884:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    2886:	1e 00 78    	mov.w     [w14], w0
    2888:	80 00 eb    	clr.w     w1
    288a:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    288c:	1e 00 78    	mov.w     [w14], w0
    288e:	c9 ff 07    	rcall     0x2822 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    2890:	1e 00 78    	mov.w     [w14], w0
    2892:	80 ff 07    	rcall     0x2794 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    2894:	00 80 fa    	ulnk      
    2896:	00 00 06    	return    

00002898 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2898:	0a 00 fa    	lnk       #0xa
    289a:	00 0f 78    	mov.w     w0, [w14]
    289c:	12 07 98    	mov.w     w2, [w14+2]
    289e:	23 07 98    	mov.w     w3, [w14+4]
    28a0:	31 07 98    	mov.w     w1, [w14+6]
    28a2:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    28a4:	1e 00 78    	mov.w     [w14], w0
    28a6:	cd ff 07    	rcall     0x2842 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    28a8:	1e 01 90    	mov.w     [w14+2], w2
    28aa:	ae 01 90    	mov.w     [w14+4], w3
    28ac:	1e 00 78    	mov.w     [w14], w0
    28ae:	a3 fe 07    	rcall     0x25f6 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    28b0:	1e 00 78    	mov.w     [w14], w0
    28b2:	be 00 90    	mov.w     [w14+6], w1
    28b4:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    28b6:	1e 00 78    	mov.w     [w14], w0
    28b8:	80 00 eb    	clr.w     w1
    28ba:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	ce 00 90    	mov.w     [w14+8], w1
    28c0:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    28c2:	1e 00 78    	mov.w     [w14], w0
    28c4:	ae ff 07    	rcall     0x2822 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    28c6:	1e 00 78    	mov.w     [w14], w0
    28c8:	65 ff 07    	rcall     0x2794 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    28ca:	00 80 fa    	ulnk      
    28cc:	00 00 06    	return    

000028ce <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    28ce:	02 00 fa    	lnk       #0x2
    28d0:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    28d2:	1e 00 78    	mov.w     [w14], w0
    28d4:	b6 ff 07    	rcall     0x2842 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    28d6:	1e 00 78    	mov.w     [w14], w0
    28d8:	8c ff 07    	rcall     0x27f2 <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    28da:	1e 00 78    	mov.w     [w14], w0
    28dc:	6d ff 07    	rcall     0x27b8 <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    28de:	1e 00 78    	mov.w     [w14], w0
    28e0:	80 00 eb    	clr.w     w1
    28e2:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    28e4:	1e 00 78    	mov.w     [w14], w0
    28e6:	80 00 eb    	clr.w     w1
    28e8:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    28ea:	1e 00 78    	mov.w     [w14], w0
    28ec:	80 00 eb    	clr.w     w1
    28ee:	21 08 98    	mov.w     w1, [w0+20]
}
    28f0:	00 80 fa    	ulnk      
    28f2:	00 00 06    	return    

000028f4 <_init_spi>:
    28f4:	00 00 fa    	lnk       #0x0
    28f6:	80 00 20    	mov.w     #0x8, w0
    28f8:	80 1f 78    	mov.w     w0, [w15++]
    28fa:	77 00 20    	mov.w     #0x7, w7
    28fc:	00 43 eb    	clr.b     w6
    28fe:	85 6a 20    	mov.w     #0x6a8, w5
    2900:	84 24 20    	mov.w     #0x248, w4
    2902:	43 24 20    	mov.w     #0x244, w3
    2904:	22 24 20    	mov.w     #0x242, w2
    2906:	01 24 20    	mov.w     #0x240, w1
    2908:	e0 ba 20    	mov.w     #0xbae, w0
    290a:	1b 00 07    	rcall     0x2942 <_spi_init> <L0> <.LFB1> <.LFE0>
    290c:	8f 87 e9    	dec2.w    w15, w15
    290e:	b0 00 20    	mov.w     #0xb, w0
    2910:	80 1f 78    	mov.w     w0, [w15++]
    2912:	a7 00 20    	mov.w     #0xa, w7
    2914:	00 43 eb    	clr.b     w6
    2916:	c5 6a 20    	mov.w     #0x6ac, w5
    2918:	84 26 20    	mov.w     #0x268, w4
    291a:	43 26 20    	mov.w     #0x264, w3
    291c:	22 26 20    	mov.w     #0x262, w2
    291e:	01 26 20    	mov.w     #0x260, w1
    2920:	40 bc 20    	mov.w     #0xbc4, w0
    2922:	0f 00 07    	rcall     0x2942 <_spi_init> <L0> <.LFB1> <.LFE0>
    2924:	8f 87 e9    	dec2.w    w15, w15
    2926:	10 02 20    	mov.w     #0x21, w0
    2928:	80 1f 78    	mov.w     w0, [w15++]
    292a:	07 02 20    	mov.w     #0x20, w7
    292c:	00 43 eb    	clr.b     w6
    292e:	85 6b 20    	mov.w     #0x6b8, w5
    2930:	84 28 20    	mov.w     #0x288, w4
    2932:	43 28 20    	mov.w     #0x284, w3
    2934:	22 28 20    	mov.w     #0x282, w2
    2936:	01 28 20    	mov.w     #0x280, w1
    2938:	a0 bd 20    	mov.w     #0xbda, w0
    293a:	03 00 07    	rcall     0x2942 <_spi_init> <L0> <.LFB1> <.LFE0>
    293c:	8f 87 e9    	dec2.w    w15, w15
    293e:	00 80 fa    	ulnk      
    2940:	00 00 06    	return    

00002942 <_spi_init>:
    2942:	10 00 fa    	lnk       #0x10
    2944:	00 0f 78    	mov.w     w0, [w14]
    2946:	11 07 98    	mov.w     w1, [w14+2]
    2948:	22 07 98    	mov.w     w2, [w14+4]
    294a:	33 07 98    	mov.w     w3, [w14+6]
    294c:	44 07 98    	mov.w     w4, [w14+8]
    294e:	55 07 98    	mov.w     w5, [w14+10]
    2950:	46 4f 98    	mov.b     w6, [w14+12]
    2952:	77 07 98    	mov.w     w7, [w14+14]
    2954:	1e 00 78    	mov.w     [w14], w0
    2956:	9e 00 90    	mov.w     [w14+2], w1
    2958:	01 08 78    	mov.w     w1, [w0]
    295a:	1e 00 78    	mov.w     [w14], w0
    295c:	ae 00 90    	mov.w     [w14+4], w1
    295e:	11 00 98    	mov.w     w1, [w0+2]
    2960:	1e 00 78    	mov.w     [w14], w0
    2962:	be 00 90    	mov.w     [w14+6], w1
    2964:	21 00 98    	mov.w     w1, [w0+4]
    2966:	1e 00 78    	mov.w     [w14], w0
    2968:	ce 00 90    	mov.w     [w14+8], w1
    296a:	31 00 98    	mov.w     w1, [w0+6]
    296c:	1e 00 78    	mov.w     [w14], w0
    296e:	de 00 90    	mov.w     [w14+10], w1
    2970:	41 00 98    	mov.w     w1, [w0+8]
    2972:	1e 00 78    	mov.w     [w14], w0
    2974:	ce 48 90    	mov.b     [w14+12], w1
    2976:	21 48 98    	mov.b     w1, [w0+10]
    2978:	1e 00 78    	mov.w     [w14], w0
    297a:	fe 00 90    	mov.w     [w14+14], w1
    297c:	61 00 98    	mov.w     w1, [w0+12]
    297e:	1e 00 78    	mov.w     [w14], w0
    2980:	ce b8 97    	mov.w     [w14-8], w1
    2982:	71 00 98    	mov.w     w1, [w0+14]
    2984:	1e 00 78    	mov.w     [w14], w0
    2986:	80 00 eb    	clr.w     w1
    2988:	01 08 98    	mov.w     w1, [w0+16]
    298a:	1e 00 78    	mov.w     [w14], w0
    298c:	80 00 eb    	clr.w     w1
    298e:	11 08 98    	mov.w     w1, [w0+18]
    2990:	1e 00 78    	mov.w     [w14], w0
    2992:	80 00 eb    	clr.w     w1
    2994:	21 08 98    	mov.w     w1, [w0+20]
    2996:	00 80 fa    	ulnk      
    2998:	00 00 06    	return    

0000299a <_spi_open>:
    299a:	1a 00 fa    	lnk       #0x1a
    299c:	88 1f 78    	mov.w     w8, [w15++]
    299e:	60 07 98    	mov.w     w0, [w14+12]
    29a0:	71 07 98    	mov.w     w1, [w14+14]
    29a2:	02 0f 98    	mov.w     w2, [w14+16]
    29a4:	13 0f 98    	mov.w     w3, [w14+18]
    29a6:	24 0f 98    	mov.w     w4, [w14+20]
    29a8:	35 0f 98    	mov.w     w5, [w14+22]
    29aa:	06 5f 98    	mov.b     w6, [w14+24]
    29ac:	00 10 20    	mov.w     #0x100, w0
    29ae:	20 07 98    	mov.w     w0, [w14+4]
    29b0:	00 00 eb    	clr.w     w0
    29b2:	30 07 98    	mov.w     w0, [w14+6]
    29b4:	00 14 20    	mov.w     #0x140, w0
    29b6:	40 07 98    	mov.w     w0, [w14+8]
    29b8:	00 04 20    	mov.w     #0x40, w0
    29ba:	50 07 98    	mov.w     w0, [w14+10]
    29bc:	7e 00 90    	mov.w     [w14+14], w0
    29be:	60 00 90    	mov.w     [w0+12], w0
    29c0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    29c2:	36 01 32    	bra       Z, 0x2c30 <.L21>
    29c4:	0e 08 90    	mov.w     [w14+16], w0
    29c6:	60 00 90    	mov.w     [w0+12], w0
    29c8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    29ca:	34 01 32    	bra       Z, 0x2c34 <.L22>
    29cc:	1e 08 90    	mov.w     [w14+18], w0
    29ce:	60 00 90    	mov.w     [w0+12], w0
    29d0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    29d2:	32 01 32    	bra       Z, 0x2c38 <.L23>
    29d4:	7e 00 90    	mov.w     [w14+14], w0
    29d6:	00 08 90    	mov.w     [w0+16], w0
    29d8:	00 00 e0    	cp0.w     w0
    29da:	97 00 3a    	bra       NZ, 0x2b0a <.L7>
    29dc:	0e 08 90    	mov.w     [w14+16], w0
    29de:	00 08 90    	mov.w     [w0+16], w0
    29e0:	00 00 e0    	cp0.w     w0
    29e2:	93 00 3a    	bra       NZ, 0x2b0a <.L7>
    29e4:	1e 08 90    	mov.w     [w14+18], w0
    29e6:	00 08 90    	mov.w     [w0+16], w0
    29e8:	00 00 e0    	cp0.w     w0
    29ea:	8f 00 3a    	bra       NZ, 0x2b0a <.L7>
    29ec:	7e 00 90    	mov.w     [w14+14], w0
    29ee:	66 03 07    	rcall     0x30bc <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    29f0:	0e 08 90    	mov.w     [w14+16], w0
    29f2:	8b 03 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    29f4:	0e 08 90    	mov.w     [w14+16], w0
    29f6:	e6 03 07    	rcall     0x31c4 <_pin_set> <L0> <.LFB8> <.LFE7>
    29f8:	1e 08 90    	mov.w     [w14+18], w0
    29fa:	87 03 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    29fc:	1e 08 90    	mov.w     [w14+18], w0
    29fe:	f7 03 07    	rcall     0x31ee <_pin_clear> <L0> <.LFB9> <.LFE8>
    2a00:	6e 00 90    	mov.w     [w14+12], w0
    2a02:	fe 00 90    	mov.w     [w14+14], w1
    2a04:	01 08 98    	mov.w     w1, [w0+16]
    2a06:	7e 00 90    	mov.w     [w14+14], w0
    2a08:	ee 00 90    	mov.w     [w14+12], w1
    2a0a:	01 08 98    	mov.w     w1, [w0+16]
    2a0c:	7e 00 90    	mov.w     [w14+14], w0
    2a0e:	80 00 eb    	clr.w     w1
    2a10:	11 08 98    	mov.w     w1, [w0+18]
    2a12:	7e 00 90    	mov.w     [w14+14], w0
    2a14:	80 00 eb    	clr.w     w1
    2a16:	21 08 98    	mov.w     w1, [w0+20]
    2a18:	6e 00 90    	mov.w     [w14+12], w0
    2a1a:	8e 08 90    	mov.w     [w14+16], w1
    2a1c:	11 08 98    	mov.w     w1, [w0+18]
    2a1e:	0e 08 90    	mov.w     [w14+16], w0
    2a20:	ee 00 90    	mov.w     [w14+12], w1
    2a22:	01 08 98    	mov.w     w1, [w0+16]
    2a24:	0e 08 90    	mov.w     [w14+16], w0
    2a26:	80 00 eb    	clr.w     w1
    2a28:	11 08 98    	mov.w     w1, [w0+18]
    2a2a:	0e 08 90    	mov.w     [w14+16], w0
    2a2c:	80 00 eb    	clr.w     w1
    2a2e:	21 08 98    	mov.w     w1, [w0+20]
    2a30:	6e 00 90    	mov.w     [w14+12], w0
    2a32:	9e 08 90    	mov.w     [w14+18], w1
    2a34:	21 08 98    	mov.w     w1, [w0+20]
    2a36:	1e 08 90    	mov.w     [w14+18], w0
    2a38:	ee 00 90    	mov.w     [w14+12], w1
    2a3a:	01 08 98    	mov.w     w1, [w0+16]
    2a3c:	1e 08 90    	mov.w     [w14+18], w0
    2a3e:	80 00 eb    	clr.w     w1
    2a40:	11 08 98    	mov.w     w1, [w0+18]
    2a42:	1e 08 90    	mov.w     [w14+18], w0
    2a44:	80 00 eb    	clr.w     w1
    2a46:	21 08 98    	mov.w     w1, [w0+20]
    2a48:	11 3a 80    	mov.w     0x742, w1
    2a4a:	f0 0b 20    	mov.w     #0xbf, w0
    2a4c:	00 81 60    	and.w     w1, w0, w2
    2a4e:	60 04 20    	mov.w     #0x46, w0
    2a50:	71 05 20    	mov.w     #0x57, w1
    2a52:	23 74 20    	mov.w     #0x742, w3
    2a54:	80 49 78    	mov.b     w0, [w3]
    2a56:	81 49 78    	mov.b     w1, [w3]
    2a58:	82 49 78    	mov.b     w2, [w3]
    2a5a:	6e 00 90    	mov.w     [w14+12], w0
    2a5c:	40 00 90    	mov.w     [w0+8], w0
    2a5e:	ee 00 90    	mov.w     [w14+12], w1
    2a60:	c1 00 90    	mov.w     [w1+8], w1
    2a62:	11 01 78    	mov.w     [w1], w2
    2a64:	ee 00 90    	mov.w     [w14+12], w1
    2a66:	a1 48 90    	mov.b     [w1+10], w1
    2a68:	81 80 fb    	ze        w1, w1
    2a6a:	f3 03 20    	mov.w     #0x3f, w3
    2a6c:	81 18 dd    	sl.w      w3, w1, w1
    2a6e:	81 80 ea    	com.w     w1, w1
    2a70:	81 00 61    	and.w     w2, w1, w1
    2a72:	01 08 78    	mov.w     w1, [w0]
    2a74:	6e 00 90    	mov.w     [w14+12], w0
    2a76:	40 00 90    	mov.w     [w0+8], w0
    2a78:	ee 00 90    	mov.w     [w14+12], w1
    2a7a:	c1 00 90    	mov.w     [w1+8], w1
    2a7c:	11 01 78    	mov.w     [w1], w2
    2a7e:	fe 00 90    	mov.w     [w14+14], w1
    2a80:	e1 01 90    	mov.w     [w1+12], w3
    2a82:	ee 00 90    	mov.w     [w14+12], w1
    2a84:	a1 48 90    	mov.b     [w1+10], w1
    2a86:	81 80 fb    	ze        w1, w1
    2a88:	81 18 dd    	sl.w      w3, w1, w1
    2a8a:	82 80 70    	ior.w     w1, w2, w1
    2a8c:	01 08 78    	mov.w     w1, [w0]
    2a8e:	0e 08 90    	mov.w     [w14+16], w0
    2a90:	70 00 90    	mov.w     [w0+14], w0
    2a92:	8e 08 90    	mov.w     [w14+16], w1
    2a94:	f1 00 90    	mov.w     [w1+14], w1
    2a96:	11 01 78    	mov.w     [w1], w2
    2a98:	8e 08 90    	mov.w     [w14+16], w1
    2a9a:	a1 48 90    	mov.b     [w1+10], w1
    2a9c:	81 80 fb    	ze        w1, w1
    2a9e:	f3 03 20    	mov.w     #0x3f, w3
    2aa0:	81 18 dd    	sl.w      w3, w1, w1
    2aa2:	81 80 ea    	com.w     w1, w1
    2aa4:	81 00 61    	and.w     w2, w1, w1
    2aa6:	01 08 78    	mov.w     w1, [w0]
    2aa8:	0e 08 90    	mov.w     [w14+16], w0
    2aaa:	70 00 90    	mov.w     [w0+14], w0
    2aac:	8e 08 90    	mov.w     [w14+16], w1
    2aae:	f1 00 90    	mov.w     [w1+14], w1
    2ab0:	11 01 78    	mov.w     [w1], w2
    2ab2:	ee 00 90    	mov.w     [w14+12], w1
    2ab4:	e1 01 90    	mov.w     [w1+12], w3
    2ab6:	8e 08 90    	mov.w     [w14+16], w1
    2ab8:	a1 48 90    	mov.b     [w1+10], w1
    2aba:	81 80 fb    	ze        w1, w1
    2abc:	81 18 dd    	sl.w      w3, w1, w1
    2abe:	82 80 70    	ior.w     w1, w2, w1
    2ac0:	01 08 78    	mov.w     w1, [w0]
    2ac2:	1e 08 90    	mov.w     [w14+18], w0
    2ac4:	70 00 90    	mov.w     [w0+14], w0
    2ac6:	9e 08 90    	mov.w     [w14+18], w1
    2ac8:	f1 00 90    	mov.w     [w1+14], w1
    2aca:	11 01 78    	mov.w     [w1], w2
    2acc:	9e 08 90    	mov.w     [w14+18], w1
    2ace:	a1 48 90    	mov.b     [w1+10], w1
    2ad0:	81 80 fb    	ze        w1, w1
    2ad2:	f3 03 20    	mov.w     #0x3f, w3
    2ad4:	81 18 dd    	sl.w      w3, w1, w1
    2ad6:	81 80 ea    	com.w     w1, w1
    2ad8:	81 00 61    	and.w     w2, w1, w1
    2ada:	01 08 78    	mov.w     w1, [w0]
    2adc:	1e 08 90    	mov.w     [w14+18], w0
    2ade:	70 00 90    	mov.w     [w0+14], w0
    2ae0:	9e 08 90    	mov.w     [w14+18], w1
    2ae2:	f1 00 90    	mov.w     [w1+14], w1
    2ae4:	11 01 78    	mov.w     [w1], w2
    2ae6:	ee 00 90    	mov.w     [w14+12], w1
    2ae8:	f1 01 90    	mov.w     [w1+14], w3
    2aea:	9e 08 90    	mov.w     [w14+18], w1
    2aec:	a1 48 90    	mov.b     [w1+10], w1
    2aee:	81 80 fb    	ze        w1, w1
    2af0:	81 18 dd    	sl.w      w3, w1, w1
    2af2:	82 80 70    	ior.w     w1, w2, w1
    2af4:	01 08 78    	mov.w     w1, [w0]
    2af6:	10 3a 80    	mov.w     0x742, w0
    2af8:	00 01 78    	mov.w     w0, w2
    2afa:	02 60 a0    	bset.w    w2, #0x6
    2afc:	60 04 20    	mov.w     #0x46, w0
    2afe:	71 05 20    	mov.w     #0x57, w1
    2b00:	23 74 20    	mov.w     #0x742, w3
    2b02:	80 49 78    	mov.b     w0, [w3]
    2b04:	81 49 78    	mov.b     w1, [w3]
    2b06:	82 49 78    	mov.b     w2, [w3]
    2b08:	0f 00 37    	bra       0x2b28 <.L8>

00002b0a <.L7>:
    2b0a:	6e 00 90    	mov.w     [w14+12], w0
    2b0c:	80 08 90    	mov.w     [w0+16], w1
    2b0e:	7e 00 90    	mov.w     [w14+14], w0
    2b10:	80 8f 50    	sub.w     w1, w0, [w15]
    2b12:	94 00 3a    	bra       NZ, 0x2c3c <.L24>
    2b14:	6e 00 90    	mov.w     [w14+12], w0
    2b16:	90 08 90    	mov.w     [w0+18], w1
    2b18:	0e 08 90    	mov.w     [w14+16], w0
    2b1a:	80 8f 50    	sub.w     w1, w0, [w15]
    2b1c:	91 00 3a    	bra       NZ, 0x2c40 <.L25>
    2b1e:	6e 00 90    	mov.w     [w14+12], w0
    2b20:	a0 08 90    	mov.w     [w0+20], w1
    2b22:	1e 08 90    	mov.w     [w14+18], w0
    2b24:	80 8f 50    	sub.w     w1, w0, [w15]
    2b26:	8e 00 3a    	bra       NZ, 0x2c44 <.L26>

00002b28 <.L8>:
    2b28:	18 c0 b3    	mov.b     #0x1, w8
    2b2a:	02 40 22    	mov.w     #0x2400, w2
    2b2c:	43 af 24    	mov.w     #0x4af4, w3
    2b2e:	2e 08 90    	mov.w     [w14+20], w0
    2b30:	be 08 90    	mov.w     [w14+22], w1
    2b32:	21 f4 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2b34:	00 00 e0    	cp0.w     w0
    2b36:	01 00 3c    	bra       GT, 0x2b3a <.L10>
    2b38:	00 44 eb    	clr.b     w8

00002b3a <.L10>:
    2b3a:	08 04 e0    	cp0.b     w8
    2b3c:	04 00 32    	bra       Z, 0x2b46 <.L11>
    2b3e:	00 40 22    	mov.w     #0x2400, w0
    2b40:	41 af 24    	mov.w     #0x4af4, w1
    2b42:	20 0f 98    	mov.w     w0, [w14+20]
    2b44:	31 0f 98    	mov.w     w1, [w14+22]

00002b46 <.L11>:
    2b46:	18 c0 b3    	mov.b     #0x1, w8
    2b48:	02 40 22    	mov.w     #0x2400, w2
    2b4a:	43 6f 24    	mov.w     #0x46f4, w3
    2b4c:	2e 08 90    	mov.w     [w14+20], w0
    2b4e:	be 08 90    	mov.w     [w14+22], w1
    2b50:	10 f4 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    2b52:	00 00 e0    	cp0.w     w0
    2b54:	01 00 35    	bra       LT, 0x2b58 <.L12>
    2b56:	00 44 eb    	clr.b     w8

00002b58 <.L12>:
    2b58:	08 04 e0    	cp0.b     w8
    2b5a:	04 00 32    	bra       Z, 0x2b64 <.L13>
    2b5c:	00 40 22    	mov.w     #0x2400, w0
    2b5e:	41 6f 24    	mov.w     #0x46f4, w1
    2b60:	20 0f 98    	mov.w     w0, [w14+20]
    2b62:	31 0f 98    	mov.w     w1, [w14+22]

00002b64 <.L13>:
    2b64:	18 c0 b3    	mov.b     #0x1, w8
    2b66:	02 40 22    	mov.w     #0x2400, w2
    2b68:	43 7f 24    	mov.w     #0x47f4, w3
    2b6a:	2e 08 90    	mov.w     [w14+20], w0
    2b6c:	be 08 90    	mov.w     [w14+22], w1
    2b6e:	01 f4 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    2b70:	00 00 e0    	cp0.w     w0
    2b72:	01 00 34    	bra       LE, 0x2b76 <.L14>
    2b74:	00 44 eb    	clr.b     w8

00002b76 <.L14>:
    2b76:	08 04 e0    	cp0.b     w8
    2b78:	0a 00 32    	bra       Z, 0x2b8e <.L15>
    2b7a:	02 00 20    	mov.w     #0x0, w2
    2b7c:	03 28 24    	mov.w     #0x4280, w3
    2b7e:	2e 08 90    	mov.w     [w14+20], w0
    2b80:	be 08 90    	mov.w     [w14+22], w1
    2b82:	8f f4 07    	rcall     0x14a2 <___mulsf3>
    2b84:	20 0f 98    	mov.w     w0, [w14+20]
    2b86:	31 0f 98    	mov.w     w1, [w14+22]
    2b88:	00 00 eb    	clr.w     w0
    2b8a:	00 0f 78    	mov.w     w0, [w14]
    2b8c:	2c 00 37    	bra       0x2be6 <.L16>

00002b8e <.L15>:
    2b8e:	18 c0 b3    	mov.b     #0x1, w8
    2b90:	02 40 22    	mov.w     #0x2400, w2
    2b92:	43 8f 24    	mov.w     #0x48f4, w3
    2b94:	2e 08 90    	mov.w     [w14+20], w0
    2b96:	be 08 90    	mov.w     [w14+22], w1
    2b98:	ec f3 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    2b9a:	00 00 e0    	cp0.w     w0
    2b9c:	01 00 34    	bra       LE, 0x2ba0 <.L17>
    2b9e:	00 44 eb    	clr.b     w8

00002ba0 <.L17>:
    2ba0:	08 04 e0    	cp0.b     w8
    2ba2:	0a 00 32    	bra       Z, 0x2bb8 <.L18>
    2ba4:	02 00 20    	mov.w     #0x0, w2
    2ba6:	03 18 24    	mov.w     #0x4180, w3
    2ba8:	2e 08 90    	mov.w     [w14+20], w0
    2baa:	be 08 90    	mov.w     [w14+22], w1
    2bac:	7a f4 07    	rcall     0x14a2 <___mulsf3>
    2bae:	20 0f 98    	mov.w     w0, [w14+20]
    2bb0:	31 0f 98    	mov.w     w1, [w14+22]
    2bb2:	10 00 20    	mov.w     #0x1, w0
    2bb4:	00 0f 78    	mov.w     w0, [w14]
    2bb6:	17 00 37    	bra       0x2be6 <.L16>

00002bb8 <.L18>:
    2bb8:	18 c0 b3    	mov.b     #0x1, w8
    2bba:	02 40 22    	mov.w     #0x2400, w2
    2bbc:	43 9f 24    	mov.w     #0x49f4, w3
    2bbe:	2e 08 90    	mov.w     [w14+20], w0
    2bc0:	be 08 90    	mov.w     [w14+22], w1
    2bc2:	d7 f3 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    2bc4:	00 00 e0    	cp0.w     w0
    2bc6:	01 00 34    	bra       LE, 0x2bca <.L19>
    2bc8:	00 44 eb    	clr.b     w8

00002bca <.L19>:
    2bca:	08 04 e0    	cp0.b     w8
    2bcc:	0a 00 32    	bra       Z, 0x2be2 <.L20>
    2bce:	02 00 20    	mov.w     #0x0, w2
    2bd0:	03 08 24    	mov.w     #0x4080, w3
    2bd2:	2e 08 90    	mov.w     [w14+20], w0
    2bd4:	be 08 90    	mov.w     [w14+22], w1
    2bd6:	65 f4 07    	rcall     0x14a2 <___mulsf3>
    2bd8:	20 0f 98    	mov.w     w0, [w14+20]
    2bda:	31 0f 98    	mov.w     w1, [w14+22]
    2bdc:	20 00 20    	mov.w     #0x2, w0
    2bde:	00 0f 78    	mov.w     w0, [w14]
    2be0:	02 00 37    	bra       0x2be6 <.L16>

00002be2 <.L20>:
    2be2:	30 00 20    	mov.w     #0x3, w0
    2be4:	00 0f 78    	mov.w     w0, [w14]

00002be6 <.L16>:
    2be6:	2e 09 90    	mov.w     [w14+20], w2
    2be8:	be 09 90    	mov.w     [w14+22], w3
    2bea:	00 40 22    	mov.w     #0x2400, w0
    2bec:	41 b7 24    	mov.w     #0x4b74, w1
    2bee:	7f f3 07    	rcall     0x12ee <___divsf3>
    2bf0:	02 00 20    	mov.w     #0x0, w2
    2bf2:	03 f0 23    	mov.w     #0x3f00, w3
    2bf4:	1f f3 07    	rcall     0x1234 <___addsf3>
    2bf6:	e2 f3 07    	rcall     0x13bc <___fixunssfsi>
    2bf8:	10 07 98    	mov.w     w0, [w14+2]
    2bfa:	1e 00 90    	mov.w     [w14+2], w0
    2bfc:	68 00 10    	subr.w    w0, #0x8, w0
    2bfe:	42 00 dd    	sl.w      w0, #0x2, w0
    2c00:	10 07 98    	mov.w     w0, [w14+2]
    2c02:	6e 00 90    	mov.w     [w14+12], w0
    2c04:	90 00 90    	mov.w     [w0+2], w1
    2c06:	0e 58 90    	mov.b     [w14+24], w0
    2c08:	00 80 fb    	ze        w0, w0
    2c0a:	63 00 60    	and.w     w0, #0x3, w0
    2c0c:	00 00 40    	add.w     w0, w0, w0
    2c0e:	64 01 47    	add.w     w14, #0x4, w2
    2c10:	00 00 41    	add.w     w2, w0, w0
    2c12:	10 00 78    	mov.w     [w0], w0
    2c14:	1e 01 70    	ior.w     w0, [w14], w2
    2c16:	1e 00 90    	mov.w     [w14+2], w0
    2c18:	02 00 70    	ior.w     w0, w2, w0
    2c1a:	00 50 a0    	bset.w    w0, #0x5
    2c1c:	80 08 78    	mov.w     w0, [w1]
    2c1e:	6e 00 90    	mov.w     [w14+12], w0
    2c20:	20 00 90    	mov.w     [w0+4], w0
    2c22:	80 00 eb    	clr.w     w1
    2c24:	01 08 78    	mov.w     w1, [w0]
    2c26:	6e 00 90    	mov.w     [w14+12], w0
    2c28:	10 00 78    	mov.w     [w0], w0
    2c2a:	01 00 28    	mov.w     #0x8000, w1
    2c2c:	01 08 78    	mov.w     w1, [w0]
    2c2e:	0b 00 37    	bra       0x2c46 <.L3>

00002c30 <.L21>:
    2c30:	00 00 00    	nop       
    2c32:	09 00 37    	bra       0x2c46 <.L3>

00002c34 <.L22>:
    2c34:	00 00 00    	nop       
    2c36:	07 00 37    	bra       0x2c46 <.L3>

00002c38 <.L23>:
    2c38:	00 00 00    	nop       
    2c3a:	05 00 37    	bra       0x2c46 <.L3>

00002c3c <.L24>:
    2c3c:	00 00 00    	nop       
    2c3e:	03 00 37    	bra       0x2c46 <.L3>

00002c40 <.L25>:
    2c40:	00 00 00    	nop       
    2c42:	01 00 37    	bra       0x2c46 <.L3>

00002c44 <.L26>:
    2c44:	00 00 00    	nop       

00002c46 <.L3>:
    2c46:	4f 04 78    	mov.w     [--w15], w8
    2c48:	00 80 fa    	ulnk      
    2c4a:	00 00 06    	return    

00002c4c <_spi_close>:
    2c4c:	02 00 fa    	lnk       #0x2
    2c4e:	00 0f 78    	mov.w     w0, [w14]
    2c50:	1e 00 78    	mov.w     [w14], w0
    2c52:	10 00 78    	mov.w     [w0], w0
    2c54:	80 00 eb    	clr.w     w1
    2c56:	01 08 78    	mov.w     w1, [w0]
    2c58:	1e 00 78    	mov.w     [w14], w0
    2c5a:	10 00 90    	mov.w     [w0+2], w0
    2c5c:	80 00 eb    	clr.w     w1
    2c5e:	01 08 78    	mov.w     w1, [w0]
    2c60:	1e 00 78    	mov.w     [w14], w0
    2c62:	20 00 90    	mov.w     [w0+4], w0
    2c64:	80 00 eb    	clr.w     w1
    2c66:	01 08 78    	mov.w     w1, [w0]
    2c68:	1e 00 78    	mov.w     [w14], w0
    2c6a:	00 08 90    	mov.w     [w0+16], w0
    2c6c:	00 00 e0    	cp0.w     w0
    2c6e:	28 00 32    	bra       Z, 0x2cc0 <.L28>
    2c70:	11 3a 80    	mov.w     0x742, w1
    2c72:	f0 0b 20    	mov.w     #0xbf, w0
    2c74:	00 81 60    	and.w     w1, w0, w2
    2c76:	60 04 20    	mov.w     #0x46, w0
    2c78:	71 05 20    	mov.w     #0x57, w1
    2c7a:	23 74 20    	mov.w     #0x742, w3
    2c7c:	80 49 78    	mov.b     w0, [w3]
    2c7e:	81 49 78    	mov.b     w1, [w3]
    2c80:	82 49 78    	mov.b     w2, [w3]
    2c82:	1e 00 78    	mov.w     [w14], w0
    2c84:	40 00 90    	mov.w     [w0+8], w0
    2c86:	9e 00 78    	mov.w     [w14], w1
    2c88:	c1 00 90    	mov.w     [w1+8], w1
    2c8a:	11 01 78    	mov.w     [w1], w2
    2c8c:	9e 00 78    	mov.w     [w14], w1
    2c8e:	a1 48 90    	mov.b     [w1+10], w1
    2c90:	81 80 fb    	ze        w1, w1
    2c92:	f3 03 20    	mov.w     #0x3f, w3
    2c94:	81 18 dd    	sl.w      w3, w1, w1
    2c96:	82 80 70    	ior.w     w1, w2, w1
    2c98:	01 08 78    	mov.w     w1, [w0]
    2c9a:	10 3a 80    	mov.w     0x742, w0
    2c9c:	00 01 78    	mov.w     w0, w2
    2c9e:	02 60 a0    	bset.w    w2, #0x6
    2ca0:	60 04 20    	mov.w     #0x46, w0
    2ca2:	71 05 20    	mov.w     #0x57, w1
    2ca4:	23 74 20    	mov.w     #0x742, w3
    2ca6:	80 49 78    	mov.b     w0, [w3]
    2ca8:	81 49 78    	mov.b     w1, [w3]
    2caa:	82 49 78    	mov.b     w2, [w3]
    2cac:	1e 00 78    	mov.w     [w14], w0
    2cae:	00 08 90    	mov.w     [w0+16], w0
    2cb0:	80 00 eb    	clr.w     w1
    2cb2:	01 08 98    	mov.w     w1, [w0+16]
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	00 08 90    	mov.w     [w0+16], w0
    2cb8:	01 02 07    	rcall     0x30bc <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2cba:	1e 00 78    	mov.w     [w14], w0
    2cbc:	80 00 eb    	clr.w     w1
    2cbe:	01 08 98    	mov.w     w1, [w0+16]

00002cc0 <.L28>:
    2cc0:	1e 00 78    	mov.w     [w14], w0
    2cc2:	10 08 90    	mov.w     [w0+18], w0
    2cc4:	00 00 e0    	cp0.w     w0
    2cc6:	2f 00 32    	bra       Z, 0x2d26 <.L29>
    2cc8:	11 3a 80    	mov.w     0x742, w1
    2cca:	f0 0b 20    	mov.w     #0xbf, w0
    2ccc:	00 81 60    	and.w     w1, w0, w2
    2cce:	60 04 20    	mov.w     #0x46, w0
    2cd0:	71 05 20    	mov.w     #0x57, w1
    2cd2:	23 74 20    	mov.w     #0x742, w3
    2cd4:	80 49 78    	mov.b     w0, [w3]
    2cd6:	81 49 78    	mov.b     w1, [w3]
    2cd8:	82 49 78    	mov.b     w2, [w3]
    2cda:	1e 00 78    	mov.w     [w14], w0
    2cdc:	10 08 90    	mov.w     [w0+18], w0
    2cde:	70 00 90    	mov.w     [w0+14], w0
    2ce0:	9e 00 78    	mov.w     [w14], w1
    2ce2:	91 08 90    	mov.w     [w1+18], w1
    2ce4:	f1 00 90    	mov.w     [w1+14], w1
    2ce6:	11 01 78    	mov.w     [w1], w2
    2ce8:	9e 00 78    	mov.w     [w14], w1
    2cea:	91 08 90    	mov.w     [w1+18], w1
    2cec:	a1 48 90    	mov.b     [w1+10], w1
    2cee:	81 80 fb    	ze        w1, w1
    2cf0:	f3 03 20    	mov.w     #0x3f, w3
    2cf2:	81 18 dd    	sl.w      w3, w1, w1
    2cf4:	81 80 ea    	com.w     w1, w1
    2cf6:	81 00 61    	and.w     w2, w1, w1
    2cf8:	01 08 78    	mov.w     w1, [w0]
    2cfa:	10 3a 80    	mov.w     0x742, w0
    2cfc:	00 01 78    	mov.w     w0, w2
    2cfe:	02 60 a0    	bset.w    w2, #0x6
    2d00:	60 04 20    	mov.w     #0x46, w0
    2d02:	71 05 20    	mov.w     #0x57, w1
    2d04:	23 74 20    	mov.w     #0x742, w3
    2d06:	80 49 78    	mov.b     w0, [w3]
    2d08:	81 49 78    	mov.b     w1, [w3]
    2d0a:	82 49 78    	mov.b     w2, [w3]
    2d0c:	1e 00 78    	mov.w     [w14], w0
    2d0e:	10 08 90    	mov.w     [w0+18], w0
    2d10:	80 00 eb    	clr.w     w1
    2d12:	01 08 98    	mov.w     w1, [w0+16]
    2d14:	1e 00 78    	mov.w     [w14], w0
    2d16:	10 08 90    	mov.w     [w0+18], w0
    2d18:	f8 01 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2d1a:	1e 00 78    	mov.w     [w14], w0
    2d1c:	10 08 90    	mov.w     [w0+18], w0
    2d1e:	52 02 07    	rcall     0x31c4 <_pin_set> <L0> <.LFB8> <.LFE7>
    2d20:	1e 00 78    	mov.w     [w14], w0
    2d22:	80 00 eb    	clr.w     w1
    2d24:	11 08 98    	mov.w     w1, [w0+18]

00002d26 <.L29>:
    2d26:	1e 00 78    	mov.w     [w14], w0
    2d28:	20 08 90    	mov.w     [w0+20], w0
    2d2a:	00 00 e0    	cp0.w     w0
    2d2c:	2f 00 32    	bra       Z, 0x2d8c <.L27>
    2d2e:	11 3a 80    	mov.w     0x742, w1
    2d30:	f0 0b 20    	mov.w     #0xbf, w0
    2d32:	00 81 60    	and.w     w1, w0, w2
    2d34:	60 04 20    	mov.w     #0x46, w0
    2d36:	71 05 20    	mov.w     #0x57, w1
    2d38:	23 74 20    	mov.w     #0x742, w3
    2d3a:	80 49 78    	mov.b     w0, [w3]
    2d3c:	81 49 78    	mov.b     w1, [w3]
    2d3e:	82 49 78    	mov.b     w2, [w3]
    2d40:	1e 00 78    	mov.w     [w14], w0
    2d42:	20 08 90    	mov.w     [w0+20], w0
    2d44:	70 00 90    	mov.w     [w0+14], w0
    2d46:	9e 00 78    	mov.w     [w14], w1
    2d48:	a1 08 90    	mov.w     [w1+20], w1
    2d4a:	f1 00 90    	mov.w     [w1+14], w1
    2d4c:	11 01 78    	mov.w     [w1], w2
    2d4e:	9e 00 78    	mov.w     [w14], w1
    2d50:	a1 08 90    	mov.w     [w1+20], w1
    2d52:	a1 48 90    	mov.b     [w1+10], w1
    2d54:	81 80 fb    	ze        w1, w1
    2d56:	f3 03 20    	mov.w     #0x3f, w3
    2d58:	81 18 dd    	sl.w      w3, w1, w1
    2d5a:	81 80 ea    	com.w     w1, w1
    2d5c:	81 00 61    	and.w     w2, w1, w1
    2d5e:	01 08 78    	mov.w     w1, [w0]
    2d60:	10 3a 80    	mov.w     0x742, w0
    2d62:	00 01 78    	mov.w     w0, w2
    2d64:	02 60 a0    	bset.w    w2, #0x6
    2d66:	60 04 20    	mov.w     #0x46, w0
    2d68:	71 05 20    	mov.w     #0x57, w1
    2d6a:	23 74 20    	mov.w     #0x742, w3
    2d6c:	80 49 78    	mov.b     w0, [w3]
    2d6e:	81 49 78    	mov.b     w1, [w3]
    2d70:	82 49 78    	mov.b     w2, [w3]
    2d72:	1e 00 78    	mov.w     [w14], w0
    2d74:	20 08 90    	mov.w     [w0+20], w0
    2d76:	80 00 eb    	clr.w     w1
    2d78:	01 08 98    	mov.w     w1, [w0+16]
    2d7a:	1e 00 78    	mov.w     [w14], w0
    2d7c:	20 08 90    	mov.w     [w0+20], w0
    2d7e:	c5 01 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2d80:	1e 00 78    	mov.w     [w14], w0
    2d82:	20 08 90    	mov.w     [w0+20], w0
    2d84:	34 02 07    	rcall     0x31ee <_pin_clear> <L0> <.LFB9> <.LFE8>
    2d86:	1e 00 78    	mov.w     [w14], w0
    2d88:	80 00 eb    	clr.w     w1
    2d8a:	21 08 98    	mov.w     w1, [w0+20]

00002d8c <.L27>:
    2d8c:	00 80 fa    	ulnk      
    2d8e:	00 00 06    	return    

00002d90 <_spi_transfer>:
    2d90:	04 00 fa    	lnk       #0x4
    2d92:	00 0f 78    	mov.w     w0, [w14]
    2d94:	21 47 98    	mov.b     w1, [w14+2]
    2d96:	1e 00 78    	mov.w     [w14], w0
    2d98:	30 00 90    	mov.w     [w0+6], w0
    2d9a:	ae 40 90    	mov.b     [w14+2], w1
    2d9c:	81 80 fb    	ze        w1, w1
    2d9e:	01 08 78    	mov.w     w1, [w0]
    2da0:	00 00 00    	nop       

00002da2 <.L32>:
    2da2:	1e 00 78    	mov.w     [w14], w0
    2da4:	10 00 78    	mov.w     [w0], w0
    2da6:	10 00 78    	mov.w     [w0], w0
    2da8:	61 00 60    	and.w     w0, #0x1, w0
    2daa:	00 00 e0    	cp0.w     w0
    2dac:	fa ff 32    	bra       Z, 0x2da2 <.L32>
    2dae:	1e 00 78    	mov.w     [w14], w0
    2db0:	30 00 90    	mov.w     [w0+6], w0
    2db2:	10 00 78    	mov.w     [w0], w0
    2db4:	00 40 78    	mov.b     w0, w0
    2db6:	00 80 fa    	ulnk      
    2db8:	00 00 06    	return    

00002dba <___digitalWrite>:
    2dba:	04 00 fa    	lnk       #0x4
    2dbc:	00 0f 78    	mov.w     w0, [w14]
    2dbe:	11 07 98    	mov.w     w1, [w14+2]
    2dc0:	1e 00 90    	mov.w     [w14+2], w0
    2dc2:	00 00 e0    	cp0.w     w0
    2dc4:	0d 00 32    	bra       Z, 0x2de0 <.L2>
    2dc6:	1e 00 78    	mov.w     [w14], w0
    2dc8:	10 00 78    	mov.w     [w0], w0
    2dca:	9e 00 78    	mov.w     [w14], w1
    2dcc:	91 00 78    	mov.w     [w1], w1
    2dce:	11 01 78    	mov.w     [w1], w2
    2dd0:	9e 00 78    	mov.w     [w14], w1
    2dd2:	e1 40 90    	mov.b     [w1+6], w1
    2dd4:	81 80 fb    	ze        w1, w1
    2dd6:	13 00 20    	mov.w     #0x1, w3
    2dd8:	81 18 dd    	sl.w      w3, w1, w1
    2dda:	82 80 70    	ior.w     w1, w2, w1
    2ddc:	01 08 78    	mov.w     w1, [w0]
    2dde:	0d 00 37    	bra       0x2dfa <.L1>

00002de0 <.L2>:
    2de0:	1e 00 78    	mov.w     [w14], w0
    2de2:	10 00 78    	mov.w     [w0], w0
    2de4:	9e 00 78    	mov.w     [w14], w1
    2de6:	91 00 78    	mov.w     [w1], w1
    2de8:	11 01 78    	mov.w     [w1], w2
    2dea:	9e 00 78    	mov.w     [w14], w1
    2dec:	e1 40 90    	mov.b     [w1+6], w1
    2dee:	81 80 fb    	ze        w1, w1
    2df0:	13 00 20    	mov.w     #0x1, w3
    2df2:	81 18 dd    	sl.w      w3, w1, w1
    2df4:	81 80 ea    	com.w     w1, w1
    2df6:	81 00 61    	and.w     w2, w1, w1
    2df8:	01 08 78    	mov.w     w1, [w0]

00002dfa <.L1>:
    2dfa:	00 80 fa    	ulnk      
    2dfc:	00 00 06    	return    

00002dfe <___digitalRead>:
    2dfe:	02 00 fa    	lnk       #0x2
    else
        bitclear(self->port, self->bit);
}

uint16_t __digitalRead(_PIN *self) {
    2e00:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2e02:	1e 00 78    	mov.w     [w14], w0
    2e04:	10 00 78    	mov.w     [w0], w0
    2e06:	90 00 78    	mov.w     [w0], w1
    2e08:	1e 00 78    	mov.w     [w14], w0
    2e0a:	60 40 90    	mov.b     [w0+6], w0
    2e0c:	00 80 fb    	ze        w0, w0
    2e0e:	12 00 20    	mov.w     #0x1, w2
    2e10:	00 10 dd    	sl.w      w2, w0, w0
    2e12:	00 80 60    	and.w     w1, w0, w0
    2e14:	00 f0 a7    	btsc.w    w0, #0xf
    2e16:	00 00 ea    	neg.w     w0, w0
    2e18:	00 00 ea    	neg.w     w0, w0
    2e1a:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2e1c:	00 80 fa    	ulnk      
    2e1e:	00 00 06    	return    

00002e20 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2e20:	02 00 fa    	lnk       #0x2
    2e22:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = self->annum;
    2e24:	1e 00 78    	mov.w     [w14], w0
    2e26:	40 00 90    	mov.w     [w0+8], w0
    2e28:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.SAMP = 1;
    2e2a:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE==0) {}
    2e2c:	00 00 00    	nop       

00002e2e <.L6>:
    2e2e:	00 19 80    	mov.w     0x320, w0
    2e30:	61 00 60    	and.w     w0, #0x1, w0
    2e32:	00 00 e0    	cp0.w     w0
    2e34:	fc ff 32    	bra       Z, 0x2e2e <.L6>
    return ADC1BUF0;
    2e36:	00 18 80    	mov.w     0x300, w0
}
    2e38:	00 80 fa    	ulnk      
    2e3a:	00 00 06    	return    

00002e3c <_init_pin>:

void init_pin(void) {
    2e3c:	02 00 fa    	lnk       #0x2
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e3e:	40 6d 20    	mov.w     #0x6d4, w0
    2e40:	80 1f 78    	mov.w     w0, [w15++]
    2e42:	47 01 20    	mov.w     #0x14, w7
    2e44:	00 43 eb    	clr.b     w6
    2e46:	80 82 eb    	setm.w    w5
    2e48:	54 c0 b3    	mov.b     #0x5, w4
    2e4a:	80 01 eb    	clr.w     w3
    2e4c:	82 2d 20    	mov.w     #0x2d8, w2
    2e4e:	a1 2d 20    	mov.w     #0x2da, w1
    2e50:	a0 85 20    	mov.w     #0x85a, w0
    2e52:	08 01 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2e54:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e56:	80 6d 20    	mov.w     #0x6d8, w0
    2e58:	80 1f 78    	mov.w     w0, [w15++]
    2e5a:	97 01 20    	mov.w     #0x19, w7
    2e5c:	86 c0 b3    	mov.b     #0x8, w6
    2e5e:	80 82 eb    	setm.w    w5
    2e60:	44 c0 b3    	mov.b     #0x4, w4
    2e62:	80 01 eb    	clr.w     w3
    2e64:	82 2d 20    	mov.w     #0x2d8, w2
    2e66:	a1 2d 20    	mov.w     #0x2da, w1
    2e68:	00 87 20    	mov.w     #0x870, w0
    2e6a:	fc 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2e6c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2e6e:	a0 6c 20    	mov.w     #0x6ca, w0
    2e70:	80 1f 78    	mov.w     w0, [w15++]
    2e72:	a7 00 20    	mov.w     #0xa, w7
    2e74:	00 43 eb    	clr.b     w6
    2e76:	80 82 eb    	setm.w    w5
    2e78:	44 c0 b3    	mov.b     #0x4, w4
    2e7a:	80 01 eb    	clr.w     w3
    2e7c:	82 2e 20    	mov.w     #0x2e8, w2
    2e7e:	a1 2e 20    	mov.w     #0x2ea, w1
    2e80:	60 88 20    	mov.w     #0x886, w0
    2e82:	f0 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2e84:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2e86:	00 6d 20    	mov.w     #0x6d0, w0
    2e88:	80 1f 78    	mov.w     w0, [w15++]
    2e8a:	17 01 20    	mov.w     #0x11, w7
    2e8c:	86 c0 b3    	mov.b     #0x8, w6
    2e8e:	80 82 eb    	setm.w    w5
    2e90:	54 c0 b3    	mov.b     #0x5, w4
    2e92:	80 01 eb    	clr.w     w3
    2e94:	82 2e 20    	mov.w     #0x2e8, w2
    2e96:	a1 2e 20    	mov.w     #0x2ea, w1
    2e98:	c0 89 20    	mov.w     #0x89c, w0
    2e9a:	e4 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2e9c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2e9e:	c0 6d 20    	mov.w     #0x6dc, w0
    2ea0:	80 1f 78    	mov.w     w0, [w15++]
    2ea2:	d7 01 20    	mov.w     #0x1d, w7
    2ea4:	86 c0 b3    	mov.b     #0x8, w6
    2ea6:	f5 00 20    	mov.w     #0xf, w5
    2ea8:	f4 c0 b3    	mov.b     #0xf, w4
    2eaa:	23 4e 20    	mov.w     #0x4e2, w3
    2eac:	82 2c 20    	mov.w     #0x2c8, w2
    2eae:	a1 2c 20    	mov.w     #0x2ca, w1
    2eb0:	20 8b 20    	mov.w     #0x8b2, w0
    2eb2:	d8 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2eb4:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2eb6:	00 6d 20    	mov.w     #0x6d0, w0
    2eb8:	80 1f 78    	mov.w     w0, [w15++]
    2eba:	07 01 20    	mov.w     #0x10, w7
    2ebc:	00 43 eb    	clr.b     w6
    2ebe:	80 82 eb    	setm.w    w5
    2ec0:	34 c0 b3    	mov.b     #0x3, w4
    2ec2:	80 01 eb    	clr.w     w3
    2ec4:	82 2e 20    	mov.w     #0x2e8, w2
    2ec6:	a1 2e 20    	mov.w     #0x2ea, w1
    2ec8:	80 8c 20    	mov.w     #0x8c8, w0
    2eca:	cc 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ecc:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ece:	20 6c 20    	mov.w     #0x6c2, w0
    2ed0:	80 1f 78    	mov.w     w0, [w15++]
    2ed2:	27 00 20    	mov.w     #0x2, w7
    2ed4:	00 43 eb    	clr.b     w6
    2ed6:	80 82 eb    	setm.w    w5
    2ed8:	84 c0 b3    	mov.b     #0x8, w4
    2eda:	80 01 eb    	clr.w     w3
    2edc:	82 2d 20    	mov.w     #0x2d8, w2
    2ede:	a1 2d 20    	mov.w     #0x2da, w1
    2ee0:	e0 8d 20    	mov.w     #0x8de, w0
    2ee2:	c0 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2ee4:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ee6:	c0 6c 20    	mov.w     #0x6cc, w0
    2ee8:	80 1f 78    	mov.w     w0, [w15++]
    2eea:	c7 00 20    	mov.w     #0xc, w7
    2eec:	00 43 eb    	clr.b     w6
    2eee:	80 82 eb    	setm.w    w5
    2ef0:	b4 c0 b3    	mov.b     #0xb, w4
    2ef2:	80 01 eb    	clr.w     w3
    2ef4:	82 2d 20    	mov.w     #0x2d8, w2
    2ef6:	a1 2d 20    	mov.w     #0x2da, w1
    2ef8:	40 8f 20    	mov.w     #0x8f4, w0
    2efa:	b4 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2efc:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2efe:	40 6c 20    	mov.w     #0x6c4, w0
    2f00:	80 1f 78    	mov.w     w0, [w15++]
    2f02:	47 00 20    	mov.w     #0x4, w7
    2f04:	00 43 eb    	clr.b     w6
    2f06:	80 82 eb    	setm.w    w5
    2f08:	94 c0 b3    	mov.b     #0x9, w4
    2f0a:	80 01 eb    	clr.w     w3
    2f0c:	82 2d 20    	mov.w     #0x2d8, w2
    2f0e:	a1 2d 20    	mov.w     #0x2da, w1
    2f10:	a0 90 20    	mov.w     #0x90a, w0
    2f12:	a8 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f14:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2f16:	20 6c 20    	mov.w     #0x6c2, w0
    2f18:	80 1f 78    	mov.w     w0, [w15++]
    2f1a:	37 00 20    	mov.w     #0x3, w7
    2f1c:	86 c0 b3    	mov.b     #0x8, w6
    2f1e:	80 82 eb    	setm.w    w5
    2f20:	a4 c0 b3    	mov.b     #0xa, w4
    2f22:	80 01 eb    	clr.w     w3
    2f24:	82 2d 20    	mov.w     #0x2d8, w2
    2f26:	a1 2d 20    	mov.w     #0x2da, w1
    2f28:	00 92 20    	mov.w     #0x920, w0
    2f2a:	9c 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f2c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2f2e:	a0 6c 20    	mov.w     #0x6ca, w0
    2f30:	80 1f 78    	mov.w     w0, [w15++]
    2f32:	b7 00 20    	mov.w     #0xb, w7
    2f34:	86 c0 b3    	mov.b     #0x8, w6
    2f36:	80 82 eb    	setm.w    w5
    2f38:	00 42 eb    	clr.b     w4
    2f3a:	80 01 eb    	clr.w     w3
    2f3c:	82 2d 20    	mov.w     #0x2d8, w2
    2f3e:	a1 2d 20    	mov.w     #0x2da, w1
    2f40:	60 93 20    	mov.w     #0x936, w0
    2f42:	90 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f44:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2f46:	80 6d 20    	mov.w     #0x6d8, w0
    2f48:	80 1f 78    	mov.w     w0, [w15++]
    2f4a:	87 01 20    	mov.w     #0x18, w7
    2f4c:	00 43 eb    	clr.b     w6
    2f4e:	80 82 eb    	setm.w    w5
    2f50:	14 c0 b3    	mov.b     #0x1, w4
    2f52:	80 01 eb    	clr.w     w3
    2f54:	82 2d 20    	mov.w     #0x2d8, w2
    2f56:	a1 2d 20    	mov.w     #0x2da, w1
    2f58:	c0 94 20    	mov.w     #0x94c, w0
    2f5a:	84 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f5c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2f5e:	60 6d 20    	mov.w     #0x6d6, w0
    2f60:	80 1f 78    	mov.w     w0, [w15++]
    2f62:	77 01 20    	mov.w     #0x17, w7
    2f64:	86 c0 b3    	mov.b     #0x8, w6
    2f66:	80 82 eb    	setm.w    w5
    2f68:	24 c0 b3    	mov.b     #0x2, w4
    2f6a:	80 01 eb    	clr.w     w3
    2f6c:	82 2d 20    	mov.w     #0x2d8, w2
    2f6e:	a1 2d 20    	mov.w     #0x2da, w1
    2f70:	20 96 20    	mov.w     #0x962, w0
    2f72:	78 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f74:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2f76:	60 6d 20    	mov.w     #0x6d6, w0
    2f78:	80 1f 78    	mov.w     w0, [w15++]
    2f7a:	67 01 20    	mov.w     #0x16, w7
    2f7c:	00 43 eb    	clr.b     w6
    2f7e:	80 82 eb    	setm.w    w5
    2f80:	34 c0 b3    	mov.b     #0x3, w4
    2f82:	80 01 eb    	clr.w     w3
    2f84:	82 2d 20    	mov.w     #0x2d8, w2
    2f86:	a1 2d 20    	mov.w     #0x2da, w1
    2f88:	80 97 20    	mov.w     #0x978, w0
    2f8a:	6c 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2f8c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f8e:	00 6c 20    	mov.w     #0x6c0, w0
    2f90:	80 1f 78    	mov.w     w0, [w15++]
    2f92:	80 03 eb    	clr.w     w7
    2f94:	00 43 eb    	clr.b     w6
    2f96:	80 02 eb    	clr.w     w5
    2f98:	00 42 eb    	clr.b     w4
    2f9a:	23 4e 20    	mov.w     #0x4e2, w3
    2f9c:	82 2c 20    	mov.w     #0x2c8, w2
    2f9e:	a1 2c 20    	mov.w     #0x2ca, w1
    2fa0:	c0 9f 20    	mov.w     #0x9fc, w0
    2fa2:	60 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2fa4:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fa6:	00 6c 20    	mov.w     #0x6c0, w0
    2fa8:	80 1f 78    	mov.w     w0, [w15++]
    2faa:	17 00 20    	mov.w     #0x1, w7
    2fac:	86 c0 b3    	mov.b     #0x8, w6
    2fae:	15 00 20    	mov.w     #0x1, w5
    2fb0:	14 c0 b3    	mov.b     #0x1, w4
    2fb2:	23 4e 20    	mov.w     #0x4e2, w3
    2fb4:	82 2c 20    	mov.w     #0x2c8, w2
    2fb6:	a1 2c 20    	mov.w     #0x2ca, w1
    2fb8:	60 9e 20    	mov.w     #0x9e6, w0
    2fba:	54 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2fbc:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fbe:	c0 6c 20    	mov.w     #0x6cc, w0
    2fc0:	80 1f 78    	mov.w     w0, [w15++]
    2fc2:	d7 00 20    	mov.w     #0xd, w7
    2fc4:	86 c0 b3    	mov.b     #0x8, w6
    2fc6:	25 00 20    	mov.w     #0x2, w5
    2fc8:	24 c0 b3    	mov.b     #0x2, w4
    2fca:	23 4e 20    	mov.w     #0x4e2, w3
    2fcc:	82 2c 20    	mov.w     #0x2c8, w2
    2fce:	a1 2c 20    	mov.w     #0x2ca, w1
    2fd0:	00 9d 20    	mov.w     #0x9d0, w0
    2fd2:	48 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2fd4:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fd6:	00 00 eb    	clr.w     w0
    2fd8:	80 1f 78    	mov.w     w0, [w15++]
    2fda:	80 83 eb    	setm.w    w7
    2fdc:	00 43 eb    	clr.b     w6
    2fde:	35 00 20    	mov.w     #0x3, w5
    2fe0:	34 c0 b3    	mov.b     #0x3, w4
    2fe2:	23 4e 20    	mov.w     #0x4e2, w3
    2fe4:	82 2c 20    	mov.w     #0x2c8, w2
    2fe6:	a1 2c 20    	mov.w     #0x2ca, w1
    2fe8:	a0 9b 20    	mov.w     #0x9ba, w0
    2fea:	3c 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    2fec:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fee:	c0 6d 20    	mov.w     #0x6dc, w0
    2ff0:	80 1f 78    	mov.w     w0, [w15++]
    2ff2:	c7 01 20    	mov.w     #0x1c, w7
    2ff4:	00 43 eb    	clr.b     w6
    2ff6:	45 00 20    	mov.w     #0x4, w5
    2ff8:	44 c0 b3    	mov.b     #0x4, w4
    2ffa:	23 4e 20    	mov.w     #0x4e2, w3
    2ffc:	82 2c 20    	mov.w     #0x2c8, w2
    2ffe:	a1 2c 20    	mov.w     #0x2ca, w1
    3000:	40 9a 20    	mov.w     #0x9a4, w0
    3002:	30 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    3004:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3006:	20 6d 20    	mov.w     #0x6d2, w0
    3008:	80 1f 78    	mov.w     w0, [w15++]
    300a:	27 01 20    	mov.w     #0x12, w7
    300c:	00 43 eb    	clr.b     w6
    300e:	55 00 20    	mov.w     #0x5, w5
    3010:	54 c0 b3    	mov.b     #0x5, w4
    3012:	23 4e 20    	mov.w     #0x4e2, w3
    3014:	82 2c 20    	mov.w     #0x2c8, w2
    3016:	a1 2c 20    	mov.w     #0x2ca, w1
    3018:	e0 98 20    	mov.w     #0x98e, w0
    301a:	24 00 07    	rcall     0x3064 <_pin_init> <L0> <.LFB4> <.LFE3>
    301c:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    301e:	00 00 eb    	clr.w     w0
    3020:	00 0f 78    	mov.w     w0, [w14]
    3022:	07 00 37    	bra       0x3032 <.L8>

00003024 <.L9>:
        pin_digitalIn(&D[i]);
    3024:	1e 00 78    	mov.w     [w14], w0
    3026:	76 00 b9    	mul.su    w0, #0x16, w0
    3028:	80 00 78    	mov.w     w0, w1
    302a:	a0 85 20    	mov.w     #0x85a, w0
    302c:	00 80 40    	add.w     w1, w0, w0
    302e:	46 00 07    	rcall     0x30bc <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    3030:	1e 0f e8    	inc.w     [w14], [w14]

00003032 <.L8>:
    3032:	1e 00 78    	mov.w     [w14], w0
    3034:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3036:	f6 ff 36    	bra       LEU, 0x3024 <.L9>
    for (i = 0; i<6; i++)
    3038:	00 00 eb    	clr.w     w0
    303a:	00 0f 78    	mov.w     w0, [w14]
    303c:	07 00 37    	bra       0x304c <.L10>

0000303e <.L11>:
        pin_analogIn(&A[i]);
    303e:	1e 00 78    	mov.w     [w14], w0
    3040:	76 00 b9    	mul.su    w0, #0x16, w0
    3042:	80 00 78    	mov.w     w0, w1
    3044:	e0 98 20    	mov.w     #0x98e, w0
    3046:	00 80 40    	add.w     w1, w0, w0
    3048:	95 00 07    	rcall     0x3174 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    304a:	1e 0f e8    	inc.w     [w14], [w14]

0000304c <.L10>:
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3050:	f6 ff 36    	bra       LEU, 0x303e <.L11>

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3052:	00 2e 20    	mov.w     #0x2e0, w0
    3054:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    3056:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    3058:	00 c4 20    	mov.w     #0xc40, w0
    305a:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = 0;
    305c:	28 23 ef    	clr.w     0x328
    AD1CON1bits.ADON = 1;
    305e:	21 e3 a8    	bset.b    0x321, #0x7
}
    3060:	00 80 fa    	ulnk      
    3062:	00 00 06    	return    

00003064 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3064:	10 00 fa    	lnk       #0x10
    3066:	00 0f 78    	mov.w     w0, [w14]
    3068:	11 07 98    	mov.w     w1, [w14+2]
    306a:	22 07 98    	mov.w     w2, [w14+4]
    306c:	33 07 98    	mov.w     w3, [w14+6]
    306e:	04 4f 98    	mov.b     w4, [w14+8]
    3070:	55 07 98    	mov.w     w5, [w14+10]
    3072:	46 4f 98    	mov.b     w6, [w14+12]
    3074:	77 07 98    	mov.w     w7, [w14+14]
    self->port = port;
    3076:	1e 00 78    	mov.w     [w14], w0
    3078:	9e 00 90    	mov.w     [w14+2], w1
    307a:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    307c:	1e 00 78    	mov.w     [w14], w0
    307e:	ae 00 90    	mov.w     [w14+4], w1
    3080:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    3082:	1e 00 78    	mov.w     [w14], w0
    3084:	be 00 90    	mov.w     [w14+6], w1
    3086:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    3088:	1e 00 78    	mov.w     [w14], w0
    308a:	8e 48 90    	mov.b     [w14+8], w1
    308c:	61 40 98    	mov.b     w1, [w0+6]
    self->annum = annum;
    308e:	1e 00 78    	mov.w     [w14], w0
    3090:	de 00 90    	mov.w     [w14+10], w1
    3092:	41 00 98    	mov.w     w1, [w0+8]
    self->rpshift = rpshift;
    3094:	1e 00 78    	mov.w     [w14], w0
    3096:	ce 48 90    	mov.b     [w14+12], w1
    3098:	21 48 98    	mov.b     w1, [w0+10]
    self->rpnum = rpnum;
    309a:	fe 00 90    	mov.w     [w14+14], w1
    309c:	1e 00 78    	mov.w     [w14], w0
    309e:	61 00 98    	mov.w     w1, [w0+12]
    self->rpor = rpor;
    30a0:	1e 00 78    	mov.w     [w14], w0
    30a2:	ce b8 97    	mov.w     [w14-8], w1
    30a4:	71 00 98    	mov.w     w1, [w0+14]
    self->owner = NULL;
    30a6:	1e 00 78    	mov.w     [w14], w0
    30a8:	80 00 eb    	clr.w     w1
    30aa:	01 08 98    	mov.w     w1, [w0+16]
    self->write = NULL;
    30ac:	1e 00 78    	mov.w     [w14], w0
    30ae:	80 00 eb    	clr.w     w1
    30b0:	11 08 98    	mov.w     w1, [w0+18]
    self->read = NULL;
    30b2:	1e 00 78    	mov.w     [w14], w0
    30b4:	80 00 eb    	clr.w     w1
    30b6:	21 08 98    	mov.w     w1, [w0+20]
}
    30b8:	00 80 fa    	ulnk      
    30ba:	00 00 06    	return    

000030bc <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    30bc:	02 00 fa    	lnk       #0x2
    30be:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    30c0:	1e 00 78    	mov.w     [w14], w0
    30c2:	20 00 90    	mov.w     [w0+4], w0
    30c4:	00 00 e0    	cp0.w     w0
    30c6:	0d 00 32    	bra       Z, 0x30e2 <.L14>
        bitclear(self->ans, self->bit);
    30c8:	1e 00 78    	mov.w     [w14], w0
    30ca:	20 00 90    	mov.w     [w0+4], w0
    30cc:	9e 00 78    	mov.w     [w14], w1
    30ce:	a1 00 90    	mov.w     [w1+4], w1
    30d0:	11 01 78    	mov.w     [w1], w2
    30d2:	9e 00 78    	mov.w     [w14], w1
    30d4:	e1 40 90    	mov.b     [w1+6], w1
    30d6:	81 80 fb    	ze        w1, w1
    30d8:	13 00 20    	mov.w     #0x1, w3
    30da:	81 18 dd    	sl.w      w3, w1, w1
    30dc:	81 80 ea    	com.w     w1, w1
    30de:	81 00 61    	and.w     w2, w1, w1
    30e0:	01 08 78    	mov.w     w1, [w0]

000030e2 <.L14>:
    bitset(self->tris, self->bit);
    30e2:	1e 00 78    	mov.w     [w14], w0
    30e4:	10 00 90    	mov.w     [w0+2], w0
    30e6:	9e 00 78    	mov.w     [w14], w1
    30e8:	91 00 90    	mov.w     [w1+2], w1
    30ea:	11 01 78    	mov.w     [w1], w2
    30ec:	9e 00 78    	mov.w     [w14], w1
    30ee:	e1 40 90    	mov.b     [w1+6], w1
    30f0:	81 80 fb    	ze        w1, w1
    30f2:	13 00 20    	mov.w     #0x1, w3
    30f4:	81 18 dd    	sl.w      w3, w1, w1
    30f6:	82 80 70    	ior.w     w1, w2, w1
    30f8:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    30fa:	1e 00 78    	mov.w     [w14], w0
    30fc:	80 00 eb    	clr.w     w1
    30fe:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;    
    3100:	1e 00 78    	mov.w     [w14], w0
    3102:	e1 df 22    	mov.w     #0x2dfe, w1
    3104:	21 08 98    	mov.w     w1, [w0+20]
}
    3106:	00 80 fa    	ulnk      
    3108:	00 00 06    	return    

0000310a <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    310a:	02 00 fa    	lnk       #0x2
    310c:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    310e:	1e 00 78    	mov.w     [w14], w0
    3110:	20 00 90    	mov.w     [w0+4], w0
    3112:	00 00 e0    	cp0.w     w0
    3114:	0d 00 32    	bra       Z, 0x3130 <.L16>
        bitclear(self->ans, self->bit);
    3116:	1e 00 78    	mov.w     [w14], w0
    3118:	20 00 90    	mov.w     [w0+4], w0
    311a:	9e 00 78    	mov.w     [w14], w1
    311c:	a1 00 90    	mov.w     [w1+4], w1
    311e:	11 01 78    	mov.w     [w1], w2
    3120:	9e 00 78    	mov.w     [w14], w1
    3122:	e1 40 90    	mov.b     [w1+6], w1
    3124:	81 80 fb    	ze        w1, w1
    3126:	13 00 20    	mov.w     #0x1, w3
    3128:	81 18 dd    	sl.w      w3, w1, w1
    312a:	81 80 ea    	com.w     w1, w1
    312c:	81 00 61    	and.w     w2, w1, w1
    312e:	01 08 78    	mov.w     w1, [w0]

00003130 <.L16>:
    bitclear(self->port, self->bit);
    3130:	1e 00 78    	mov.w     [w14], w0
    3132:	10 00 78    	mov.w     [w0], w0
    3134:	9e 00 78    	mov.w     [w14], w1
    3136:	91 00 78    	mov.w     [w1], w1
    3138:	11 01 78    	mov.w     [w1], w2
    313a:	9e 00 78    	mov.w     [w14], w1
    313c:	e1 40 90    	mov.b     [w1+6], w1
    313e:	81 80 fb    	ze        w1, w1
    3140:	13 00 20    	mov.w     #0x1, w3
    3142:	81 18 dd    	sl.w      w3, w1, w1
    3144:	81 80 ea    	com.w     w1, w1
    3146:	81 00 61    	and.w     w2, w1, w1
    3148:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    314a:	1e 00 78    	mov.w     [w14], w0
    314c:	10 00 90    	mov.w     [w0+2], w0
    314e:	9e 00 78    	mov.w     [w14], w1
    3150:	91 00 90    	mov.w     [w1+2], w1
    3152:	11 01 78    	mov.w     [w1], w2
    3154:	9e 00 78    	mov.w     [w14], w1
    3156:	e1 40 90    	mov.b     [w1+6], w1
    3158:	81 80 fb    	ze        w1, w1
    315a:	13 00 20    	mov.w     #0x1, w3
    315c:	81 18 dd    	sl.w      w3, w1, w1
    315e:	81 80 ea    	com.w     w1, w1
    3160:	81 00 61    	and.w     w2, w1, w1
    3162:	01 08 78    	mov.w     w1, [w0]
    self->write = __digitalWrite;
    3164:	1e 00 78    	mov.w     [w14], w0
    3166:	a1 db 22    	mov.w     #0x2dba, w1
    3168:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;
    316a:	1e 00 78    	mov.w     [w14], w0
    316c:	e1 df 22    	mov.w     #0x2dfe, w1
    316e:	21 08 98    	mov.w     w1, [w0+20]
}
    3170:	00 80 fa    	ulnk      
    3172:	00 00 06    	return    

00003174 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3174:	02 00 fa    	lnk       #0x2
    3176:	00 0f 78    	mov.w     w0, [w14]
    if (!(self->ans))
    3178:	1e 00 78    	mov.w     [w14], w0
    317a:	20 00 90    	mov.w     [w0+4], w0
    317c:	00 00 e0    	cp0.w     w0
    317e:	1f 00 32    	bra       Z, 0x31be <.L20>
        return;
    bitset(self->tris, self->bit);
    3180:	1e 00 78    	mov.w     [w14], w0
    3182:	10 00 90    	mov.w     [w0+2], w0
    3184:	9e 00 78    	mov.w     [w14], w1
    3186:	91 00 90    	mov.w     [w1+2], w1
    3188:	11 01 78    	mov.w     [w1], w2
    318a:	9e 00 78    	mov.w     [w14], w1
    318c:	e1 40 90    	mov.b     [w1+6], w1
    318e:	81 80 fb    	ze        w1, w1
    3190:	13 00 20    	mov.w     #0x1, w3
    3192:	81 18 dd    	sl.w      w3, w1, w1
    3194:	82 80 70    	ior.w     w1, w2, w1
    3196:	01 08 78    	mov.w     w1, [w0]
    bitset(self->ans, self->bit);
    3198:	1e 00 78    	mov.w     [w14], w0
    319a:	20 00 90    	mov.w     [w0+4], w0
    319c:	9e 00 78    	mov.w     [w14], w1
    319e:	a1 00 90    	mov.w     [w1+4], w1
    31a0:	11 01 78    	mov.w     [w1], w2
    31a2:	9e 00 78    	mov.w     [w14], w1
    31a4:	e1 40 90    	mov.b     [w1+6], w1
    31a6:	81 80 fb    	ze        w1, w1
    31a8:	13 00 20    	mov.w     #0x1, w3
    31aa:	81 18 dd    	sl.w      w3, w1, w1
    31ac:	82 80 70    	ior.w     w1, w2, w1
    31ae:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    31b0:	1e 00 78    	mov.w     [w14], w0
    31b2:	80 00 eb    	clr.w     w1
    31b4:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __analogRead;
    31b6:	1e 00 78    	mov.w     [w14], w0
    31b8:	01 e2 22    	mov.w     #0x2e20, w1
    31ba:	21 08 98    	mov.w     w1, [w0+20]
    31bc:	01 00 37    	bra       0x31c0 <.L17>

000031be <.L20>:
    31be:	00 00 00    	nop       

000031c0 <.L17>:
}
    31c0:	00 80 fa    	ulnk      
    31c2:	00 00 06    	return    

000031c4 <_pin_set>:

void pin_set(_PIN *self) {
    31c4:	02 00 fa    	lnk       #0x2
    31c6:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    31c8:	1e 00 78    	mov.w     [w14], w0
    31ca:	90 08 90    	mov.w     [w0+18], w1
    31cc:	a0 db 22    	mov.w     #0x2dba, w0
    31ce:	80 8f 50    	sub.w     w1, w0, [w15]
    31d0:	0c 00 3a    	bra       NZ, 0x31ea <.L21>
        bitset(self->port, self->bit);
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	10 00 78    	mov.w     [w0], w0
    31d6:	9e 00 78    	mov.w     [w14], w1
    31d8:	91 00 78    	mov.w     [w1], w1
    31da:	11 01 78    	mov.w     [w1], w2
    31dc:	9e 00 78    	mov.w     [w14], w1
    31de:	e1 40 90    	mov.b     [w1+6], w1
    31e0:	81 80 fb    	ze        w1, w1
    31e2:	13 00 20    	mov.w     #0x1, w3
    31e4:	81 18 dd    	sl.w      w3, w1, w1
    31e6:	82 80 70    	ior.w     w1, w2, w1
    31e8:	01 08 78    	mov.w     w1, [w0]

000031ea <.L21>:
}
    31ea:	00 80 fa    	ulnk      
    31ec:	00 00 06    	return    

000031ee <_pin_clear>:

void pin_clear(_PIN *self) {
    31ee:	02 00 fa    	lnk       #0x2
    31f0:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    31f2:	1e 00 78    	mov.w     [w14], w0
    31f4:	90 08 90    	mov.w     [w0+18], w1
    31f6:	a0 db 22    	mov.w     #0x2dba, w0
    31f8:	80 8f 50    	sub.w     w1, w0, [w15]
    31fa:	0d 00 3a    	bra       NZ, 0x3216 <.L23>
        bitclear(self->port, self->bit);
    31fc:	1e 00 78    	mov.w     [w14], w0
    31fe:	10 00 78    	mov.w     [w0], w0
    3200:	9e 00 78    	mov.w     [w14], w1
    3202:	91 00 78    	mov.w     [w1], w1
    3204:	11 01 78    	mov.w     [w1], w2
    3206:	9e 00 78    	mov.w     [w14], w1
    3208:	e1 40 90    	mov.b     [w1+6], w1
    320a:	81 80 fb    	ze        w1, w1
    320c:	13 00 20    	mov.w     #0x1, w3
    320e:	81 18 dd    	sl.w      w3, w1, w1
    3210:	81 80 ea    	com.w     w1, w1
    3212:	81 00 61    	and.w     w2, w1, w1
    3214:	01 08 78    	mov.w     w1, [w0]

00003216 <.L23>:
}
    3216:	00 80 fa    	ulnk      
    3218:	00 00 06    	return    

0000321a <_pin_toggle>:

void pin_toggle(_PIN *self) {
    321a:	02 00 fa    	lnk       #0x2
    321c:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    321e:	1e 00 78    	mov.w     [w14], w0
    3220:	90 08 90    	mov.w     [w0+18], w1
    3222:	a0 db 22    	mov.w     #0x2dba, w0
    3224:	80 8f 50    	sub.w     w1, w0, [w15]
    3226:	0c 00 3a    	bra       NZ, 0x3240 <.L25>
        bitflip(self->port, self->bit);
    3228:	1e 00 78    	mov.w     [w14], w0
    322a:	10 00 78    	mov.w     [w0], w0
    322c:	9e 00 78    	mov.w     [w14], w1
    322e:	91 00 78    	mov.w     [w1], w1
    3230:	11 01 78    	mov.w     [w1], w2
    3232:	9e 00 78    	mov.w     [w14], w1
    3234:	e1 40 90    	mov.b     [w1+6], w1
    3236:	81 80 fb    	ze        w1, w1
    3238:	13 00 20    	mov.w     #0x1, w3
    323a:	81 18 dd    	sl.w      w3, w1, w1
    323c:	81 00 69    	xor.w     w2, w1, w1
    323e:	01 08 78    	mov.w     w1, [w0]

00003240 <.L25>:
}
    3240:	00 80 fa    	ulnk      
    3242:	00 00 06    	return    

00003244 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3244:	04 00 fa    	lnk       #0x4
    3246:	00 0f 78    	mov.w     w0, [w14]
    3248:	11 07 98    	mov.w     w1, [w14+2]
    if (self->write)
    324a:	1e 00 78    	mov.w     [w14], w0
    324c:	10 08 90    	mov.w     [w0+18], w0
    324e:	00 00 e0    	cp0.w     w0
    3250:	05 00 32    	bra       Z, 0x325c <.L27>
        self->write(self, val);
    3252:	1e 00 78    	mov.w     [w14], w0
    3254:	10 09 90    	mov.w     [w0+18], w2
    3256:	9e 00 90    	mov.w     [w14+2], w1
    3258:	1e 00 78    	mov.w     [w14], w0
    325a:	02 00 01    	call      w2

0000325c <.L27>:
}
    325c:	00 80 fa    	ulnk      
    325e:	00 00 06    	return    

00003260 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3260:	02 00 fa    	lnk       #0x2
    3262:	00 0f 78    	mov.w     w0, [w14]
    if (self->read)
    3264:	1e 00 78    	mov.w     [w14], w0
    3266:	20 08 90    	mov.w     [w0+20], w0
    3268:	00 00 e0    	cp0.w     w0
    326a:	05 00 32    	bra       Z, 0x3276 <.L30>
        return self->read(self);
    326c:	1e 00 78    	mov.w     [w14], w0
    326e:	a0 08 90    	mov.w     [w0+20], w1
    3270:	1e 00 78    	mov.w     [w14], w0
    3272:	01 00 01    	call      w1
    3274:	01 00 37    	bra       0x3278 <.L31>

00003276 <.L30>:
    else
        return 0xFFFF;
    3276:	00 80 eb    	setm.w    w0

00003278 <.L31>:
}
    3278:	00 80 fa    	ulnk      
    327a:	00 00 06    	return    

0000327c <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    327c:	08 00 fa    	lnk       #0x8
    327e:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3280:	3e 00 90    	mov.w     [w14+6], w0
    3282:	00 08 90    	mov.w     [w0+16], w0
    3284:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    3286:	00 00 eb    	clr.w     w0
    3288:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    328a:	1e 00 78    	mov.w     [w14], w0
    328c:	30 00 90    	mov.w     [w0+6], w0
    328e:	10 00 78    	mov.w     [w0], w0
    3290:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3292:	1e 02 90    	mov.w     [w14+2], w4
    3294:	ae 02 90    	mov.w     [w14+4], w5
    3296:	1e 00 78    	mov.w     [w14], w0
    3298:	20 00 90    	mov.w     [w0+4], w0
    329a:	10 00 78    	mov.w     [w0], w0
    329c:	80 00 eb    	clr.w     w1
    329e:	00 01 be    	mov.d     w0, w2
    32a0:	04 00 be    	mov.d     w4, w0
    32a2:	33 f1 07    	rcall     0x150a <___udivsi3>
    32a4:	00 00 78    	mov.w     w0, w0
}
    32a6:	00 80 fa    	ulnk      
    32a8:	00 00 06    	return    

000032aa <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    32aa:	0a 00 fa    	lnk       #0xa
    32ac:	30 07 98    	mov.w     w0, [w14+6]
    32ae:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    32b0:	3e 00 90    	mov.w     [w14+6], w0
    32b2:	00 08 90    	mov.w     [w0+16], w0
    32b4:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    32b6:	4e 00 90    	mov.w     [w14+8], w0
    32b8:	61 01 b8    	mul.uu    w0, #0x1, w2
    32ba:	1e 00 78    	mov.w     [w14], w0
    32bc:	20 00 90    	mov.w     [w0+4], w0
    32be:	10 00 78    	mov.w     [w0], w0
    32c0:	80 00 eb    	clr.w     w1
    32c2:	00 9a b9    	mul.ss    w3, w0, w4
    32c4:	04 02 78    	mov.w     w4, w4
    32c6:	02 8b b9    	mul.ss    w1, w2, w6
    32c8:	86 02 78    	mov.w     w6, w5
    32ca:	05 02 42    	add.w     w4, w5, w4
    32cc:	00 10 b8    	mul.uu    w2, w0, w0
    32ce:	01 02 42    	add.w     w4, w1, w4
    32d0:	84 00 78    	mov.w     w4, w1
    32d2:	10 07 98    	mov.w     w0, [w14+2]
    32d4:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    32d6:	1e 00 78    	mov.w     [w14], w0
    32d8:	30 00 90    	mov.w     [w0+6], w0
    32da:	ae 00 90    	mov.w     [w14+4], w1
    32dc:	01 08 78    	mov.w     w1, [w0]
}
    32de:	00 80 fa    	ulnk      
    32e0:	00 00 06    	return    

000032e2 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    32e2:	08 00 fa    	lnk       #0x8
    32e4:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    32e6:	3e 00 90    	mov.w     [w14+6], w0
    32e8:	00 08 90    	mov.w     [w0+16], w0
    32ea:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    32ec:	00 00 eb    	clr.w     w0
    32ee:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    32f0:	1e 00 78    	mov.w     [w14], w0
    32f2:	20 00 90    	mov.w     [w0+4], w0
    32f4:	90 00 78    	mov.w     [w0], w1
    32f6:	1e 00 78    	mov.w     [w14], w0
    32f8:	60 00 90    	mov.w     [w0+12], w0
    32fa:	00 80 50    	sub.w     w1, w0, w0
    32fc:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    32fe:	1e 02 90    	mov.w     [w14+2], w4
    3300:	ae 02 90    	mov.w     [w14+4], w5
    3302:	1e 00 78    	mov.w     [w14], w0
    3304:	70 00 90    	mov.w     [w0+14], w0
    3306:	80 00 eb    	clr.w     w1
    3308:	00 01 be    	mov.d     w0, w2
    330a:	04 00 be    	mov.d     w4, w0
    330c:	fe f0 07    	rcall     0x150a <___udivsi3>
    330e:	00 00 78    	mov.w     w0, w0
}
    3310:	00 80 fa    	ulnk      
    3312:	00 00 06    	return    

00003314 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3314:	0a 00 fa    	lnk       #0xa
    3316:	30 07 98    	mov.w     w0, [w14+6]
    3318:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    331a:	3e 00 90    	mov.w     [w14+6], w0
    331c:	00 08 90    	mov.w     [w0+16], w0
    331e:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3320:	4e 00 90    	mov.w     [w14+8], w0
    3322:	61 01 b8    	mul.uu    w0, #0x1, w2
    3324:	1e 00 78    	mov.w     [w14], w0
    3326:	70 00 90    	mov.w     [w0+14], w0
    3328:	80 00 eb    	clr.w     w1
    332a:	00 9a b9    	mul.ss    w3, w0, w4
    332c:	04 02 78    	mov.w     w4, w4
    332e:	02 8b b9    	mul.ss    w1, w2, w6
    3330:	86 02 78    	mov.w     w6, w5
    3332:	05 02 42    	add.w     w4, w5, w4
    3334:	00 10 b8    	mul.uu    w2, w0, w0
    3336:	01 02 42    	add.w     w4, w1, w4
    3338:	84 00 78    	mov.w     w4, w1
    333a:	10 07 98    	mov.w     w0, [w14+2]
    333c:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    333e:	1e 00 78    	mov.w     [w14], w0
    3340:	20 00 90    	mov.w     [w0+4], w0
    3342:	9e 00 78    	mov.w     [w14], w1
    3344:	61 01 90    	mov.w     [w1+12], w2
    3346:	ae 00 90    	mov.w     [w14+4], w1
    3348:	81 00 41    	add.w     w2, w1, w1
    334a:	01 08 78    	mov.w     w1, [w0]
}
    334c:	00 80 fa    	ulnk      
    334e:	00 00 06    	return    

00003350 <_init_oc>:

void init_oc(void) {
    3350:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3352:	26 01 20    	mov.w     #0x12, w6
    3354:	85 19 20    	mov.w     #0x198, w5
    3356:	64 19 20    	mov.w     #0x196, w4
    3358:	43 19 20    	mov.w     #0x194, w3
    335a:	22 19 20    	mov.w     #0x192, w2
    335c:	01 19 20    	mov.w     #0x190, w1
    335e:	20 a1 20    	mov.w     #0xa12, w0
    3360:	42 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3362:	36 01 20    	mov.w     #0x13, w6
    3364:	25 1a 20    	mov.w     #0x1a2, w5
    3366:	04 1a 20    	mov.w     #0x1a0, w4
    3368:	e3 19 20    	mov.w     #0x19e, w3
    336a:	c2 19 20    	mov.w     #0x19c, w2
    336c:	a1 19 20    	mov.w     #0x19a, w1
    336e:	40 a2 20    	mov.w     #0xa24, w0
    3370:	3a 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3372:	46 01 20    	mov.w     #0x14, w6
    3374:	c5 1a 20    	mov.w     #0x1ac, w5
    3376:	a4 1a 20    	mov.w     #0x1aa, w4
    3378:	83 1a 20    	mov.w     #0x1a8, w3
    337a:	62 1a 20    	mov.w     #0x1a6, w2
    337c:	41 1a 20    	mov.w     #0x1a4, w1
    337e:	60 a3 20    	mov.w     #0xa36, w0
    3380:	32 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3382:	56 01 20    	mov.w     #0x15, w6
    3384:	65 1b 20    	mov.w     #0x1b6, w5
    3386:	44 1b 20    	mov.w     #0x1b4, w4
    3388:	23 1b 20    	mov.w     #0x1b2, w3
    338a:	02 1b 20    	mov.w     #0x1b0, w2
    338c:	e1 1a 20    	mov.w     #0x1ae, w1
    338e:	80 a4 20    	mov.w     #0xa48, w0
    3390:	2a 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3392:	66 01 20    	mov.w     #0x16, w6
    3394:	05 1c 20    	mov.w     #0x1c0, w5
    3396:	e4 1b 20    	mov.w     #0x1be, w4
    3398:	c3 1b 20    	mov.w     #0x1bc, w3
    339a:	a2 1b 20    	mov.w     #0x1ba, w2
    339c:	81 1b 20    	mov.w     #0x1b8, w1
    339e:	a0 a5 20    	mov.w     #0xa5a, w0
    33a0:	22 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    33a2:	76 01 20    	mov.w     #0x17, w6
    33a4:	a5 1c 20    	mov.w     #0x1ca, w5
    33a6:	84 1c 20    	mov.w     #0x1c8, w4
    33a8:	63 1c 20    	mov.w     #0x1c6, w3
    33aa:	42 1c 20    	mov.w     #0x1c4, w2
    33ac:	21 1c 20    	mov.w     #0x1c2, w1
    33ae:	c0 a6 20    	mov.w     #0xa6c, w0
    33b0:	1a 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    33b2:	86 01 20    	mov.w     #0x18, w6
    33b4:	45 1d 20    	mov.w     #0x1d4, w5
    33b6:	24 1d 20    	mov.w     #0x1d2, w4
    33b8:	03 1d 20    	mov.w     #0x1d0, w3
    33ba:	e2 1c 20    	mov.w     #0x1ce, w2
    33bc:	c1 1c 20    	mov.w     #0x1cc, w1
    33be:	e0 a7 20    	mov.w     #0xa7e, w0
    33c0:	12 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    33c2:	96 01 20    	mov.w     #0x19, w6
    33c4:	e5 1d 20    	mov.w     #0x1de, w5
    33c6:	c4 1d 20    	mov.w     #0x1dc, w4
    33c8:	a3 1d 20    	mov.w     #0x1da, w3
    33ca:	82 1d 20    	mov.w     #0x1d8, w2
    33cc:	61 1d 20    	mov.w     #0x1d6, w1
    33ce:	00 a9 20    	mov.w     #0xa90, w0
    33d0:	0a 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    33d2:	36 02 20    	mov.w     #0x23, w6
    33d4:	85 1e 20    	mov.w     #0x1e8, w5
    33d6:	64 1e 20    	mov.w     #0x1e6, w4
    33d8:	43 1e 20    	mov.w     #0x1e4, w3
    33da:	22 1e 20    	mov.w     #0x1e2, w2
    33dc:	01 1e 20    	mov.w     #0x1e0, w1
    33de:	20 aa 20    	mov.w     #0xaa2, w0
    33e0:	02 00 07    	rcall     0x33e6 <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    33e2:	00 80 fa    	ulnk      
    33e4:	00 00 06    	return    

000033e6 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    33e6:	0e 00 fa    	lnk       #0xe
    33e8:	00 0f 78    	mov.w     w0, [w14]
    33ea:	11 07 98    	mov.w     w1, [w14+2]
    33ec:	22 07 98    	mov.w     w2, [w14+4]
    33ee:	33 07 98    	mov.w     w3, [w14+6]
    33f0:	44 07 98    	mov.w     w4, [w14+8]
    33f2:	55 07 98    	mov.w     w5, [w14+10]
    33f4:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    33f6:	1e 00 78    	mov.w     [w14], w0
    33f8:	9e 00 90    	mov.w     [w14+2], w1
    33fa:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    33fc:	1e 00 78    	mov.w     [w14], w0
    33fe:	ae 00 90    	mov.w     [w14+4], w1
    3400:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    3402:	1e 00 78    	mov.w     [w14], w0
    3404:	be 00 90    	mov.w     [w14+6], w1
    3406:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    3408:	1e 00 78    	mov.w     [w14], w0
    340a:	ce 00 90    	mov.w     [w14+8], w1
    340c:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    340e:	1e 00 78    	mov.w     [w14], w0
    3410:	de 00 90    	mov.w     [w14+10], w1
    3412:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    3414:	1e 00 78    	mov.w     [w14], w0
    3416:	01 e8 23    	mov.w     #0x3e80, w1
    3418:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    341a:	1e 00 78    	mov.w     [w14], w0
    341c:	01 e8 23    	mov.w     #0x3e80, w1
    341e:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    3420:	1e 00 78    	mov.w     [w14], w0
    3422:	ee 00 90    	mov.w     [w14+12], w1
    3424:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    3426:	1e 00 78    	mov.w     [w14], w0
    3428:	80 00 eb    	clr.w     w1
    342a:	01 08 98    	mov.w     w1, [w0+16]
}
    342c:	00 80 fa    	ulnk      
    342e:	00 00 06    	return    

00003430 <_oc_free>:

void oc_free(_OC *self) {
    3430:	02 00 fa    	lnk       #0x2
    3432:	00 0f 78    	mov.w     w0, [w14]
    *(self->OCxCON1) = 0;
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	10 00 78    	mov.w     [w0], w0
    3438:	80 00 eb    	clr.w     w1
    343a:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    343c:	1e 00 78    	mov.w     [w14], w0
    343e:	10 00 90    	mov.w     [w0+2], w0
    3440:	80 00 eb    	clr.w     w1
    3442:	01 08 78    	mov.w     w1, [w0]
    if (self->pin) {
    3444:	1e 00 78    	mov.w     [w14], w0
    3446:	00 08 90    	mov.w     [w0+16], w0
    3448:	00 00 e0    	cp0.w     w0
    344a:	2f 00 32    	bra       Z, 0x34aa <.L7>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    344c:	11 3a 80    	mov.w     0x742, w1
    344e:	f0 0b 20    	mov.w     #0xbf, w0
    3450:	00 81 60    	and.w     w1, w0, w2
    3452:	60 04 20    	mov.w     #0x46, w0
    3454:	71 05 20    	mov.w     #0x57, w1
    3456:	23 74 20    	mov.w     #0x742, w3
    3458:	80 49 78    	mov.b     w0, [w3]
    345a:	81 49 78    	mov.b     w1, [w3]
    345c:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    345e:	1e 00 78    	mov.w     [w14], w0
    3460:	00 08 90    	mov.w     [w0+16], w0
    3462:	70 00 90    	mov.w     [w0+14], w0
    3464:	9e 00 78    	mov.w     [w14], w1
    3466:	81 08 90    	mov.w     [w1+16], w1
    3468:	f1 00 90    	mov.w     [w1+14], w1
    346a:	11 01 78    	mov.w     [w1], w2
    346c:	9e 00 78    	mov.w     [w14], w1
    346e:	81 08 90    	mov.w     [w1+16], w1
    3470:	a1 48 90    	mov.b     [w1+10], w1
    3472:	81 80 fb    	ze        w1, w1
    3474:	f3 03 20    	mov.w     #0x3f, w3
    3476:	81 18 dd    	sl.w      w3, w1, w1
    3478:	81 80 ea    	com.w     w1, w1
    347a:	81 00 61    	and.w     w2, w1, w1
    347c:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    347e:	10 3a 80    	mov.w     0x742, w0
    3480:	00 01 78    	mov.w     w0, w2
    3482:	02 60 a0    	bset.w    w2, #0x6
    3484:	60 04 20    	mov.w     #0x46, w0
    3486:	71 05 20    	mov.w     #0x57, w1
    3488:	23 74 20    	mov.w     #0x742, w3
    348a:	80 49 78    	mov.b     w0, [w3]
    348c:	81 49 78    	mov.b     w1, [w3]
    348e:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    3490:	1e 00 78    	mov.w     [w14], w0
    3492:	00 08 90    	mov.w     [w0+16], w0
    3494:	80 00 eb    	clr.w     w1
    3496:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    3498:	1e 00 78    	mov.w     [w14], w0
    349a:	00 08 90    	mov.w     [w0+16], w0
    349c:	36 fe 07    	rcall     0x310a <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    349e:	1e 00 78    	mov.w     [w14], w0
    34a0:	00 08 90    	mov.w     [w0+16], w0
    34a2:	a5 fe 07    	rcall     0x31ee <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->pin = NULL;
    34a4:	1e 00 78    	mov.w     [w14], w0
    34a6:	80 00 eb    	clr.w     w1
    34a8:	01 08 98    	mov.w     w1, [w0+16]

000034aa <.L7>:
    }
}
    34aa:	00 80 fa    	ulnk      
    34ac:	00 00 06    	return    

000034ae <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    34ae:	10 00 fa    	lnk       #0x10
    34b0:	88 1f 78    	mov.w     w8, [w15++]
    34b2:	20 07 98    	mov.w     w0, [w14+4]
    34b4:	31 07 98    	mov.w     w1, [w14+6]
    34b6:	42 07 98    	mov.w     w2, [w14+8]
    34b8:	54 07 98    	mov.w     w4, [w14+10]
    34ba:	65 07 98    	mov.w     w5, [w14+12]
    34bc:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (pin->rpnum==-1)
    34be:	3e 00 90    	mov.w     [w14+6], w0
    34c0:	60 00 90    	mov.w     [w0+12], w0
    34c2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    34c4:	9c 00 32    	bra       Z, 0x35fe <.L18>
        return;
    if (pin->owner==NULL) {
    34c6:	3e 00 90    	mov.w     [w14+6], w0
    34c8:	00 08 90    	mov.w     [w0+16], w0
    34ca:	00 00 e0    	cp0.w     w0
    34cc:	33 00 3a    	bra       NZ, 0x3534 <.L12>
        self->pin = pin;
    34ce:	2e 00 90    	mov.w     [w14+4], w0
    34d0:	be 00 90    	mov.w     [w14+6], w1
    34d2:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    34d4:	3e 00 90    	mov.w     [w14+6], w0
    34d6:	ae 00 90    	mov.w     [w14+4], w1
    34d8:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    34da:	11 3a 80    	mov.w     0x742, w1
    34dc:	f0 0b 20    	mov.w     #0xbf, w0
    34de:	00 81 60    	and.w     w1, w0, w2
    34e0:	60 04 20    	mov.w     #0x46, w0
    34e2:	71 05 20    	mov.w     #0x57, w1
    34e4:	23 74 20    	mov.w     #0x742, w3
    34e6:	80 49 78    	mov.b     w0, [w3]
    34e8:	81 49 78    	mov.b     w1, [w3]
    34ea:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    34ec:	3e 00 90    	mov.w     [w14+6], w0
    34ee:	70 00 90    	mov.w     [w0+14], w0
    34f0:	be 00 90    	mov.w     [w14+6], w1
    34f2:	f1 00 90    	mov.w     [w1+14], w1
    34f4:	11 01 78    	mov.w     [w1], w2
    34f6:	be 00 90    	mov.w     [w14+6], w1
    34f8:	a1 48 90    	mov.b     [w1+10], w1
    34fa:	81 80 fb    	ze        w1, w1
    34fc:	f3 03 20    	mov.w     #0x3f, w3
    34fe:	81 18 dd    	sl.w      w3, w1, w1
    3500:	81 80 ea    	com.w     w1, w1
    3502:	81 00 61    	and.w     w2, w1, w1
    3504:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3506:	3e 00 90    	mov.w     [w14+6], w0
    3508:	70 00 90    	mov.w     [w0+14], w0
    350a:	be 00 90    	mov.w     [w14+6], w1
    350c:	f1 00 90    	mov.w     [w1+14], w1
    350e:	11 01 78    	mov.w     [w1], w2
    3510:	ae 00 90    	mov.w     [w14+4], w1
    3512:	d1 01 90    	mov.w     [w1+10], w3
    3514:	be 00 90    	mov.w     [w14+6], w1
    3516:	a1 48 90    	mov.b     [w1+10], w1
    3518:	81 80 fb    	ze        w1, w1
    351a:	81 18 dd    	sl.w      w3, w1, w1
    351c:	82 80 70    	ior.w     w1, w2, w1
    351e:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    3520:	10 3a 80    	mov.w     0x742, w0
    3522:	00 01 78    	mov.w     w0, w2
    3524:	02 60 a0    	bset.w    w2, #0x6
    3526:	60 04 20    	mov.w     #0x46, w0
    3528:	71 05 20    	mov.w     #0x57, w1
    352a:	23 74 20    	mov.w     #0x742, w3
    352c:	80 49 78    	mov.b     w0, [w3]
    352e:	81 49 78    	mov.b     w1, [w3]
    3530:	82 49 78    	mov.b     w2, [w3]
    3532:	05 00 37    	bra       0x353e <.L13>

00003534 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3534:	3e 00 90    	mov.w     [w14+6], w0
    3536:	80 08 90    	mov.w     [w0+16], w1
    3538:	2e 00 90    	mov.w     [w14+4], w0
    353a:	80 8f 50    	sub.w     w1, w0, [w15]
    353c:	62 00 3a    	bra       NZ, 0x3602 <.L19>

0000353e <.L13>:
        return;
    }
    if (timer) {
    353e:	4e 00 90    	mov.w     [w14+8], w0
    3540:	00 00 e0    	cp0.w     w0
    3542:	1c 00 32    	bra       Z, 0x357c <.L14>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3544:	2e 00 90    	mov.w     [w14+4], w0
    3546:	10 00 78    	mov.w     [w0], w0
    3548:	ce 00 90    	mov.w     [w14+8], w1
    354a:	e1 00 90    	mov.w     [w1+12], w1
    354c:	ca 08 dd    	sl.w      w1, #0xa, w1
    354e:	61 00 b3    	ior.w     #0x6, w1
    3550:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    3552:	2e 00 90    	mov.w     [w14+4], w0
    3554:	10 00 90    	mov.w     [w0+2], w0
    3556:	f1 01 20    	mov.w     #0x1f, w1
    3558:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    355a:	5e 01 90    	mov.w     [w14+10], w2
    355c:	ee 01 90    	mov.w     [w14+12], w3
    355e:	4e 00 90    	mov.w     [w14+8], w0
    3560:	e4 f8 07    	rcall     0x272a <_timer_setFreq> <L0> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    3562:	2e 00 90    	mov.w     [w14+4], w0
    3564:	20 00 90    	mov.w     [w0+4], w0
    3566:	ce 00 90    	mov.w     [w14+8], w1
    3568:	91 00 90    	mov.w     [w1+2], w1
    356a:	91 00 78    	mov.w     [w1], w1
    356c:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    356e:	2e 00 90    	mov.w     [w14+4], w0
    3570:	40 00 90    	mov.w     [w0+8], w0
    3572:	80 00 eb    	clr.w     w1
    3574:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    3576:	4e 00 90    	mov.w     [w14+8], w0
    3578:	0d f9 07    	rcall     0x2794 <_timer_start> <L0> <.LFB13> <.LFE12>
    357a:	25 00 37    	bra       0x35c6 <.L15>

0000357c <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    357c:	2e 00 90    	mov.w     [w14+4], w0
    357e:	10 00 78    	mov.w     [w0], w0
    3580:	61 c0 21    	mov.w     #0x1c06, w1
    3582:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    3584:	2e 00 90    	mov.w     [w14+4], w0
    3586:	10 00 90    	mov.w     [w0+2], w0
    3588:	f1 01 20    	mov.w     #0x1f, w1
    358a:	01 08 78    	mov.w     w1, [w0]
        if (freq<(FCY/65536.))
    358c:	18 c0 b3    	mov.b     #0x1, w8
    358e:	02 40 22    	mov.w     #0x2400, w2
    3590:	43 37 24    	mov.w     #0x4374, w3
    3592:	5e 00 90    	mov.w     [w14+10], w0
    3594:	ee 00 90    	mov.w     [w14+12], w1
    3596:	ed ee 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    3598:	00 00 e0    	cp0.w     w0
    359a:	01 00 35    	bra       LT, 0x359e <.L16>
    359c:	00 44 eb    	clr.b     w8

0000359e <.L16>:
    359e:	08 04 e0    	cp0.b     w8
    35a0:	05 00 32    	bra       Z, 0x35ac <.L17>
            *(self->OCxRS) = 0xFFFF;
    35a2:	2e 00 90    	mov.w     [w14+4], w0
    35a4:	20 00 90    	mov.w     [w0+4], w0
    35a6:	80 80 eb    	setm.w    w1
    35a8:	01 08 78    	mov.w     w1, [w0]
    35aa:	0d 00 37    	bra       0x35c6 <.L15>

000035ac <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    35ac:	2e 00 90    	mov.w     [w14+4], w0
    35ae:	20 04 90    	mov.w     [w0+4], w8
    35b0:	5e 01 90    	mov.w     [w14+10], w2
    35b2:	ee 01 90    	mov.w     [w14+12], w3
    35b4:	00 40 22    	mov.w     #0x2400, w0
    35b6:	41 b7 24    	mov.w     #0x4b74, w1
    35b8:	9a ee 07    	rcall     0x12ee <___divsf3>
    35ba:	02 00 20    	mov.w     #0x0, w2
    35bc:	03 f8 23    	mov.w     #0x3f80, w3
    35be:	39 ee 07    	rcall     0x1232 <___subsf3>
    35c0:	fd ee 07    	rcall     0x13bc <___fixunssfsi>
    35c2:	00 00 78    	mov.w     w0, w0
    35c4:	00 0c 78    	mov.w     w0, [w8]

000035c6 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    35c6:	7e 00 90    	mov.w     [w14+14], w0
    35c8:	61 01 b8    	mul.uu    w0, #0x1, w2
    35ca:	2e 00 90    	mov.w     [w14+4], w0
    35cc:	20 00 90    	mov.w     [w0+4], w0
    35ce:	10 00 78    	mov.w     [w0], w0
    35d0:	80 00 eb    	clr.w     w1
    35d2:	00 9a b9    	mul.ss    w3, w0, w4
    35d4:	04 02 78    	mov.w     w4, w4
    35d6:	02 8b b9    	mul.ss    w1, w2, w6
    35d8:	86 02 78    	mov.w     w6, w5
    35da:	05 02 42    	add.w     w4, w5, w4
    35dc:	00 10 b8    	mul.uu    w2, w0, w0
    35de:	01 02 42    	add.w     w4, w1, w4
    35e0:	84 00 78    	mov.w     w4, w1
    35e2:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    35e4:	2e 00 90    	mov.w     [w14+4], w0
    35e6:	30 00 90    	mov.w     [w0+6], w0
    35e8:	9e 00 90    	mov.w     [w14+2], w1
    35ea:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    35ec:	2e 00 90    	mov.w     [w14+4], w0
    35ee:	00 08 90    	mov.w     [w0+16], w0
    35f0:	a1 2a 23    	mov.w     #0x32aa, w1
    35f2:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    35f4:	2e 00 90    	mov.w     [w14+4], w0
    35f6:	00 08 90    	mov.w     [w0+16], w0
    35f8:	c1 27 23    	mov.w     #0x327c, w1
    35fa:	21 08 98    	mov.w     w1, [w0+20]
    35fc:	03 00 37    	bra       0x3604 <.L9>

000035fe <.L18>:
    35fe:	00 00 00    	nop       
    3600:	01 00 37    	bra       0x3604 <.L9>

00003602 <.L19>:
    3602:	00 00 00    	nop       

00003604 <.L9>:
}
    3604:	4f 04 78    	mov.w     [--w15], w8
    3606:	00 80 fa    	ulnk      
    3608:	00 00 06    	return    

0000360a <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    360a:	14 00 fa    	lnk       #0x14
    360c:	20 07 98    	mov.w     w0, [w14+4]
    360e:	31 07 98    	mov.w     w1, [w14+6]
    3610:	42 07 98    	mov.w     w2, [w14+8]
    3612:	54 07 98    	mov.w     w4, [w14+10]
    3614:	65 07 98    	mov.w     w5, [w14+12]
    3616:	76 07 98    	mov.w     w6, [w14+14]
    3618:	07 0f 98    	mov.w     w7, [w14+16]
    361a:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    361c:	3e 00 90    	mov.w     [w14+6], w0
    361e:	60 00 90    	mov.w     [w0+12], w0
    3620:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3622:	86 00 32    	bra       Z, 0x3730 <.L25>
        return;
    if (pin->owner==NULL) {
    3624:	3e 00 90    	mov.w     [w14+6], w0
    3626:	00 08 90    	mov.w     [w0+16], w0
    3628:	00 00 e0    	cp0.w     w0
    362a:	33 00 3a    	bra       NZ, 0x3692 <.L23>
        self->pin = pin;
    362c:	2e 00 90    	mov.w     [w14+4], w0
    362e:	be 00 90    	mov.w     [w14+6], w1
    3630:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    3632:	3e 00 90    	mov.w     [w14+6], w0
    3634:	ae 00 90    	mov.w     [w14+4], w1
    3636:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3638:	11 3a 80    	mov.w     0x742, w1
    363a:	f0 0b 20    	mov.w     #0xbf, w0
    363c:	00 81 60    	and.w     w1, w0, w2
    363e:	60 04 20    	mov.w     #0x46, w0
    3640:	71 05 20    	mov.w     #0x57, w1
    3642:	23 74 20    	mov.w     #0x742, w3
    3644:	80 49 78    	mov.b     w0, [w3]
    3646:	81 49 78    	mov.b     w1, [w3]
    3648:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    364a:	3e 00 90    	mov.w     [w14+6], w0
    364c:	70 00 90    	mov.w     [w0+14], w0
    364e:	be 00 90    	mov.w     [w14+6], w1
    3650:	f1 00 90    	mov.w     [w1+14], w1
    3652:	11 01 78    	mov.w     [w1], w2
    3654:	be 00 90    	mov.w     [w14+6], w1
    3656:	a1 48 90    	mov.b     [w1+10], w1
    3658:	81 80 fb    	ze        w1, w1
    365a:	f3 03 20    	mov.w     #0x3f, w3
    365c:	81 18 dd    	sl.w      w3, w1, w1
    365e:	81 80 ea    	com.w     w1, w1
    3660:	81 00 61    	and.w     w2, w1, w1
    3662:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3664:	3e 00 90    	mov.w     [w14+6], w0
    3666:	70 00 90    	mov.w     [w0+14], w0
    3668:	be 00 90    	mov.w     [w14+6], w1
    366a:	f1 00 90    	mov.w     [w1+14], w1
    366c:	11 01 78    	mov.w     [w1], w2
    366e:	ae 00 90    	mov.w     [w14+4], w1
    3670:	d1 01 90    	mov.w     [w1+10], w3
    3672:	be 00 90    	mov.w     [w14+6], w1
    3674:	a1 48 90    	mov.b     [w1+10], w1
    3676:	81 80 fb    	ze        w1, w1
    3678:	81 18 dd    	sl.w      w3, w1, w1
    367a:	82 80 70    	ior.w     w1, w2, w1
    367c:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    367e:	10 3a 80    	mov.w     0x742, w0
    3680:	00 01 78    	mov.w     w0, w2
    3682:	02 60 a0    	bset.w    w2, #0x6
    3684:	60 04 20    	mov.w     #0x46, w0
    3686:	71 05 20    	mov.w     #0x57, w1
    3688:	23 74 20    	mov.w     #0x742, w3
    368a:	80 49 78    	mov.b     w0, [w3]
    368c:	81 49 78    	mov.b     w1, [w3]
    368e:	82 49 78    	mov.b     w2, [w3]
    3690:	05 00 37    	bra       0x369c <.L24>

00003692 <.L23>:
    } else if (pin->owner!=(void *)self) {
    3692:	3e 00 90    	mov.w     [w14+6], w0
    3694:	80 08 90    	mov.w     [w0+16], w1
    3696:	2e 00 90    	mov.w     [w14+4], w0
    3698:	80 8f 50    	sub.w     w1, w0, [w15]
    369a:	4c 00 3a    	bra       NZ, 0x3734 <.L26>

0000369c <.L24>:
        return;
    }
    if (timer) {
    369c:	4e 00 90    	mov.w     [w14+8], w0
    369e:	00 00 e0    	cp0.w     w0
    36a0:	4a 00 32    	bra       Z, 0x3736 <.L20>
        self->servooffset = (uint16_t)(FCY*min_width);
    36a2:	02 40 22    	mov.w     #0x2400, w2
    36a4:	43 b7 24    	mov.w     #0x4b74, w3
    36a6:	7e 00 90    	mov.w     [w14+14], w0
    36a8:	8e 08 90    	mov.w     [w14+16], w1
    36aa:	fb ee 07    	rcall     0x14a2 <___mulsf3>
    36ac:	87 ee 07    	rcall     0x13bc <___fixunssfsi>
    36ae:	80 00 78    	mov.w     w0, w1
    36b0:	2e 00 90    	mov.w     [w14+4], w0
    36b2:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    36b4:	7e 01 90    	mov.w     [w14+14], w2
    36b6:	8e 09 90    	mov.w     [w14+16], w3
    36b8:	3e b8 97    	mov.w     [w14-10], w0
    36ba:	ce b8 97    	mov.w     [w14-8], w1
    36bc:	ba ed 07    	rcall     0x1232 <___subsf3>
    36be:	02 40 22    	mov.w     #0x2400, w2
    36c0:	43 b7 24    	mov.w     #0x4b74, w3
    36c2:	ef ee 07    	rcall     0x14a2 <___mulsf3>
    36c4:	7b ee 07    	rcall     0x13bc <___fixunssfsi>
    36c6:	80 00 78    	mov.w     w0, w1
    36c8:	2e 00 90    	mov.w     [w14+4], w0
    36ca:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    36cc:	2e 00 90    	mov.w     [w14+4], w0
    36ce:	10 00 78    	mov.w     [w0], w0
    36d0:	f1 c0 21    	mov.w     #0x1c0f, w1
    36d2:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    36d4:	2e 00 90    	mov.w     [w14+4], w0
    36d6:	10 00 90    	mov.w     [w0+2], w0
    36d8:	ce 00 90    	mov.w     [w14+8], w1
    36da:	f1 00 90    	mov.w     [w1+14], w1
    36dc:	01 70 a0    	bset.w    w1, #0x7
    36de:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    36e0:	2e 00 90    	mov.w     [w14+4], w0
    36e2:	30 00 90    	mov.w     [w0+6], w0
    36e4:	11 00 20    	mov.w     #0x1, w1
    36e6:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    36e8:	1e 08 90    	mov.w     [w14+18], w0
    36ea:	61 01 b8    	mul.uu    w0, #0x1, w2
    36ec:	2e 00 90    	mov.w     [w14+4], w0
    36ee:	70 00 90    	mov.w     [w0+14], w0
    36f0:	80 00 eb    	clr.w     w1
    36f2:	00 9a b9    	mul.ss    w3, w0, w4
    36f4:	04 02 78    	mov.w     w4, w4
    36f6:	02 8b b9    	mul.ss    w1, w2, w6
    36f8:	86 02 78    	mov.w     w6, w5
    36fa:	05 02 42    	add.w     w4, w5, w4
    36fc:	00 10 b8    	mul.uu    w2, w0, w0
    36fe:	01 02 42    	add.w     w4, w1, w4
    3700:	84 00 78    	mov.w     w4, w1
    3702:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3704:	2e 00 90    	mov.w     [w14+4], w0
    3706:	20 00 90    	mov.w     [w0+4], w0
    3708:	ae 00 90    	mov.w     [w14+4], w1
    370a:	61 01 90    	mov.w     [w1+12], w2
    370c:	9e 00 90    	mov.w     [w14+2], w1
    370e:	81 00 41    	add.w     w2, w1, w1
    3710:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    3712:	5e 01 90    	mov.w     [w14+10], w2
    3714:	ee 01 90    	mov.w     [w14+12], w3
    3716:	4e 00 90    	mov.w     [w14+8], w0
    3718:	6e f7 07    	rcall     0x25f6 <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
        timer_start(timer);
    371a:	4e 00 90    	mov.w     [w14+8], w0
    371c:	3b f8 07    	rcall     0x2794 <_timer_start> <L0> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    371e:	2e 00 90    	mov.w     [w14+4], w0
    3720:	00 08 90    	mov.w     [w0+16], w0
    3722:	41 31 23    	mov.w     #0x3314, w1
    3724:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    3726:	2e 00 90    	mov.w     [w14+4], w0
    3728:	00 08 90    	mov.w     [w0+16], w0
    372a:	21 2e 23    	mov.w     #0x32e2, w1
    372c:	21 08 98    	mov.w     w1, [w0+20]
    372e:	03 00 37    	bra       0x3736 <.L20>

00003730 <.L25>:
    3730:	00 00 00    	nop       
    3732:	01 00 37    	bra       0x3736 <.L20>

00003734 <.L26>:
    3734:	00 00 00    	nop       

00003736 <.L20>:
    }
}
    3736:	00 80 fa    	ulnk      
    3738:	00 00 06    	return    

0000373a <_init_ui>:
    373a:	00 00 fa    	lnk       #0x0
    373c:	74 c0 b3    	mov.b     #0x7, w4
    373e:	63 4e 20    	mov.w     #0x4e6, w3
    3740:	82 2d 20    	mov.w     #0x2d8, w2
    3742:	a1 2d 20    	mov.w     #0x2da, w1
    3744:	00 80 20    	mov.w     #0x800, w0
    3746:	20 00 07    	rcall     0x3788 <_led_init> <L0> <.LFB1> <.LFE0>
    3748:	00 42 eb    	clr.b     w4
    374a:	a3 4e 20    	mov.w     #0x4ea, w3
    374c:	82 2e 20    	mov.w     #0x2e8, w2
    374e:	a1 2e 20    	mov.w     #0x2ea, w1
    3750:	80 80 20    	mov.w     #0x808, w0
    3752:	1a 00 07    	rcall     0x3788 <_led_init> <L0> <.LFB1> <.LFE0>
    3754:	14 c0 b3    	mov.b     #0x1, w4
    3756:	a3 4e 20    	mov.w     #0x4ea, w3
    3758:	82 2e 20    	mov.w     #0x2e8, w2
    375a:	a1 2e 20    	mov.w     #0x2ea, w1
    375c:	00 81 20    	mov.w     #0x810, w0
    375e:	14 00 07    	rcall     0x3788 <_led_init> <L0> <.LFB1> <.LFE0>
    3760:	f4 c0 b3    	mov.b     #0xf, w4
    3762:	43 4e 20    	mov.w     #0x4e4, w3
    3764:	02 2d 20    	mov.w     #0x2d0, w2
    3766:	21 2d 20    	mov.w     #0x2d2, w1
    3768:	80 81 20    	mov.w     #0x818, w0
    376a:	ad 00 07    	rcall     0x38c6 <_sw_init> <L0> <.LFB7> <.LFE6>
    376c:	c4 c0 b3    	mov.b     #0xc, w4
    376e:	43 4e 20    	mov.w     #0x4e4, w3
    3770:	02 2d 20    	mov.w     #0x2d0, w2
    3772:	21 2d 20    	mov.w     #0x2d2, w1
    3774:	00 82 20    	mov.w     #0x820, w0
    3776:	a7 00 07    	rcall     0x38c6 <_sw_init> <L0> <.LFB7> <.LFE6>
    3778:	c4 c0 b3    	mov.b     #0xc, w4
    377a:	23 4e 20    	mov.w     #0x4e2, w3
    377c:	82 2c 20    	mov.w     #0x2c8, w2
    377e:	a1 2c 20    	mov.w     #0x2ca, w1
    3780:	80 82 20    	mov.w     #0x828, w0
    3782:	a1 00 07    	rcall     0x38c6 <_sw_init> <L0> <.LFB7> <.LFE6>
    3784:	00 80 fa    	ulnk      
    3786:	00 00 06    	return    

00003788 <_led_init>:
    3788:	0a 00 fa    	lnk       #0xa
    378a:	00 0f 78    	mov.w     w0, [w14]
    378c:	11 07 98    	mov.w     w1, [w14+2]
    378e:	22 07 98    	mov.w     w2, [w14+4]
    3790:	33 07 98    	mov.w     w3, [w14+6]
    3792:	04 4f 98    	mov.b     w4, [w14+8]
    3794:	1e 00 78    	mov.w     [w14], w0
    3796:	9e 00 90    	mov.w     [w14+2], w1
    3798:	01 08 78    	mov.w     w1, [w0]
    379a:	1e 00 78    	mov.w     [w14], w0
    379c:	ae 00 90    	mov.w     [w14+4], w1
    379e:	11 00 98    	mov.w     w1, [w0+2]
    37a0:	1e 00 78    	mov.w     [w14], w0
    37a2:	be 00 90    	mov.w     [w14+6], w1
    37a4:	21 00 98    	mov.w     w1, [w0+4]
    37a6:	1e 00 78    	mov.w     [w14], w0
    37a8:	8e 48 90    	mov.b     [w14+8], w1
    37aa:	61 40 98    	mov.b     w1, [w0+6]
    37ac:	1e 00 78    	mov.w     [w14], w0
    37ae:	20 00 90    	mov.w     [w0+4], w0
    37b0:	9e 00 78    	mov.w     [w14], w1
    37b2:	a1 00 90    	mov.w     [w1+4], w1
    37b4:	11 01 78    	mov.w     [w1], w2
    37b6:	9e 00 78    	mov.w     [w14], w1
    37b8:	e1 40 90    	mov.b     [w1+6], w1
    37ba:	81 80 fb    	ze        w1, w1
    37bc:	13 00 20    	mov.w     #0x1, w3
    37be:	81 18 dd    	sl.w      w3, w1, w1
    37c0:	81 80 ea    	com.w     w1, w1
    37c2:	81 00 61    	and.w     w2, w1, w1
    37c4:	01 08 78    	mov.w     w1, [w0]
    37c6:	1e 00 78    	mov.w     [w14], w0
    37c8:	10 00 78    	mov.w     [w0], w0
    37ca:	9e 00 78    	mov.w     [w14], w1
    37cc:	91 00 78    	mov.w     [w1], w1
    37ce:	11 01 78    	mov.w     [w1], w2
    37d0:	9e 00 78    	mov.w     [w14], w1
    37d2:	e1 40 90    	mov.b     [w1+6], w1
    37d4:	81 80 fb    	ze        w1, w1
    37d6:	13 00 20    	mov.w     #0x1, w3
    37d8:	81 18 dd    	sl.w      w3, w1, w1
    37da:	81 80 ea    	com.w     w1, w1
    37dc:	81 00 61    	and.w     w2, w1, w1
    37de:	01 08 78    	mov.w     w1, [w0]
    37e0:	1e 00 78    	mov.w     [w14], w0
    37e2:	10 00 90    	mov.w     [w0+2], w0
    37e4:	9e 00 78    	mov.w     [w14], w1
    37e6:	91 00 90    	mov.w     [w1+2], w1
    37e8:	11 01 78    	mov.w     [w1], w2
    37ea:	9e 00 78    	mov.w     [w14], w1
    37ec:	e1 40 90    	mov.b     [w1+6], w1
    37ee:	81 80 fb    	ze        w1, w1
    37f0:	13 00 20    	mov.w     #0x1, w3
    37f2:	81 18 dd    	sl.w      w3, w1, w1
    37f4:	81 80 ea    	com.w     w1, w1
    37f6:	81 00 61    	and.w     w2, w1, w1
    37f8:	01 08 78    	mov.w     w1, [w0]
    37fa:	00 80 fa    	ulnk      
    37fc:	00 00 06    	return    

000037fe <_led_on>:
    37fe:	02 00 fa    	lnk       #0x2
    3800:	00 0f 78    	mov.w     w0, [w14]
    3802:	1e 00 78    	mov.w     [w14], w0
    3804:	10 00 78    	mov.w     [w0], w0
    3806:	9e 00 78    	mov.w     [w14], w1
    3808:	91 00 78    	mov.w     [w1], w1
    380a:	11 01 78    	mov.w     [w1], w2
    380c:	9e 00 78    	mov.w     [w14], w1
    380e:	e1 40 90    	mov.b     [w1+6], w1
    3810:	81 80 fb    	ze        w1, w1
    3812:	13 00 20    	mov.w     #0x1, w3
    3814:	81 18 dd    	sl.w      w3, w1, w1
    3816:	82 80 70    	ior.w     w1, w2, w1
    3818:	01 08 78    	mov.w     w1, [w0]
    381a:	00 80 fa    	ulnk      
    381c:	00 00 06    	return    

0000381e <_led_off>:
    381e:	02 00 fa    	lnk       #0x2
    3820:	00 0f 78    	mov.w     w0, [w14]
    3822:	1e 00 78    	mov.w     [w14], w0
    3824:	10 00 78    	mov.w     [w0], w0
    3826:	9e 00 78    	mov.w     [w14], w1
    3828:	91 00 78    	mov.w     [w1], w1
    382a:	11 01 78    	mov.w     [w1], w2
    382c:	9e 00 78    	mov.w     [w14], w1
    382e:	e1 40 90    	mov.b     [w1+6], w1
    3830:	81 80 fb    	ze        w1, w1
    3832:	13 00 20    	mov.w     #0x1, w3
    3834:	81 18 dd    	sl.w      w3, w1, w1
    3836:	81 80 ea    	com.w     w1, w1
    3838:	81 00 61    	and.w     w2, w1, w1
    383a:	01 08 78    	mov.w     w1, [w0]
    383c:	00 80 fa    	ulnk      
    383e:	00 00 06    	return    

00003840 <_led_toggle>:
    3840:	02 00 fa    	lnk       #0x2
    3842:	00 0f 78    	mov.w     w0, [w14]
    3844:	1e 00 78    	mov.w     [w14], w0
    3846:	10 00 78    	mov.w     [w0], w0
    3848:	9e 00 78    	mov.w     [w14], w1
    384a:	91 00 78    	mov.w     [w1], w1
    384c:	11 01 78    	mov.w     [w1], w2
    384e:	9e 00 78    	mov.w     [w14], w1
    3850:	e1 40 90    	mov.b     [w1+6], w1
    3852:	81 80 fb    	ze        w1, w1
    3854:	13 00 20    	mov.w     #0x1, w3
    3856:	81 18 dd    	sl.w      w3, w1, w1
    3858:	81 00 69    	xor.w     w2, w1, w1
    385a:	01 08 78    	mov.w     w1, [w0]
    385c:	00 80 fa    	ulnk      
    385e:	00 00 06    	return    

00003860 <_led_write>:
    3860:	04 00 fa    	lnk       #0x4
    3862:	00 0f 78    	mov.w     w0, [w14]
    3864:	11 07 98    	mov.w     w1, [w14+2]
    3866:	1e 00 90    	mov.w     [w14+2], w0
    3868:	00 00 e0    	cp0.w     w0
    386a:	0d 00 32    	bra       Z, 0x3886 <.L7>
    386c:	1e 00 78    	mov.w     [w14], w0
    386e:	10 00 78    	mov.w     [w0], w0
    3870:	9e 00 78    	mov.w     [w14], w1
    3872:	91 00 78    	mov.w     [w1], w1
    3874:	11 01 78    	mov.w     [w1], w2
    3876:	9e 00 78    	mov.w     [w14], w1
    3878:	e1 40 90    	mov.b     [w1+6], w1
    387a:	81 80 fb    	ze        w1, w1
    387c:	13 00 20    	mov.w     #0x1, w3
    387e:	81 18 dd    	sl.w      w3, w1, w1
    3880:	82 80 70    	ior.w     w1, w2, w1
    3882:	01 08 78    	mov.w     w1, [w0]
    3884:	0d 00 37    	bra       0x38a0 <.L6>

00003886 <.L7>:
    3886:	1e 00 78    	mov.w     [w14], w0
    3888:	10 00 78    	mov.w     [w0], w0
    388a:	9e 00 78    	mov.w     [w14], w1
    388c:	91 00 78    	mov.w     [w1], w1
    388e:	11 01 78    	mov.w     [w1], w2
    3890:	9e 00 78    	mov.w     [w14], w1
    3892:	e1 40 90    	mov.b     [w1+6], w1
    3894:	81 80 fb    	ze        w1, w1
    3896:	13 00 20    	mov.w     #0x1, w3
    3898:	81 18 dd    	sl.w      w3, w1, w1
    389a:	81 80 ea    	com.w     w1, w1
    389c:	81 00 61    	and.w     w2, w1, w1
    389e:	01 08 78    	mov.w     w1, [w0]

000038a0 <.L6>:
    38a0:	00 80 fa    	ulnk      
    38a2:	00 00 06    	return    

000038a4 <_led_read>:
    38a4:	02 00 fa    	lnk       #0x2
    38a6:	00 0f 78    	mov.w     w0, [w14]
    38a8:	1e 00 78    	mov.w     [w14], w0
    38aa:	10 00 78    	mov.w     [w0], w0
    38ac:	90 00 78    	mov.w     [w0], w1
    38ae:	1e 00 78    	mov.w     [w14], w0
    38b0:	60 40 90    	mov.b     [w0+6], w0
    38b2:	00 80 fb    	ze        w0, w0
    38b4:	12 00 20    	mov.w     #0x1, w2
    38b6:	00 10 dd    	sl.w      w2, w0, w0
    38b8:	00 80 60    	and.w     w1, w0, w0
    38ba:	00 f0 a7    	btsc.w    w0, #0xf
    38bc:	00 00 ea    	neg.w     w0, w0
    38be:	00 00 ea    	neg.w     w0, w0
    38c0:	4f 00 de    	lsr.w     w0, #0xf, w0
    38c2:	00 80 fa    	ulnk      
    38c4:	00 00 06    	return    

000038c6 <_sw_init>:
    38c6:	0a 00 fa    	lnk       #0xa
    38c8:	00 0f 78    	mov.w     w0, [w14]
    38ca:	11 07 98    	mov.w     w1, [w14+2]
    38cc:	22 07 98    	mov.w     w2, [w14+4]
    38ce:	33 07 98    	mov.w     w3, [w14+6]
    38d0:	04 4f 98    	mov.b     w4, [w14+8]
    38d2:	1e 00 78    	mov.w     [w14], w0
    38d4:	9e 00 90    	mov.w     [w14+2], w1
    38d6:	01 08 78    	mov.w     w1, [w0]
    38d8:	1e 00 78    	mov.w     [w14], w0
    38da:	ae 00 90    	mov.w     [w14+4], w1
    38dc:	11 00 98    	mov.w     w1, [w0+2]
    38de:	1e 00 78    	mov.w     [w14], w0
    38e0:	be 00 90    	mov.w     [w14+6], w1
    38e2:	21 00 98    	mov.w     w1, [w0+4]
    38e4:	1e 00 78    	mov.w     [w14], w0
    38e6:	8e 48 90    	mov.b     [w14+8], w1
    38e8:	61 40 98    	mov.b     w1, [w0+6]
    38ea:	1e 00 78    	mov.w     [w14], w0
    38ec:	20 00 90    	mov.w     [w0+4], w0
    38ee:	9e 00 78    	mov.w     [w14], w1
    38f0:	a1 00 90    	mov.w     [w1+4], w1
    38f2:	11 01 78    	mov.w     [w1], w2
    38f4:	9e 00 78    	mov.w     [w14], w1
    38f6:	e1 40 90    	mov.b     [w1+6], w1
    38f8:	81 80 fb    	ze        w1, w1
    38fa:	13 00 20    	mov.w     #0x1, w3
    38fc:	81 18 dd    	sl.w      w3, w1, w1
    38fe:	81 80 ea    	com.w     w1, w1
    3900:	81 00 61    	and.w     w2, w1, w1
    3902:	01 08 78    	mov.w     w1, [w0]
    3904:	1e 00 78    	mov.w     [w14], w0
    3906:	10 00 90    	mov.w     [w0+2], w0
    3908:	9e 00 78    	mov.w     [w14], w1
    390a:	91 00 90    	mov.w     [w1+2], w1
    390c:	11 01 78    	mov.w     [w1], w2
    390e:	9e 00 78    	mov.w     [w14], w1
    3910:	e1 40 90    	mov.b     [w1+6], w1
    3912:	81 80 fb    	ze        w1, w1
    3914:	13 00 20    	mov.w     #0x1, w3
    3916:	81 18 dd    	sl.w      w3, w1, w1
    3918:	82 80 70    	ior.w     w1, w2, w1
    391a:	01 08 78    	mov.w     w1, [w0]
    391c:	00 80 fa    	ulnk      
    391e:	00 00 06    	return    

00003920 <_sw_read>:
    3920:	02 00 fa    	lnk       #0x2
    3922:	00 0f 78    	mov.w     w0, [w14]
    3924:	1e 00 78    	mov.w     [w14], w0
    3926:	10 00 78    	mov.w     [w0], w0
    3928:	90 00 78    	mov.w     [w0], w1
    392a:	1e 00 78    	mov.w     [w14], w0
    392c:	60 40 90    	mov.b     [w0+6], w0
    392e:	00 80 fb    	ze        w0, w0
    3930:	12 00 20    	mov.w     #0x1, w2
    3932:	00 10 dd    	sl.w      w2, w0, w0
    3934:	00 80 60    	and.w     w1, w0, w0
    3936:	00 f0 a7    	btsc.w    w0, #0xf
    3938:	00 00 ea    	neg.w     w0, w0
    393a:	00 00 ea    	neg.w     w0, w0
    393c:	4f 00 de    	lsr.w     w0, #0xf, w0
    393e:	00 80 fa    	ulnk      
    3940:	00 00 06    	return    
Disassembly of section .dinit:

00003942 <.dinit>:
    3942:	56 08 00    	nop       
    3944:	04 00 00    	nop       
    3946:	82 00 00    	nop       
    3948:	01 00 38    	bra       NOV, 0x394c
    394a:	4a 00 00    	nop       
    394c:	30 08 00    	nop       
    394e:	14 00 00    	nop       
    3950:	80 00 00    	nop       
    3952:	b4 0a 00    	nop       
    3954:	8c 00 00    	nop       
    3956:	80 00 00    	nop       
    3958:	00 0c 00    	nop       
    395a:	80 00 00    	nop       
    395c:	80 00 00    	nop       
    395e:	44 08 00    	nop       
    3960:	12 00 00    	nop       
    3962:	80 00 00    	nop       
    3964:	00 08 00    	nop       
    3966:	30 00 00    	nop       
    3968:	80 00 00    	nop       
    396a:	5a 08 00    	nop       
    396c:	b8 01 00    	nop       
    396e:	80 00 00    	nop       
    3970:	12 0a 00    	nop       
    3972:	a2 00 00    	nop       
    3974:	80 00 00    	nop       
    3976:	ae 0b 00    	nop       
    3978:	42 00 00    	nop       
    397a:	80 00 00    	nop       
    397c:	f0 0b 00    	nop       
    397e:	10 00 00    	nop       
    3980:	82 00 00    	nop       
    3982:	bd 37 86    	mov.w     0xc6f6, w13
    3984:	33 bd 37    	bra       0xffffb3ec
    3986:	06 35 bd    	subr.w    0x1506
    3988:	37 86 36    	bra       LEU, 0xffff45f8
    398a:	bd 37 86    	mov.w     0xc6f6, w13
    398c:	37 00 00    	nop       
    398e:	40 0b 00    	nop       
    3990:	6e 00 00    	nop       
    3992:	80 00 00    	nop       
    3994:	00 00 00    	nop       
Disassembly of section .text:

00003996 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3996:	02 00 fa    	lnk       #0x2
    3998:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    399a:	1e 00 78    	mov.w     [w14], w0
    399c:	48 00 de    	lsr.w     w0, #0x8, w0
    399e:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    39a0:	1e 00 78    	mov.w     [w14], w0
    39a2:	44 00 de    	lsr.w     w0, #0x4, w0
    39a4:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    39a6:	1e 00 78    	mov.w     [w14], w0
    39a8:	42 00 de    	lsr.w     w0, #0x2, w0
    39aa:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    39ac:	1e 00 78    	mov.w     [w14], w0
    39ae:	00 00 d1    	lsr.w     w0, w0
    39b0:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    39b2:	1e 00 78    	mov.w     [w14], w0
    39b4:	00 40 78    	mov.b     w0, w0
    39b6:	61 40 60    	and.b     w0, #0x1, w0
}
    39b8:	00 80 fa    	ulnk      
    39ba:	00 00 06    	return    
Disassembly of section .isr:

000039bc <__DefaultInterrupt>:
    39bc:	00 40 da    	break     
    39be:	00 00 fe    	reset     
