
miniproject2.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	52 36 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	52 36 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	52 36 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	52 36 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	52 36 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	52 36 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	52 36 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	52 36 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	52 36 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	52 36 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	52 36 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	52 36 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	52 36 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	52 36 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	52 36 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	52 36 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	52 36 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	52 36 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	52 36 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	52 36 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	52 36 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	52 36 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	52 36 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	52 36 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	52 36 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	52 36 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	52 36 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	52 36 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	52 36 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	52 36 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	52 36 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	52 36 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	52 36 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	52 36 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	52 36 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	52 36 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	52 36 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	52 36 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	52 36 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	52 36 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	52 36 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	52 36 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	52 36 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	52 36 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	52 36 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	52 36 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	52 36 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	52 36 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	52 36 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	52 36 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	52 36 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	52 36 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	52 36 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	52 36 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	52 36 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	52 36 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	52 36 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	52 36 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	52 36 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	52 36 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	52 36 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	52 36 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	52 36 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	52 36 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	52 36 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f c8 20    	mov.w     #0xc80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	85 00 07    	rcall     0x1230 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	20 5e 23    	mov.w     #0x35e2, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	6a 33 02    	call      0x336a <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 08 20    	mov.w     #0x86, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	74 28 04    	goto      0x2874 <___digitalRead>
    1216:	00 00 00 
    1218:	30 28 04    	goto      0x2830 <___digitalWrite>
    121a:	00 00 00 
    121c:	96 28 04    	goto      0x2896 <___analogRead>
    121e:	00 00 00 
    1220:	20 2d 04    	goto      0x2d20 <___pwmWrite>
    1222:	00 00 00 
    1224:	f2 2c 04    	goto      0x2cf2 <___pwmRead>
    1226:	00 00 00 
    1228:	8a 2d 04    	goto      0x2d8a <___servoWrite>
    122a:	00 00 00 
    122c:	58 2d 04    	goto      0x2d58 <___servoRead>
    122e:	00 00 00 

00001230 <__crt_start_mode>:
    1230:	00 00 05    	retlw.w   #0x0, w0

00001232 <___subsf3>:
    1232:	03 f0 a2    	btg.w     w3, #0xf

00001234 <___addsf3>:
    1234:	88 9f be    	mov.d     w8, [w15++]
    1236:	8a 9f be    	mov.d     w10, [w15++]
    1238:	8c 1f 78    	mov.w     w12, [w15++]
    123a:	f7 00 07    	rcall     0x142a <__funpack2>
    123c:	fe 00 33    	bra       N, 0x143a <__fPropagateNaN>
    123e:	64 50 e1    	cp.w      w10, #0x4
    1240:	4f 00 32    	bra       Z, 0x12e0 <aisinfinite>

00001242 <checkspecialb>:
    1242:	64 20 e1    	cp.w      w4, #0x4
    1244:	52 00 32    	bra       Z, 0x12ea <return2>
    1246:	03 82 6c    	xor.w     w9, w3, w4
    1248:	07 00 3b    	bra       NN, 0x1258 <getsign>
    124a:	09 05 d0    	sl.w      w9, w10
    124c:	03 06 d0    	sl.w      w3, w12
    124e:	82 0f 54    	sub.w     w8, w2, [w15]
    1250:	0c 06 5d    	subb.w    w10, w12, w12
    1252:	02 00 39    	bra       NC, 0x1258 <getsign>
    1254:	02 00 32    	bra       Z, 0x125a <gotsign>
    1256:	89 01 78    	mov.w     w9, w3

00001258 <getsign>:
    1258:	03 06 78    	mov.w     w3, w12

0000125a <gotsign>:
    125a:	85 82 55    	sub.w     w11, w5, w5
    125c:	04 00 3d    	bra       GE, 0x1266 <expcanonical>
    125e:	00 03 fd    	exch      w0, w6
    1260:	81 03 fd    	exch      w1, w7
    1262:	85 02 ea    	neg.w     w5, w5
    1264:	8b 85 42    	add.w     w5, w11, w11

00001266 <expcanonical>:
    1266:	84 0f 72    	ior.w     w4, w4, [w15]
    1268:	02 00 3b    	bra       NN, 0x126e <nonegate>
    126a:	60 00 10    	subr.w    w0, #0x0, w0
    126c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000126e <nonegate>:
    126e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1270:	00 05 eb    	clr.w     w10
    1272:	7a 28 e1    	cp.w      w5, #0x1a
    1274:	0a 00 39    	bra       NC, 0x128a <aligniter>
    1276:	06 00 78    	mov.w     w6, w0
    1278:	c7 5d dd    	sl.w      w11, #0x7, w11
    127a:	f7 07 b2    	and.w     #0x7f, w7
    127c:	87 80 75    	ior.w     w11, w7, w1
    127e:	2d 00 37    	bra       0x12da <signoff>

00001280 <align>:
    1280:	82 81 71    	ior.w     w3, w2, w3
    1282:	0a 01 78    	mov.w     w10, w2
    1284:	61 05 60    	and.w     w0, #0x1, w10
    1286:	81 80 d1    	asr.w     w1, w1
    1288:	00 80 d3    	rrc.w     w0, w0

0000128a <aligniter>:
    128a:	85 02 e9    	dec.w     w5, w5
    128c:	f9 ff 3b    	bra       NN, 0x1280 <align>

0000128e <aligned>:
    128e:	06 04 40    	add.w     w0, w6, w8
    1290:	87 84 48    	addc.w    w1, w7, w9
    1292:	02 00 3b    	bra       NN, 0x1298 <normalizesum>
    1294:	60 04 14    	subr.w    w8, #0x0, w8
    1296:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001298 <normalizesum>:
    1298:	09 88 a3    	btst.z    w9, #0x8
    129a:	07 00 32    	bra       Z, 0x12aa <checknormal>
    129c:	8a 81 71    	ior.w     w3, w10, w3
    129e:	82 81 71    	ior.w     w3, w2, w3
    12a0:	61 01 64    	and.w     w8, #0x1, w2
    12a2:	89 04 d1    	lsr.w     w9, w9
    12a4:	08 84 d3    	rrc.w     w8, w8
    12a6:	8b 05 e8    	inc.w     w11, w11
    12a8:	17 00 37    	bra       0x12d8 <round>

000012aa <checknormal>:
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	13 00 3a    	bra       NZ, 0x12d4 <discardguard>

000012ae <underflow>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	13 00 34    	bra       LE, 0x12d8 <round>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	0a 44 74    	ior.b     w8, w10, w8
    12ba:	09 78 a3    	btst.z    w9, #0x7
    12bc:	0d 00 3a    	bra       NZ, 0x12d8 <round>

000012be <normalizeloop>:
    12be:	0b 00 e0    	cp0.w     w11
    12c0:	07 00 34    	bra       LE, 0x12d0 <normalizeexit>
    12c2:	8b 05 e9    	dec.w     w11, w11
    12c4:	08 04 44    	add.w     w8, w8, w8
    12c6:	89 84 4c    	addc.w    w9, w9, w9
    12c8:	01 00 3a    	bra       NZ, 0x12cc <normalizetest>
    12ca:	0b 00 20    	mov.w     #0x0, w11

000012cc <normalizetest>:
    12cc:	09 78 a3    	btst.z    w9, #0x7
    12ce:	f7 ff 32    	bra       Z, 0x12be <normalizeloop>

000012d0 <normalizeexit>:
    12d0:	00 01 eb    	clr.w     w2
    12d2:	02 00 37    	bra       0x12d8 <round>

000012d4 <discardguard>:
    12d4:	82 81 71    	ior.w     w3, w2, w3
    12d6:	0a 01 78    	mov.w     w10, w2

000012d8 <round>:
    12d8:	6d 00 07    	rcall     0x13b4 <__fpack>

000012da <signoff>:
    12da:	0c f0 a7    	btsc.w    w12, #0xf
    12dc:	01 f0 a0    	bset.w    w1, #0xf
    12de:	b6 00 37    	bra       0x144c <__fbopExit>

000012e0 <aisinfinite>:
    12e0:	64 20 e1    	cp.w      w4, #0x4
    12e2:	02 00 3a    	bra       NZ, 0x12e8 <return8>
    12e4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12e6:	b6 00 33    	bra       N, 0x1454 <__fbopReturnNaN>

000012e8 <return8>:
    12e8:	08 01 be    	mov.d     w8, w2

000012ea <return2>:
    12ea:	02 00 be    	mov.d     w2, w0
    12ec:	af 00 37    	bra       0x144c <__fbopExit>

000012ee <___divsf3>:
    12ee:	88 9f be    	mov.d     w8, [w15++]
    12f0:	8a 9f be    	mov.d     w10, [w15++]
    12f2:	8c 1f 78    	mov.w     w12, [w15++]
    12f4:	9a 00 07    	rcall     0x142a <__funpack2>
    12f6:	a1 00 33    	bra       N, 0x143a <__fPropagateNaN>
    12f8:	03 86 6c    	xor.w     w9, w3, w12
    12fa:	64 50 e1    	cp.w      w10, #0x4
    12fc:	2e 00 32    	bra       Z, 0x135a <aisinfinite>
    12fe:	64 20 e1    	cp.w      w4, #0x4
    1300:	33 00 32    	bra       Z, 0x1368 <returnZero>
    1302:	61 50 e1    	cp.w      w10, #0x1
    1304:	2f 00 32    	bra       Z, 0x1364 <aiszero>
    1306:	61 20 e1    	cp.w      w4, #0x1
    1308:	31 00 32    	bra       Z, 0x136c <returnInf>

0000130a <finitenonzero>:
    130a:	85 85 55    	sub.w     w11, w5, w11
    130c:	eb 07 b0    	add.w     #0x7e, w11
    130e:	09 00 20    	mov.w     #0x0, w9
    1310:	08 04 20    	mov.w     #0x40, w8
    1312:	05 00 37    	bra       0x131e <diventry>

00001314 <divnext>:
    1314:	08 04 44    	add.w     w8, w8, w8
    1316:	89 84 4c    	addc.w    w9, w9, w9
    1318:	0a 00 31    	bra       C, 0x132e <divdone> <formsticky>

0000131a <divloop>:
    131a:	06 03 43    	add.w     w6, w6, w6
    131c:	87 83 4b    	addc.w    w7, w7, w7

0000131e <diventry>:
    131e:	00 01 53    	sub.w     w6, w0, w2
    1320:	81 81 5b    	subb.w    w7, w1, w3
    1322:	f8 ff 33    	bra       N, 0x1314 <divnext>
    1324:	02 03 be    	mov.d     w2, w6
    1326:	08 00 a0    	bset.w    w8, #0x0
    1328:	08 04 44    	add.w     w8, w8, w8
    132a:	89 84 4c    	addc.w    w9, w9, w9
    132c:	f6 ff 39    	bra       NC, 0x131a <divloop>

0000132e <divdone>:
    132e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1330:	83 01 73    	ior.w     w6, w3, w3
    1332:	01 00 32    	bra       Z, 0x1336 <stickyok>
    1334:	13 00 20    	mov.w     #0x1, w3

00001336 <stickyok>:
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	09 98 a3    	btst.z    w9, #0x9
    133c:	05 00 32    	bra       Z, 0x1348 <guardused>
    133e:	08 00 a7    	btsc.w    w8, #0x0
    1340:	03 00 a0    	bset.w    w3, #0x0
    1342:	89 04 d1    	lsr.w     w9, w9
    1344:	08 84 d3    	rrc.w     w8, w8
    1346:	8b 05 e8    	inc.w     w11, w11

00001348 <guardused>:
    1348:	89 04 d1    	lsr.w     w9, w9
    134a:	08 84 d3    	rrc.w     w8, w8
    134c:	00 01 eb    	clr.w     w2
    134e:	02 81 d2    	rlc.w     w2, w2
    1350:	31 00 07    	rcall     0x13b4 <__fpack>

00001352 <return0>:
    1352:	01 f0 a1    	bclr.w    w1, #0xf
    1354:	0c f0 a7    	btsc.w    w12, #0xf
    1356:	01 f0 a0    	bset.w    w1, #0xf
    1358:	79 00 37    	bra       0x144c <__fbopExit>

0000135a <aisinfinite>:
    135a:	64 20 e1    	cp.w      w4, #0x4
    135c:	7b 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

0000135e <return8>:
    135e:	08 01 be    	mov.d     w8, w2

00001360 <return2>:
    1360:	02 00 be    	mov.d     w2, w0
    1362:	f7 ff 37    	bra       0x1352 <return0>

00001364 <aiszero>:
    1364:	61 20 e1    	cp.w      w4, #0x1
    1366:	76 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

00001368 <returnZero>:
    1368:	60 00 b8    	mul.uu    w0, #0x0, w0
    136a:	f3 ff 37    	bra       0x1352 <return0>

0000136c <returnInf>:
    136c:	00 00 20    	mov.w     #0x0, w0
    136e:	01 f8 27    	mov.w     #0x7f80, w1
    1370:	f0 ff 37    	bra       0x1352 <return0>

00001372 <___eqsf2>:
    1372:	14 00 20    	mov.w     #0x1, w4
    1374:	b6 00 37    	bra       0x14e2 <__fcompare>

00001376 <___gesf2>:
    1376:	f4 ff 2f    	mov.w     #0xffff, w4
    1378:	b4 00 37    	bra       0x14e2 <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	41 00 07    	rcall     0x1400 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatunsisf>:
    13b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13b2:	b2 00 37    	bra       0x1518 <___floatundisf>

000013b4 <__fpack>:
    13b4:	81 00 20    	mov.w     #0x8, w1
    13b6:	61 80 55    	sub.w     w11, #0x1, w0
    13b8:	0b 00 3d    	bra       GE, 0x13d0 <notsubnormal>
    13ba:	0b 00 20    	mov.w     #0x0, w11
    13bc:	61 fe 2f    	mov.w     #0xffe6, w1
    13be:	01 00 e1    	cp.w      w0, w1
    13c0:	1d 00 34    	bra       LE, 0x13fc <zerosig>

000013c2 <subnormal>:
    13c2:	82 81 71    	ior.w     w3, w2, w3
    13c4:	61 01 64    	and.w     w8, #0x1, w2
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8
    13ca:	00 00 e8    	inc.w     w0, w0
    13cc:	fa ff 3a    	bra       NZ, 0x13c2 <subnormal>
    13ce:	71 00 20    	mov.w     #0x7, w1

000013d0 <notsubnormal>:
    13d0:	61 00 64    	and.w     w8, #0x1, w0
    13d2:	03 00 70    	ior.w     w0, w3, w0
    13d4:	02 00 60    	and.w     w0, w2, w0
    13d6:	09 00 32    	bra       Z, 0x13ea <packupandgo>
    13d8:	61 04 44    	add.w     w8, #0x1, w8
    13da:	e0 84 4c    	addc.w    w9, #0x0, w9
    13dc:	09 88 a5    	btst.z    w9, w1
    13de:	05 00 32    	bra       Z, 0x13ea <packupandgo>
    13e0:	8b 05 e8    	inc.w     w11, w11
    13e2:	68 08 e1    	cp.w      w1, #0x8
    13e4:	02 00 3a    	bra       NZ, 0x13ea <packupandgo>
    13e6:	89 04 d1    	lsr.w     w9, w9
    13e8:	08 84 d3    	rrc.w     w8, w8

000013ea <packupandgo>:
    13ea:	f2 0f 20    	mov.w     #0xff, w2
    13ec:	02 58 e1    	cp.w      w11, w2
    13ee:	05 00 3d    	bra       GE, 0x13fa <overflow>
    13f0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f2:	f9 07 b2    	and.w     #0x7f, w9
    13f4:	89 80 75    	ior.w     w11, w9, w1
    13f6:	08 00 78    	mov.w     w8, w0
    13f8:	00 00 06    	return    

000013fa <overflow>:
    13fa:	0b f8 27    	mov.w     #0x7f80, w11

000013fc <zerosig>:
    13fc:	8b 00 78    	mov.w     w11, w1
    13fe:	00 00 05    	retlw.w   #0x0, w0

00001400 <__funpack>:
    1400:	c7 0a de    	lsr.w     w1, #0x7, w5
    1402:	f1 07 b2    	and.w     #0x7f, w1
    1404:	f5 0f b2    	and.w     #0xff, w5
    1406:	08 00 32    	bra       Z, 0x1418 <zeroorsub>
    1408:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140a:	02 00 32    	bra       Z, 0x1410 <nanorinf>

0000140c <finitereturn>:
    140c:	01 70 a0    	bset.w    w1, #0x7
    140e:	24 00 05    	retlw.w   #0x2, w4

00001410 <nanorinf>:
    1410:	81 0f 70    	ior.w     w0, w1, [w15]
    1412:	01 00 32    	bra       Z, 0x1416 <infinite>
    1414:	04 08 05    	retlw.w   #0x80, w4

00001416 <infinite>:
    1416:	44 00 05    	retlw.w   #0x4, w4

00001418 <zeroorsub>:
    1418:	81 0f 70    	ior.w     w0, w1, [w15]
    141a:	02 00 3a    	bra       NZ, 0x1420 <subnormal>
    141c:	14 00 05    	retlw.w   #0x1, w4

0000141e <normalize>:
    141e:	85 02 e9    	dec.w     w5, w5

00001420 <subnormal>:
    1420:	00 00 40    	add.w     w0, w0, w0
    1422:	81 c0 48    	addc.b    w1, w1, w1
    1424:	fc ff 3b    	bra       NN, 0x141e <normalize>
    1426:	01 70 a0    	bset.w    w1, #0x7
    1428:	24 00 05    	retlw.w   #0x2, w4

0000142a <__funpack2>:
    142a:	00 04 be    	mov.d     w0, w8
    142c:	e9 ff 07    	rcall     0x1400 <__funpack>
    142e:	00 03 be    	mov.d     w0, w6
    1430:	04 05 be    	mov.d     w4, w10
    1432:	02 00 be    	mov.d     w2, w0
    1434:	e5 ff 07    	rcall     0x1400 <__funpack>
    1436:	84 4f 75    	ior.b     w10, w4, [w15]
    1438:	00 00 06    	return    

0000143a <__fPropagateNaN>:
    143a:	02 00 be    	mov.d     w2, w0
    143c:	64 50 e1    	cp.w      w10, #0x4
    143e:	05 00 36    	bra       LEU, 0x144a <return0>
    1440:	64 20 e1    	cp.w      w4, #0x4
    1442:	02 00 36    	bra       LEU, 0x1448 <return8>
    1444:	09 68 a3    	btst.z    w9, #0x6
    1446:	01 00 3a    	bra       NZ, 0x144a <return0>

00001448 <return8>:
    1448:	08 00 be    	mov.d     w8, w0

0000144a <return0>:
    144a:	01 60 a0    	bset.w    w1, #0x6

0000144c <__fbopExit>:
    144c:	4f 06 78    	mov.w     [--w15], w12
    144e:	4f 05 be    	mov.d     [--w15], w10
    1450:	4f 04 be    	mov.d     [--w15], w8
    1452:	00 00 06    	return    

00001454 <__fbopReturnNaN>:
    1454:	f0 ff 2f    	mov.w     #0xffff, w0
    1456:	f1 ff 27    	mov.w     #0x7fff, w1
    1458:	f9 ff 37    	bra       0x144c <__fbopExit>

0000145a <___mulsf3>:
    145a:	88 9f be    	mov.d     w8, [w15++]
    145c:	8a 9f be    	mov.d     w10, [w15++]
    145e:	8c 1f 78    	mov.w     w12, [w15++]
    1460:	e4 ff 07    	rcall     0x142a <__funpack2>
    1462:	eb ff 33    	bra       N, 0x143a <__fPropagateNaN>
    1464:	03 86 6c    	xor.w     w9, w3, w12
    1466:	64 50 e1    	cp.w      w10, #0x4
    1468:	24 00 32    	bra       Z, 0x14b2 <aisinfinite>
    146a:	64 20 e1    	cp.w      w4, #0x4
    146c:	27 00 32    	bra       Z, 0x14bc <bisinfinite>
    146e:	61 50 e1    	cp.w      w10, #0x1
    1470:	22 00 32    	bra       Z, 0x14b6 <return8>
    1472:	61 20 e1    	cp.w      w4, #0x1
    1474:	21 00 32    	bra       Z, 0x14b8 <return2>
    1476:	8b 85 42    	add.w     w5, w11, w11
    1478:	eb 07 b1    	sub.w     #0x7e, w11
    147a:	01 34 b8    	mul.uu    w6, w1, w8
    147c:	00 3a b8    	mul.uu    w7, w0, w4
    147e:	08 04 42    	add.w     w4, w8, w8
    1480:	89 84 4a    	addc.w    w5, w9, w9
    1482:	01 3a b8    	mul.uu    w7, w1, w4
    1484:	00 30 b8    	mul.uu    w6, w0, w0
    1486:	88 80 40    	add.w     w1, w8, w1
    1488:	09 01 4a    	addc.w    w4, w9, w2
    148a:	04 00 33    	bra       N, 0x1494 <formsticky>
    148c:	00 00 40    	add.w     w0, w0, w0
    148e:	81 80 48    	addc.w    w1, w1, w1
    1490:	02 01 49    	addc.w    w2, w2, w2
    1492:	8b 05 e9    	dec.w     w11, w11

00001494 <formsticky>:
    1494:	c9 09 dd    	sl.w      w1, #0x9, w3
    1496:	83 01 70    	ior.w     w0, w3, w3
    1498:	01 00 32    	bra       Z, 0x149c <formRandSig>
    149a:	13 00 20    	mov.w     #0x1, w3

0000149c <formRandSig>:
    149c:	c8 14 de    	lsr.w     w2, #0x8, w9
    149e:	48 14 dd    	sl.w      w2, #0x8, w8
    14a0:	47 09 de    	lsr.w     w1, #0x7, w2
    14a2:	12 00 b2    	and.w     #0x1, w2
    14a4:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a6:	08 84 70    	ior.w     w1, w8, w8
    14a8:	85 ff 07    	rcall     0x13b4 <__fpack>

000014aa <return0>:
    14aa:	01 f0 a1    	bclr.w    w1, #0xf
    14ac:	0c f0 a7    	btsc.w    w12, #0xf
    14ae:	01 f0 a0    	bset.w    w1, #0xf
    14b0:	cd ff 37    	bra       0x144c <__fbopExit>

000014b2 <aisinfinite>:
    14b2:	61 20 e1    	cp.w      w4, #0x1
    14b4:	cf ff 32    	bra       Z, 0x1454 <__fbopReturnNaN>

000014b6 <return8>:
    14b6:	08 01 be    	mov.d     w8, w2

000014b8 <return2>:
    14b8:	02 00 be    	mov.d     w2, w0
    14ba:	f7 ff 37    	bra       0x14aa <return0>

000014bc <bisinfinite>:
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	fc ff 3a    	bra       NZ, 0x14b8 <return2>
    14c0:	c9 ff 37    	bra       0x1454 <__fbopReturnNaN>

000014c2 <___udivsi3>:
    14c2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c4:	06 02 20    	mov.w     #0x20, w6

000014c6 <nextbit>:
    14c6:	00 00 d0    	sl.w      w0, w0
    14c8:	81 80 d2    	rlc.w     w1, w1
    14ca:	04 82 d2    	rlc.w     w4, w4
    14cc:	85 82 d2    	rlc.w     w5, w5
    14ce:	00 00 a0    	bset.w    w0, #0x0
    14d0:	02 02 52    	sub.w     w4, w2, w4
    14d2:	83 82 5a    	subb.w    w5, w3, w5
    14d4:	03 00 31    	bra       C, 0x14dc <iterate>
    14d6:	02 02 42    	add.w     w4, w2, w4
    14d8:	83 82 4a    	addc.w    w5, w3, w5
    14da:	00 00 a1    	bclr.w    w0, #0x0

000014dc <iterate>:
    14dc:	06 03 e9    	dec.w     w6, w6
    14de:	f3 ff 3a    	bra       NZ, 0x14c6 <nextbit>
    14e0:	00 00 06    	return    

000014e2 <__fcompare>:
    14e2:	88 9f be    	mov.d     w8, [w15++]
    14e4:	8a 9f be    	mov.d     w10, [w15++]
    14e6:	84 1f 78    	mov.w     w4, [w15++]
    14e8:	a0 ff 07    	rcall     0x142a <__funpack2>
    14ea:	4f 00 78    	mov.w     [--w15], w0
    14ec:	11 00 33    	bra       N, 0x1510 <exit>
    14ee:	f0 ff 2f    	mov.w     #0xffff, w0
    14f0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14f2:	06 00 3b    	bra       NN, 0x1500 <comparemag>
    14f4:	04 05 65    	and.w     w10, w4, w10
    14f6:	0a 00 a7    	btsc.w    w10, #0x0
    14f8:	08 00 37    	bra       0x150a <returnEqual>
    14fa:	09 f0 a6    	btss.w    w9, #0xf
    14fc:	10 00 20    	mov.w     #0x1, w0
    14fe:	08 00 37    	bra       0x1510 <exit>

00001500 <comparemag>:
    1500:	82 0f 54    	sub.w     w8, w2, [w15]
    1502:	83 8f 5c    	subb.w    w9, w3, [w15]
    1504:	03 00 39    	bra       NC, 0x150c <adjust>
    1506:	10 00 20    	mov.w     #0x1, w0
    1508:	01 00 3e    	bra       GTU, 0x150c <adjust>

0000150a <returnEqual>:
    150a:	00 00 20    	mov.w     #0x0, w0

0000150c <adjust>:
    150c:	09 f0 a7    	btsc.w    w9, #0xf
    150e:	00 00 ea    	neg.w     w0, w0

00001510 <exit>:
    1510:	4f 05 be    	mov.d     [--w15], w10
    1512:	4f 04 be    	mov.d     [--w15], w8
    1514:	00 00 e0    	cp0.w     w0
    1516:	00 00 06    	return    

00001518 <___floatundisf>:
    1518:	88 9f be    	mov.d     w8, [w15++]
    151a:	8a 9f be    	mov.d     w10, [w15++]
    151c:	00 82 70    	ior.w     w1, w0, w4
    151e:	04 02 71    	ior.w     w2, w4, w4
    1520:	04 82 71    	ior.w     w3, w4, w4
    1522:	26 00 32    	bra       Z, 0x1570 <return0>
    1524:	00 04 be    	mov.d     w0, w8
    1526:	02 00 be    	mov.d     w2, w0
    1528:	60 11 b8    	mul.uu    w2, #0x0, w2
    152a:	6b 09 20    	mov.w     #0x96, w11
    152c:	95 02 20    	mov.w     #0x29, w5
    152e:	01 82 cf    	ff1l      w1, w4
    1530:	0a 00 39    	bra       NC, 0x1546 <fixshift>
    1532:	05 41 b1    	sub.b     #0x10, w5
    1534:	00 82 cf    	ff1l      w0, w4
    1536:	07 00 39    	bra       NC, 0x1546 <fixshift>
    1538:	05 41 b1    	sub.b     #0x10, w5
    153a:	09 82 cf    	ff1l      w9, w4
    153c:	04 00 39    	bra       NC, 0x1546 <fixshift>
    153e:	05 41 b1    	sub.b     #0x10, w5
    1540:	08 82 cf    	ff1l      w8, w4
    1542:	01 00 39    	bra       NC, 0x1546 <fixshift>
    1544:	05 41 b1    	sub.b     #0x10, w5

00001546 <fixshift>:
    1546:	05 42 52    	sub.b     w4, w5, w4
    1548:	12 00 32    	bra       Z, 0x156e <round>
    154a:	0a 00 3b    	bra       NN, 0x1560 <shiftleft>

0000154c <shiftright>:
    154c:	82 81 71    	ior.w     w3, w2, w3
    154e:	61 01 64    	and.w     w8, #0x1, w2
    1550:	81 00 d1    	lsr.w     w1, w1
    1552:	00 80 d3    	rrc.w     w0, w0
    1554:	89 84 d3    	rrc.w     w9, w9
    1556:	08 84 d3    	rrc.w     w8, w8
    1558:	8b 05 e8    	inc.w     w11, w11
    155a:	04 42 e8    	inc.b     w4, w4
    155c:	f7 ff 3a    	bra       NZ, 0x154c <shiftright>
    155e:	07 00 37    	bra       0x156e <round>

00001560 <shiftleft>:
    1560:	08 04 44    	add.w     w8, w8, w8
    1562:	89 84 4c    	addc.w    w9, w9, w9
    1564:	00 00 48    	addc.w    w0, w0, w0
    1566:	81 80 48    	addc.w    w1, w1, w1
    1568:	8b 05 e9    	dec.w     w11, w11
    156a:	04 42 e9    	dec.b     w4, w4
    156c:	f9 ff 3a    	bra       NZ, 0x1560 <shiftleft>

0000156e <round>:
    156e:	22 ff 07    	rcall     0x13b4 <__fpack>

00001570 <return0>:
    1570:	4f 05 be    	mov.d     [--w15], w10
    1572:	4f 04 be    	mov.d     [--w15], w8
    1574:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	52 36 04    	goto      0x3652 <L0>
    1006:	00 00 00 
    1008:	52 36 04    	goto      0x3652 <L0>
    100a:	00 00 00 
    100c:	52 36 04    	goto      0x3652 <L0>
    100e:	00 00 00 
    1010:	52 36 04    	goto      0x3652 <L0>
    1012:	00 00 00 
    1014:	52 36 04    	goto      0x3652 <L0>
    1016:	00 00 00 
    1018:	52 36 04    	goto      0x3652 <L0>
    101a:	00 00 00 
    101c:	52 36 04    	goto      0x3652 <L0>
    101e:	00 00 00 
    1020:	52 36 04    	goto      0x3652 <L0>
    1022:	00 00 00 
    1024:	b0 1e 04    	goto      0x1eb0 <__T1Interrupt>
    1026:	00 00 00 
    1028:	52 36 04    	goto      0x3652 <L0>
    102a:	00 00 00 
    102c:	52 36 04    	goto      0x3652 <L0>
    102e:	00 00 00 
    1030:	de 1e 04    	goto      0x1ede <__T2Interrupt>
    1032:	00 00 00 
    1034:	0c 1f 04    	goto      0x1f0c <__T3Interrupt>
    1036:	00 00 00 
    1038:	52 36 04    	goto      0x3652 <L0>
    103a:	00 00 00 
    103c:	52 36 04    	goto      0x3652 <L0>
    103e:	00 00 00 
    1040:	52 36 04    	goto      0x3652 <L0>
    1042:	00 00 00 
    1044:	52 36 04    	goto      0x3652 <L0>
    1046:	00 00 00 
    1048:	52 36 04    	goto      0x3652 <L0>
    104a:	00 00 00 
    104c:	52 36 04    	goto      0x3652 <L0>
    104e:	00 00 00 
    1050:	52 36 04    	goto      0x3652 <L0>
    1052:	00 00 00 
    1054:	52 36 04    	goto      0x3652 <L0>
    1056:	00 00 00 
    1058:	52 36 04    	goto      0x3652 <L0>
    105a:	00 00 00 
    105c:	52 36 04    	goto      0x3652 <L0>
    105e:	00 00 00 
    1060:	52 36 04    	goto      0x3652 <L0>
    1062:	00 00 00 
    1064:	52 36 04    	goto      0x3652 <L0>
    1066:	00 00 00 
    1068:	52 36 04    	goto      0x3652 <L0>
    106a:	00 00 00 
    106c:	52 36 04    	goto      0x3652 <L0>
    106e:	00 00 00 
    1070:	3a 1f 04    	goto      0x1f3a <__T4Interrupt>
    1072:	00 00 00 
    1074:	68 1f 04    	goto      0x1f68 <__T5Interrupt>
    1076:	00 00 00 
    1078:	52 36 04    	goto      0x3652 <L0>
    107a:	00 00 00 
    107c:	52 36 04    	goto      0x3652 <L0>
    107e:	00 00 00 
    1080:	52 36 04    	goto      0x3652 <L0>
    1082:	00 00 00 
    1084:	52 36 04    	goto      0x3652 <L0>
    1086:	00 00 00 
    1088:	52 36 04    	goto      0x3652 <L0>
    108a:	00 00 00 
    108c:	52 36 04    	goto      0x3652 <L0>
    108e:	00 00 00 
    1090:	52 36 04    	goto      0x3652 <L0>
    1092:	00 00 00 
    1094:	52 36 04    	goto      0x3652 <L0>
    1096:	00 00 00 
    1098:	52 36 04    	goto      0x3652 <L0>
    109a:	00 00 00 
    109c:	52 36 04    	goto      0x3652 <L0>
    109e:	00 00 00 
    10a0:	52 36 04    	goto      0x3652 <L0>
    10a2:	00 00 00 
    10a4:	52 36 04    	goto      0x3652 <L0>
    10a6:	00 00 00 
    10a8:	52 36 04    	goto      0x3652 <L0>
    10aa:	00 00 00 
    10ac:	52 36 04    	goto      0x3652 <L0>
    10ae:	00 00 00 
    10b0:	52 36 04    	goto      0x3652 <L0>
    10b2:	00 00 00 
    10b4:	52 36 04    	goto      0x3652 <L0>
    10b6:	00 00 00 
    10b8:	52 36 04    	goto      0x3652 <L0>
    10ba:	00 00 00 
    10bc:	52 36 04    	goto      0x3652 <L0>
    10be:	00 00 00 
    10c0:	52 36 04    	goto      0x3652 <L0>
    10c2:	00 00 00 
    10c4:	52 36 04    	goto      0x3652 <L0>
    10c6:	00 00 00 
    10c8:	52 36 04    	goto      0x3652 <L0>
    10ca:	00 00 00 
    10cc:	52 36 04    	goto      0x3652 <L0>
    10ce:	00 00 00 
    10d0:	52 36 04    	goto      0x3652 <L0>
    10d2:	00 00 00 
    10d4:	52 36 04    	goto      0x3652 <L0>
    10d6:	00 00 00 
    10d8:	52 36 04    	goto      0x3652 <L0>
    10da:	00 00 00 
    10dc:	52 36 04    	goto      0x3652 <L0>
    10de:	00 00 00 
    10e0:	52 36 04    	goto      0x3652 <L0>
    10e2:	00 00 00 
    10e4:	52 36 04    	goto      0x3652 <L0>
    10e6:	00 00 00 
    10e8:	52 36 04    	goto      0x3652 <L0>
    10ea:	00 00 00 
    10ec:	52 36 04    	goto      0x3652 <L0>
    10ee:	00 00 00 
    10f0:	52 36 04    	goto      0x3652 <L0>
    10f2:	00 00 00 
    10f4:	52 36 04    	goto      0x3652 <L0>
    10f6:	00 00 00 
    10f8:	52 36 04    	goto      0x3652 <L0>
    10fa:	00 00 00 
    10fc:	52 36 04    	goto      0x3652 <L0>
    10fe:	00 00 00 
    1100:	52 36 04    	goto      0x3652 <L0>
    1102:	00 00 00 
    1104:	52 36 04    	goto      0x3652 <L0>
    1106:	00 00 00 
    1108:	52 36 04    	goto      0x3652 <L0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	52 36 04    	goto      0x3652 <L0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009576 <_Device>:
    9576:	12 01       	.word 0x112
    9578:	00 02       	.word 0x200
    957a:	00 00       	.word 0
    957c:	00 40       	.word 0x4000
    957e:	66 66       	.word 0x6666
    9580:	03 00       	.word 0x3
    9582:	00 00       	.word 0
    9584:	01 02       	.word 0x201
    9586:	00 01       	.word 0x100

00009588 <_Configuration1>:
    9588:	09 02       	.word 0x209
    958a:	12 00       	.word 0x12
    958c:	01 01       	.word 0x101
    958e:	00 a0       	.word 0xa000
    9590:	32 09       	.word 0x932
    9592:	04 00       	.word 0x4
    9594:	00 00       	.word 0
    9596:	ff 00       	.word 0xff
    9598:	ff 00       	.word 0xff

0000959a <_String0>:
    959a:	04 03       	.word 0x304
    959c:	09 04       	.word 0x409

0000959e <_String1>:
    959e:	1a 03       	.word 0x31a
    95a0:	4f 00       	.word 0x4f
    95a2:	6c 00       	.word 0x6c
    95a4:	69 00       	.word 0x69
    95a6:	6e 00       	.word 0x6e
    95a8:	20 00       	.word 0x20
    95aa:	43 00       	.word 0x43
    95ac:	6f 00       	.word 0x6f
    95ae:	6c 00       	.word 0x6c
    95b0:	6c 00       	.word 0x6c
    95b2:	65 00       	.word 0x65
    95b4:	67 00       	.word 0x67
    95b6:	65 00       	.word 0x65

000095b8 <_String2>:
    95b8:	44 03       	.word 0x344
    95ba:	45 00       	.word 0x45
    95bc:	6c 00       	.word 0x6c
    95be:	65 00       	.word 0x65
    95c0:	63 00       	.word 0x63
    95c2:	61 00       	.word 0x61
    95c4:	6e 00       	.word 0x6e
    95c6:	69 00       	.word 0x69
    95c8:	73 00       	.word 0x73
    95ca:	6d 00       	.word 0x6d
    95cc:	73 00       	.word 0x73
    95ce:	20 00       	.word 0x20
    95d0:	4d 00       	.word 0x4d
    95d2:	69 00       	.word 0x69
    95d4:	6e 00       	.word 0x6e
    95d6:	69 00       	.word 0x69
    95d8:	70 00       	.word 0x70
    95da:	72 00       	.word 0x72
    95dc:	6f 00       	.word 0x6f
    95de:	6a 00       	.word 0x6a
    95e0:	65 00       	.word 0x65
    95e2:	63 00       	.word 0x63
    95e4:	74 00       	.word 0x74
    95e6:	20 00       	.word 0x20
    95e8:	32 00       	.word 0x32
    95ea:	20 00       	.word 0x20
    95ec:	46 00       	.word 0x46
    95ee:	69 00       	.word 0x69
    95f0:	72 00       	.word 0x72
    95f2:	6d 00       	.word 0x6d
    95f4:	77 00       	.word 0x77
    95f6:	61 00       	.word 0x61
    95f8:	72 00       	.word 0x72
    95fa:	65 00       	.word 0x65
Disassembly of section .text:

000015fc <_InitUSB>:
    15fc:	04 00 fa    	lnk       #0x4
    15fe:	94 24 a8    	bset.b    0x494, #0x1
    1600:	96 24 ef    	clr.w     0x496
    1602:	f0 0f 20    	mov.w     #0xff, w0
    1604:	70 24 88    	mov.w     w0, 0x48e
    1606:	94 24 a9    	bclr.b    0x494, #0x1
    1608:	a0 4a 20    	mov.w     #0x4aa, w0
    160a:	10 07 98    	mov.w     w0, [w14+2]
    160c:	00 40 eb    	clr.b     w0
    160e:	00 4f 78    	mov.b     w0, [w14]
    1610:	07 00 37    	bra       0x1620 <.L2>

00001612 <.L3>:
    1612:	1e 80 fb    	ze        [w14], w0
    1614:	00 00 40    	add.w     w0, w0, w0
    1616:	9e 00 90    	mov.w     [w14+2], w1
    1618:	00 80 40    	add.w     w1, w0, w0
    161a:	80 00 eb    	clr.w     w1
    161c:	01 08 78    	mov.w     w1, [w0]
    161e:	1e 4f e8    	inc.b     [w14], [w14]

00001620 <.L2>:
    1620:	1e 40 78    	mov.b     [w14], w0
    1622:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1624:	f6 ff 36    	bra       LEU, 0x1612 <.L3>
    1626:	d0 00 20    	mov.w     #0xd, w0
    1628:	50 25 88    	mov.w     w0, 0x4aa
    162a:	00 c0 20    	mov.w     #0xc00, w0
    162c:	01 c4 b3    	mov.b     #0x40, w1
    162e:	01 48 78    	mov.b     w1, [w0]
    1630:	60 aa 20    	mov.w     #0xaa6, w0
    1632:	10 60 88    	mov.w     w0, 0xc02
    1634:	10 c0 20    	mov.w     #0xc01, w0
    1636:	81 c8 b3    	mov.b     #0x88, w1
    1638:	01 48 78    	mov.b     w1, [w0]
    163a:	60 ae 20    	mov.w     #0xae6, w0
    163c:	30 60 88    	mov.w     w0, 0xc06
    163e:	50 c0 20    	mov.w     #0xc05, w0
    1640:	81 c0 b3    	mov.b     #0x8, w1
    1642:	01 48 78    	mov.b     w1, [w0]
    1644:	a6 24 ef    	clr.w     0x4a6
    1646:	a8 24 ef    	clr.w     0x4a8
    1648:	00 c0 20    	mov.w     #0xc00, w0
    164a:	48 00 de    	lsr.w     w0, #0x8, w0
    164c:	c0 24 88    	mov.w     w0, 0x498
    164e:	86 44 a8    	bset.b    0x486, #0x2
    1650:	86 e4 a8    	bset.b    0x486, #0x7
    1652:	88 04 a8    	bset.b    0x488, #0x0
    1654:	94 a4 a9    	bclr.b    0x494, #0x5
    1656:	3d 68 ef    	clr.b     0x83d
    1658:	40 68 ef    	clr.b     0x840
    165a:	10 c0 b3    	mov.b     #0x1, w0
    165c:	3e e8 b7    	mov.b     WREG, 0x83e
    165e:	60 b2 20    	mov.w     #0xb26, w0
    1660:	80 c0 eb    	setm.b    w1
    1662:	01 48 78    	mov.b     w1, [w0]
    1664:	70 b2 20    	mov.w     #0xb27, w0
    1666:	80 c0 eb    	setm.b    w1
    1668:	01 48 78    	mov.b     w1, [w0]
    166a:	00 00 00    	nop       

0000166c <.L4>:
    166c:	a1 24 80    	mov.w     0x494, w1
    166e:	00 04 20    	mov.w     #0x40, w0
    1670:	00 80 60    	and.w     w1, w0, w0
    1672:	00 00 e0    	cp0.w     w0
    1674:	fb ff 3a    	bra       NZ, 0x166c <.L4>
    1676:	00 80 fa    	ulnk      
    1678:	00 00 06    	return    

0000167a <_ServiceUSB>:
    167a:	06 00 fa    	lnk       #0x6
    167c:	50 24 80    	mov.w     0x48a, w0
    167e:	62 00 60    	and.w     w0, #0x2, w0
    1680:	00 00 e0    	cp0.w     w0
    1682:	05 00 32    	bra       Z, 0x168e <.L6>
    1684:	f0 0f 20    	mov.w     #0xff, w0
    1686:	70 24 88    	mov.w     w0, 0x48e
    1688:	20 00 20    	mov.w     #0x2, w0
    168a:	50 24 88    	mov.w     w0, 0x48a
    168c:	90 00 37    	bra       0x17ae <.L5>

0000168e <.L6>:
    168e:	50 24 80    	mov.w     0x48a, w0
    1690:	64 00 60    	and.w     w0, #0x4, w0
    1692:	00 00 e0    	cp0.w     w0
    1694:	03 00 32    	bra       Z, 0x169c <.L8>
    1696:	40 00 20    	mov.w     #0x4, w0
    1698:	50 24 88    	mov.w     w0, 0x48a
    169a:	89 00 37    	bra       0x17ae <.L5>

0000169c <.L8>:
    169c:	50 24 80    	mov.w     0x48a, w0
    169e:	70 00 60    	and.w     w0, #0x10, w0
    16a0:	00 00 e0    	cp0.w     w0
    16a2:	03 00 32    	bra       Z, 0x16aa <.L9>
    16a4:	00 01 20    	mov.w     #0x10, w0
    16a6:	50 24 88    	mov.w     w0, 0x48a
    16a8:	82 00 37    	bra       0x17ae <.L5>

000016aa <.L9>:
    16aa:	51 24 80    	mov.w     0x48a, w1
    16ac:	00 02 20    	mov.w     #0x20, w0
    16ae:	00 80 60    	and.w     w1, w0, w0
    16b0:	00 00 e0    	cp0.w     w0
    16b2:	03 00 32    	bra       Z, 0x16ba <.L10>
    16b4:	00 02 20    	mov.w     #0x20, w0
    16b6:	50 24 88    	mov.w     w0, 0x48a
    16b8:	7a 00 37    	bra       0x17ae <.L5>

000016ba <.L10>:
    16ba:	51 24 80    	mov.w     0x48a, w1
    16bc:	00 08 20    	mov.w     #0x80, w0
    16be:	00 80 60    	and.w     w1, w0, w0
    16c0:	00 00 e0    	cp0.w     w0
    16c2:	03 00 32    	bra       Z, 0x16ca <.L11>
    16c4:	00 08 20    	mov.w     #0x80, w0
    16c6:	50 24 88    	mov.w     w0, 0x48a
    16c8:	72 00 37    	bra       0x17ae <.L5>

000016ca <.L11>:
    16ca:	50 24 80    	mov.w     0x48a, w0
    16cc:	61 00 60    	and.w     w0, #0x1, w0
    16ce:	00 00 e0    	cp0.w     w0
    16d0:	34 00 32    	bra       Z, 0x173a <.L12>
    16d2:	3d 68 ef    	clr.b     0x83d
    16d4:	08 00 37    	bra       0x16e6 <.L13>

000016d6 <.L14>:
    16d6:	80 00 20    	mov.w     #0x8, w0
    16d8:	50 24 88    	mov.w     w0, 0x48a
	...

000016e6 <.L13>:
    16e6:	50 24 80    	mov.w     0x48a, w0
    16e8:	68 00 60    	and.w     w0, #0x8, w0
    16ea:	00 00 e0    	cp0.w     w0
    16ec:	f4 ff 3a    	bra       NZ, 0x16d6 <.L14>
    16ee:	a0 4a 20    	mov.w     #0x4aa, w0
    16f0:	10 07 98    	mov.w     w0, [w14+2]
    16f2:	00 40 eb    	clr.b     w0
    16f4:	00 4f 78    	mov.b     w0, [w14]
    16f6:	07 00 37    	bra       0x1706 <.L15>

000016f8 <.L16>:
    16f8:	1e 80 fb    	ze        [w14], w0
    16fa:	00 00 40    	add.w     w0, w0, w0
    16fc:	9e 00 90    	mov.w     [w14+2], w1
    16fe:	00 80 40    	add.w     w1, w0, w0
    1700:	80 00 eb    	clr.w     w1
    1702:	01 08 78    	mov.w     w1, [w0]
    1704:	1e 4f e8    	inc.b     [w14], [w14]

00001706 <.L15>:
    1706:	1e 40 78    	mov.b     [w14], w0
    1708:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    170a:	f6 ff 36    	bra       LEU, 0x16f8 <.L16>
    170c:	00 c0 20    	mov.w     #0xc00, w0
    170e:	01 c4 b3    	mov.b     #0x40, w1
    1710:	01 48 78    	mov.b     w1, [w0]
    1712:	60 aa 20    	mov.w     #0xaa6, w0
    1714:	10 60 88    	mov.w     w0, 0xc02
    1716:	10 c0 20    	mov.w     #0xc01, w0
    1718:	81 c8 b3    	mov.b     #0x88, w1
    171a:	01 48 78    	mov.b     w1, [w0]
    171c:	60 ae 20    	mov.w     #0xae6, w0
    171e:	30 60 88    	mov.w     w0, 0xc06
    1720:	50 c0 20    	mov.w     #0xc05, w0
    1722:	81 c0 b3    	mov.b     #0x8, w1
    1724:	01 48 78    	mov.b     w1, [w0]
    1726:	96 24 ef    	clr.w     0x496
    1728:	f0 0f 20    	mov.w     #0xff, w0
    172a:	50 24 88    	mov.w     w0, 0x48a
    172c:	d0 00 20    	mov.w     #0xd, w0
    172e:	50 25 88    	mov.w     w0, 0x4aa
    1730:	10 c0 b3    	mov.b     #0x1, w0
    1732:	40 e8 b7    	mov.b     WREG, 0x840
    1734:	10 c0 b3    	mov.b     #0x1, w0
    1736:	3e e8 b7    	mov.b     WREG, 0x83e
    1738:	3a 00 37    	bra       0x17ae <.L5>

0000173a <.L12>:
    173a:	50 24 80    	mov.w     0x48a, w0
    173c:	68 00 60    	and.w     w0, #0x8, w0
    173e:	00 00 e0    	cp0.w     w0
    1740:	36 00 32    	bra       Z, 0x17ae <.L5>
    1742:	90 24 80    	mov.w     0x492, w0
    1744:	43 00 de    	lsr.w     w0, #0x3, w0
    1746:	c2 00 dd    	sl.w      w0, #0x2, w1
    1748:	00 c0 20    	mov.w     #0xc00, w0
    174a:	00 80 40    	add.w     w1, w0, w0
    174c:	20 07 98    	mov.w     w0, [w14+4]
    174e:	2e 00 90    	mov.w     [w14+4], w0
    1750:	10 40 90    	mov.b     [w0+1], w0
    1752:	31 e8 b7    	mov.b     WREG, 0x831
    1754:	2e 00 90    	mov.w     [w14+4], w0
    1756:	10 40 78    	mov.b     [w0], w0
    1758:	30 e8 b7    	mov.b     WREG, 0x830
    175a:	2e 00 90    	mov.w     [w14+4], w0
    175c:	10 00 90    	mov.w     [w0+2], w0
    175e:	90 41 88    	mov.w     w0, 0x832
    1760:	90 24 80    	mov.w     0x492, w0
    1762:	00 40 78    	mov.b     w0, w0
    1764:	3f e8 b7    	mov.b     WREG, 0x83f
    1766:	80 00 20    	mov.w     #0x8, w0
    1768:	50 24 88    	mov.w     w0, 0x48a
    176a:	3c 68 ef    	clr.b     0x83c
    176c:	31 c8 bf    	mov.b     0x831, WREG
    176e:	80 80 fb    	ze        w0, w1
    1770:	c0 03 20    	mov.w     #0x3c, w0
    1772:	00 80 60    	and.w     w1, w0, w0
    1774:	41 02 20    	mov.w     #0x24, w1
    1776:	81 0f 50    	sub.w     w0, w1, [w15]
    1778:	08 00 32    	bra       Z, 0x178a <.L19>
    177a:	41 03 20    	mov.w     #0x34, w1
    177c:	81 0f 50    	sub.w     w0, w1, [w15]
    177e:	03 00 32    	bra       Z, 0x1786 <.L20>
    1780:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1782:	05 00 32    	bra       Z, 0x178e <.L18>
    1784:	05 00 37    	bra       0x1790 <.L17>

00001786 <.L20>:
    1786:	15 00 07    	rcall     0x17b2 <_ProcessSetupToken> <L0> <.LFB2> <.LFE1>
    1788:	03 00 37    	bra       0x1790 <.L17>

0000178a <.L19>:
    178a:	da 02 07    	rcall     0x1d40 <_ProcessInToken> <L0> <.LFB4> <.LFE3>
    178c:	01 00 37    	bra       0x1790 <.L17>

0000178e <.L18>:
    178e:	0c 03 07    	rcall     0x1da8 <_ProcessOutToken> <L0> <.LFB5> <.LFE4>

00001790 <.L17>:
    1790:	3c c8 bf    	mov.b     0x83c, WREG
    1792:	00 80 fb    	ze        w0, w0
    1794:	61 00 60    	and.w     w0, #0x1, w0
    1796:	00 40 78    	mov.b     w0, w0
    1798:	00 04 e0    	cp0.b     w0
    179a:	09 00 32    	bra       Z, 0x17ae <.L5>
    179c:	00 c0 20    	mov.w     #0xc00, w0
    179e:	01 c4 b3    	mov.b     #0x40, w1
    17a0:	01 48 78    	mov.b     w1, [w0]
    17a2:	50 c0 20    	mov.w     #0xc05, w0
    17a4:	41 c8 b3    	mov.b     #0x84, w1
    17a6:	01 48 78    	mov.b     w1, [w0]
    17a8:	10 c0 20    	mov.w     #0xc01, w0
    17aa:	41 c8 b3    	mov.b     #0x84, w1
    17ac:	01 48 78    	mov.b     w1, [w0]

000017ae <.L5>:
    17ae:	00 80 fa    	ulnk      
    17b0:	00 00 06    	return    

000017b2 <_ProcessSetupToken>:
    17b2:	02 00 fa    	lnk       #0x2
    17b4:	91 41 80    	mov.w     0x832, w1
    17b6:	01 0f 78    	mov.w     w1, [w14]
    17b8:	1e 00 78    	mov.w     [w14], w0
    17ba:	90 40 78    	mov.b     [w0], w1
    17bc:	40 83 20    	mov.w     #0x834, w0
    17be:	01 48 78    	mov.b     w1, [w0]
    17c0:	1e 0f e8    	inc.w     [w14], [w14]
    17c2:	1e 00 78    	mov.w     [w14], w0
    17c4:	90 40 78    	mov.b     [w0], w1
    17c6:	40 83 20    	mov.w     #0x834, w0
    17c8:	11 40 98    	mov.b     w1, [w0+1]
    17ca:	1e 0f e8    	inc.w     [w14], [w14]
    17cc:	1e 00 78    	mov.w     [w14], w0
    17ce:	90 40 78    	mov.b     [w0], w1
    17d0:	40 83 20    	mov.w     #0x834, w0
    17d2:	21 40 98    	mov.b     w1, [w0+2]
    17d4:	1e 0f e8    	inc.w     [w14], [w14]
    17d6:	1e 00 78    	mov.w     [w14], w0
    17d8:	90 40 78    	mov.b     [w0], w1
    17da:	40 83 20    	mov.w     #0x834, w0
    17dc:	31 40 98    	mov.b     w1, [w0+3]
    17de:	1e 0f e8    	inc.w     [w14], [w14]
    17e0:	1e 00 78    	mov.w     [w14], w0
    17e2:	90 40 78    	mov.b     [w0], w1
    17e4:	40 83 20    	mov.w     #0x834, w0
    17e6:	41 40 98    	mov.b     w1, [w0+4]
    17e8:	1e 0f e8    	inc.w     [w14], [w14]
    17ea:	1e 00 78    	mov.w     [w14], w0
    17ec:	90 40 78    	mov.b     [w0], w1
    17ee:	40 83 20    	mov.w     #0x834, w0
    17f0:	51 40 98    	mov.b     w1, [w0+5]
    17f2:	1e 0f e8    	inc.w     [w14], [w14]
    17f4:	1e 00 78    	mov.w     [w14], w0
    17f6:	90 40 78    	mov.b     [w0], w1
    17f8:	40 83 20    	mov.w     #0x834, w0
    17fa:	61 40 98    	mov.b     w1, [w0+6]
    17fc:	1e 0f e8    	inc.w     [w14], [w14]
    17fe:	1e 00 78    	mov.w     [w14], w0
    1800:	90 40 78    	mov.b     [w0], w1
    1802:	40 83 20    	mov.w     #0x834, w0
    1804:	71 40 98    	mov.b     w1, [w0+7]
    1806:	1e 0f e8    	inc.w     [w14], [w14]
    1808:	00 c0 20    	mov.w     #0xc00, w0
    180a:	01 c4 b3    	mov.b     #0x40, w1
    180c:	01 48 78    	mov.b     w1, [w0]
    180e:	50 c0 20    	mov.w     #0xc05, w0
    1810:	81 c0 b3    	mov.b     #0x8, w1
    1812:	01 48 78    	mov.b     w1, [w0]
    1814:	40 83 20    	mov.w     #0x834, w0
    1816:	10 40 78    	mov.b     [w0], w0
    1818:	00 04 e0    	cp0.b     w0
    181a:	06 00 35    	bra       LT, 0x1828 <.L22>
    181c:	40 83 20    	mov.w     #0x834, w0
    181e:	30 00 90    	mov.w     [w0+6], w0
    1820:	00 00 e0    	cp0.w     w0
    1822:	02 00 32    	bra       Z, 0x1828 <.L22>
    1824:	80 cc b3    	mov.b     #0xc8, w0
    1826:	01 00 37    	bra       0x182a <.L23>

00001828 <.L22>:
    1828:	80 c8 b3    	mov.b     #0x88, w0

0000182a <.L23>:
    182a:	11 c0 20    	mov.w     #0xc01, w1
    182c:	80 48 78    	mov.b     w0, [w1]
    182e:	94 a4 a9    	bclr.b    0x494, #0x5
    1830:	60 b2 20    	mov.w     #0xb26, w0
    1832:	80 c0 eb    	setm.b    w1
    1834:	01 48 78    	mov.b     w1, [w0]
    1836:	70 b2 20    	mov.w     #0xb27, w0
    1838:	80 c0 eb    	setm.b    w1
    183a:	01 48 78    	mov.b     w1, [w0]
    183c:	40 83 20    	mov.w     #0x834, w0
    183e:	10 40 78    	mov.b     [w0], w0
    1840:	80 80 fb    	ze        w0, w1
    1842:	00 06 20    	mov.w     #0x60, w0
    1844:	00 80 60    	and.w     w1, w0, w0
    1846:	00 00 e0    	cp0.w     w0
    1848:	04 00 32    	bra       Z, 0x1852 <.L25>
    184a:	01 04 20    	mov.w     #0x40, w1
    184c:	81 0f 50    	sub.w     w0, w1, [w15]
    184e:	03 00 32    	bra       Z, 0x1856 <.L26>
    1850:	04 00 37    	bra       0x185a <.L28>

00001852 <.L25>:
    1852:	08 00 07    	rcall     0x1864 <_StandardRequests> <L0> <.LFB3> <.LFE2>
    1854:	05 00 37    	bra       0x1860 <.L21>

00001856 <.L26>:
    1856:	d8 0c 07    	rcall     0x3208 <_VendorRequests> <L0> <.LFB1> <.LFE0>
    1858:	03 00 37    	bra       0x1860 <.L21>

0000185a <.L28>:
    185a:	3c c8 bf    	mov.b     0x83c, WREG
    185c:	00 04 a0    	bset.b    w0, #0x0
    185e:	3c e8 b7    	mov.b     WREG, 0x83c

00001860 <.L21>:
    1860:	00 80 fa    	ulnk      
    1862:	00 00 06    	return    

00001864 <_StandardRequests>:
    1864:	06 00 fa    	lnk       #0x6
    1866:	40 83 20    	mov.w     #0x834, w0
    1868:	10 40 90    	mov.b     [w0+1], w0
    186a:	00 80 fb    	ze        w0, w0
    186c:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    186e:	77 01 32    	bra       Z, 0x1b5e <.L34>
    1870:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1872:	0c 00 3c    	bra       GT, 0x188c <.L39>
    1874:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1876:	bf 00 32    	bra       Z, 0x19f6 <.L32>
    1878:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    187a:	03 00 3c    	bra       GT, 0x1882 <.L40>
    187c:	00 00 e0    	cp0.w     w0
    187e:	12 00 32    	bra       Z, 0x18a4 <.L31>
    1880:	5a 02 37    	bra       0x1d36 <.L30>

00001882 <.L40>:
    1882:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1884:	b8 00 32    	bra       Z, 0x19f6 <.L32>
    1886:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1888:	4a 01 32    	bra       Z, 0x1b1e <.L33>
    188a:	55 02 37    	bra       0x1d36 <.L30>

0000188c <.L39>:
    188c:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    188e:	ed 01 32    	bra       Z, 0x1c6a <.L36>
    1890:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1892:	03 00 3c    	bra       GT, 0x189a <.L41>
    1894:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1896:	de 01 32    	bra       Z, 0x1c54 <.L35>
    1898:	4e 02 37    	bra       0x1d36 <.L30>

0000189a <.L41>:
    189a:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    189c:	10 02 32    	bra       Z, 0x1cbe <.L37>
    189e:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    18a0:	29 02 32    	bra       Z, 0x1cf4 <.L38>
    18a2:	49 02 37    	bra       0x1d36 <.L30>

000018a4 <.L31>:
    18a4:	40 83 20    	mov.w     #0x834, w0
    18a6:	10 40 78    	mov.b     [w0], w0
    18a8:	00 80 fb    	ze        w0, w0
    18aa:	7f 00 60    	and.w     w0, #0x1f, w0
    18ac:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18ae:	13 00 32    	bra       Z, 0x18d6 <.L44>
    18b0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18b2:	32 00 32    	bra       Z, 0x1918 <.L45>
    18b4:	00 00 e0    	cp0.w     w0
    18b6:	9a 00 3a    	bra       NZ, 0x19ec <.L128>
    18b8:	30 60 80    	mov.w     0xc06, w0
    18ba:	e1 83 20    	mov.w     #0x83e, w1
    18bc:	91 40 78    	mov.b     [w1], w1
    18be:	01 48 78    	mov.b     w1, [w0]
    18c0:	30 60 80    	mov.w     0xc06, w0
    18c2:	00 00 e8    	inc.w     w0, w0
    18c4:	80 40 eb    	clr.b     w1
    18c6:	01 48 78    	mov.b     w1, [w0]
    18c8:	40 c0 20    	mov.w     #0xc04, w0
    18ca:	21 c0 b3    	mov.b     #0x2, w1
    18cc:	01 48 78    	mov.b     w1, [w0]
    18ce:	50 c0 20    	mov.w     #0xc05, w0
    18d0:	81 cc b3    	mov.b     #0xc8, w1
    18d2:	01 48 78    	mov.b     w1, [w0]
    18d4:	8f 00 37    	bra       0x19f4 <.L46>

000018d6 <.L44>:
    18d6:	40 c8 bf    	mov.b     0x840, WREG
    18d8:	00 80 fb    	ze        w0, w0
    18da:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18dc:	03 00 32    	bra       Z, 0x18e4 <.L48>
    18de:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18e0:	05 00 32    	bra       Z, 0x18ec <.L49>
    18e2:	19 00 37    	bra       0x1916 <.L47>

000018e4 <.L48>:
    18e4:	3c c8 bf    	mov.b     0x83c, WREG
    18e6:	00 04 a0    	bset.b    w0, #0x0
    18e8:	3c e8 b7    	mov.b     WREG, 0x83c
    18ea:	15 00 37    	bra       0x1916 <.L47>

000018ec <.L49>:
    18ec:	40 83 20    	mov.w     #0x834, w0
    18ee:	40 40 90    	mov.b     [w0+4], w0
    18f0:	00 04 e0    	cp0.b     w0
    18f2:	0e 00 3a    	bra       NZ, 0x1910 <.L50>
    18f4:	30 60 80    	mov.w     0xc06, w0
    18f6:	80 40 eb    	clr.b     w1
    18f8:	01 48 78    	mov.b     w1, [w0]
    18fa:	30 60 80    	mov.w     0xc06, w0
    18fc:	00 00 e8    	inc.w     w0, w0
    18fe:	80 40 eb    	clr.b     w1
    1900:	01 48 78    	mov.b     w1, [w0]
    1902:	40 c0 20    	mov.w     #0xc04, w0
    1904:	21 c0 b3    	mov.b     #0x2, w1
    1906:	01 48 78    	mov.b     w1, [w0]
    1908:	50 c0 20    	mov.w     #0xc05, w0
    190a:	81 cc b3    	mov.b     #0xc8, w1
    190c:	01 48 78    	mov.b     w1, [w0]
    190e:	03 00 37    	bra       0x1916 <.L47>

00001910 <.L50>:
    1910:	3c c8 bf    	mov.b     0x83c, WREG
    1912:	00 04 a0    	bset.b    w0, #0x0
    1914:	3c e8 b7    	mov.b     WREG, 0x83c

00001916 <.L47>:
    1916:	6e 00 37    	bra       0x19f4 <.L46>

00001918 <.L45>:
    1918:	40 c8 bf    	mov.b     0x840, WREG
    191a:	00 80 fb    	ze        w0, w0
    191c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    191e:	03 00 32    	bra       Z, 0x1926 <.L52>
    1920:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1922:	29 00 32    	bra       Z, 0x1976 <.L53>
    1924:	5f 00 37    	bra       0x19e4 <.L129>

00001926 <.L52>:
    1926:	40 83 20    	mov.w     #0x834, w0
    1928:	40 40 90    	mov.b     [w0+4], w0
    192a:	00 80 fb    	ze        w0, w0
    192c:	6f 00 60    	and.w     w0, #0xf, w0
    192e:	00 00 e0    	cp0.w     w0
    1930:	1e 00 3a    	bra       NZ, 0x196e <.L54>
    1932:	31 60 80    	mov.w     0xc06, w1
    1934:	40 83 20    	mov.w     #0x834, w0
    1936:	40 40 90    	mov.b     [w0+4], w0
    1938:	00 04 e0    	cp0.b     w0
    193a:	07 00 3d    	bra       GE, 0x194a <.L55>
    193c:	50 c0 20    	mov.w     #0xc05, w0
    193e:	10 40 78    	mov.b     [w0], w0
    1940:	00 80 fb    	ze        w0, w0
    1942:	64 00 60    	and.w     w0, #0x4, w0
    1944:	42 80 de    	asr.w     w0, #0x2, w0
    1946:	00 40 78    	mov.b     w0, w0
    1948:	06 00 37    	bra       0x1956 <.L56>

0000194a <.L55>:
    194a:	10 c0 20    	mov.w     #0xc01, w0
    194c:	10 40 78    	mov.b     [w0], w0
    194e:	00 80 fb    	ze        w0, w0
    1950:	64 00 60    	and.w     w0, #0x4, w0
    1952:	42 80 de    	asr.w     w0, #0x2, w0
    1954:	00 40 78    	mov.b     w0, w0

00001956 <.L56>:
    1956:	80 48 78    	mov.b     w0, [w1]
    1958:	30 60 80    	mov.w     0xc06, w0
    195a:	00 00 e8    	inc.w     w0, w0
    195c:	80 40 eb    	clr.b     w1
    195e:	01 48 78    	mov.b     w1, [w0]
    1960:	40 c0 20    	mov.w     #0xc04, w0
    1962:	21 c0 b3    	mov.b     #0x2, w1
    1964:	01 48 78    	mov.b     w1, [w0]
    1966:	50 c0 20    	mov.w     #0xc05, w0
    1968:	81 cc b3    	mov.b     #0xc8, w1
    196a:	01 48 78    	mov.b     w1, [w0]
    196c:	03 00 37    	bra       0x1974 <.L57>

0000196e <.L54>:
    196e:	3c c8 bf    	mov.b     0x83c, WREG
    1970:	00 04 a0    	bset.b    w0, #0x0
    1972:	3c e8 b7    	mov.b     WREG, 0x83c

00001974 <.L57>:
    1974:	3a 00 37    	bra       0x19ea <.L58>

00001976 <.L53>:
    1976:	a0 4a 20    	mov.w     #0x4aa, w0
    1978:	10 07 98    	mov.w     w0, [w14+2]
    197a:	40 83 20    	mov.w     #0x834, w0
    197c:	40 40 90    	mov.b     [w0+4], w0
    197e:	6f 4f 60    	and.b     w0, #0xf, [w14]
    1980:	1e 80 fb    	ze        [w14], w0
    1982:	00 00 40    	add.w     w0, w0, w0
    1984:	80 00 78    	mov.w     w0, w1
    1986:	40 83 20    	mov.w     #0x834, w0
    1988:	40 40 90    	mov.b     [w0+4], w0
    198a:	00 00 fb    	se        w0, w0
    198c:	4f 00 de    	lsr.w     w0, #0xf, w0
    198e:	01 00 70    	ior.w     w0, w1, w0
    1990:	c2 00 dd    	sl.w      w0, #0x2, w1
    1992:	00 c0 20    	mov.w     #0xc00, w0
    1994:	00 80 40    	add.w     w1, w0, w0
    1996:	20 07 98    	mov.w     w0, [w14+4]
    1998:	1e 80 fb    	ze        [w14], w0
    199a:	00 00 40    	add.w     w0, w0, w0
    199c:	9e 00 90    	mov.w     [w14+2], w1
    199e:	00 80 40    	add.w     w1, w0, w0
    19a0:	90 00 78    	mov.w     [w0], w1
    19a2:	40 83 20    	mov.w     #0x834, w0
    19a4:	40 40 90    	mov.b     [w0+4], w0
    19a6:	00 04 e0    	cp0.b     w0
    19a8:	02 00 3d    	bra       GE, 0x19ae <.L59>
    19aa:	40 00 20    	mov.w     #0x4, w0
    19ac:	01 00 37    	bra       0x19b0 <.L60>

000019ae <.L59>:
    19ae:	80 00 20    	mov.w     #0x8, w0

000019b0 <.L60>:
    19b0:	00 80 60    	and.w     w1, w0, w0
    19b2:	00 00 e0    	cp0.w     w0
    19b4:	13 00 32    	bra       Z, 0x19dc <.L61>
    19b6:	30 60 80    	mov.w     0xc06, w0
    19b8:	ae 00 90    	mov.w     [w14+4], w1
    19ba:	91 40 90    	mov.b     [w1+1], w1
    19bc:	81 80 fb    	ze        w1, w1
    19be:	e4 80 60    	and.w     w1, #0x4, w1
    19c0:	c2 88 de    	asr.w     w1, #0x2, w1
    19c2:	81 40 78    	mov.b     w1, w1
    19c4:	01 48 78    	mov.b     w1, [w0]
    19c6:	30 60 80    	mov.w     0xc06, w0
    19c8:	00 00 e8    	inc.w     w0, w0
    19ca:	80 40 eb    	clr.b     w1
    19cc:	01 48 78    	mov.b     w1, [w0]
    19ce:	40 c0 20    	mov.w     #0xc04, w0
    19d0:	21 c0 b3    	mov.b     #0x2, w1
    19d2:	01 48 78    	mov.b     w1, [w0]
    19d4:	50 c0 20    	mov.w     #0xc05, w0
    19d6:	81 cc b3    	mov.b     #0xc8, w1
    19d8:	01 48 78    	mov.b     w1, [w0]
    19da:	03 00 37    	bra       0x19e2 <.L62>

000019dc <.L61>:
    19dc:	3c c8 bf    	mov.b     0x83c, WREG
    19de:	00 04 a0    	bset.b    w0, #0x0
    19e0:	3c e8 b7    	mov.b     WREG, 0x83c

000019e2 <.L62>:
    19e2:	03 00 37    	bra       0x19ea <.L58>

000019e4 <.L129>:
    19e4:	3c c8 bf    	mov.b     0x83c, WREG
    19e6:	00 04 a0    	bset.b    w0, #0x0
    19e8:	3c e8 b7    	mov.b     WREG, 0x83c

000019ea <.L58>:
    19ea:	04 00 37    	bra       0x19f4 <.L46>

000019ec <.L128>:
    19ec:	3c c8 bf    	mov.b     0x83c, WREG
    19ee:	00 04 a0    	bset.b    w0, #0x0
    19f0:	3c e8 b7    	mov.b     WREG, 0x83c
    19f2:	a4 01 37    	bra       0x1d3c <.L29>

000019f4 <.L46>:
    19f4:	a3 01 37    	bra       0x1d3c <.L29>

000019f6 <.L32>:
    19f6:	40 83 20    	mov.w     #0x834, w0
    19f8:	10 40 78    	mov.b     [w0], w0
    19fa:	00 80 fb    	ze        w0, w0
    19fc:	7f 00 60    	and.w     w0, #0x1f, w0
    19fe:	00 00 e0    	cp0.w     w0
    1a00:	03 00 32    	bra       Z, 0x1a08 <.L65>
    1a02:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1a04:	1c 00 32    	bra       Z, 0x1a3e <.L66>
    1a06:	86 00 37    	bra       0x1b14 <.L130>

00001a08 <.L65>:
    1a08:	40 83 20    	mov.w     #0x834, w0
    1a0a:	20 40 90    	mov.b     [w0+2], w0
    1a0c:	00 80 fb    	ze        w0, w0
    1a0e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1a10:	12 00 3a    	bra       NZ, 0x1a36 <.L131>
    1a12:	40 83 20    	mov.w     #0x834, w0
    1a14:	10 40 90    	mov.b     [w0+1], w0
    1a16:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a18:	04 00 3a    	bra       NZ, 0x1a22 <.L69>
    1a1a:	3e c8 bf    	mov.b     0x83e, WREG
    1a1c:	00 04 a1    	bclr.b    w0, #0x0
    1a1e:	3e e8 b7    	mov.b     WREG, 0x83e
    1a20:	03 00 37    	bra       0x1a28 <.L70>

00001a22 <.L69>:
    1a22:	3e c8 bf    	mov.b     0x83e, WREG
    1a24:	00 04 a0    	bset.b    w0, #0x0
    1a26:	3e e8 b7    	mov.b     WREG, 0x83e

00001a28 <.L70>:
    1a28:	40 c0 20    	mov.w     #0xc04, w0
    1a2a:	80 40 eb    	clr.b     w1
    1a2c:	01 48 78    	mov.b     w1, [w0]
    1a2e:	50 c0 20    	mov.w     #0xc05, w0
    1a30:	81 cc b3    	mov.b     #0xc8, w1
    1a32:	01 48 78    	mov.b     w1, [w0]
    1a34:	03 00 37    	bra       0x1a3c <.L71>

00001a36 <.L131>:
    1a36:	3c c8 bf    	mov.b     0x83c, WREG
    1a38:	00 04 a0    	bset.b    w0, #0x0
    1a3a:	3c e8 b7    	mov.b     WREG, 0x83c

00001a3c <.L71>:
    1a3c:	6f 00 37    	bra       0x1b1c <.L72>

00001a3e <.L66>:
    1a3e:	40 c8 bf    	mov.b     0x840, WREG
    1a40:	00 80 fb    	ze        w0, w0
    1a42:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1a44:	03 00 32    	bra       Z, 0x1a4c <.L74>
    1a46:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1a48:	12 00 32    	bra       Z, 0x1a6e <.L75>
    1a4a:	60 00 37    	bra       0x1b0c <.L132>

00001a4c <.L74>:
    1a4c:	40 83 20    	mov.w     #0x834, w0
    1a4e:	40 40 90    	mov.b     [w0+4], w0
    1a50:	00 80 fb    	ze        w0, w0
    1a52:	6f 00 60    	and.w     w0, #0xf, w0
    1a54:	00 00 e0    	cp0.w     w0
    1a56:	07 00 3a    	bra       NZ, 0x1a66 <.L76>
    1a58:	40 c0 20    	mov.w     #0xc04, w0
    1a5a:	80 40 eb    	clr.b     w1
    1a5c:	01 48 78    	mov.b     w1, [w0]
    1a5e:	50 c0 20    	mov.w     #0xc05, w0
    1a60:	81 cc b3    	mov.b     #0xc8, w1
    1a62:	01 48 78    	mov.b     w1, [w0]
    1a64:	03 00 37    	bra       0x1a6c <.L77>

00001a66 <.L76>:
    1a66:	3c c8 bf    	mov.b     0x83c, WREG
    1a68:	00 04 a0    	bset.b    w0, #0x0
    1a6a:	3c e8 b7    	mov.b     WREG, 0x83c

00001a6c <.L77>:
    1a6c:	52 00 37    	bra       0x1b12 <.L78>

00001a6e <.L75>:
    1a6e:	a0 4a 20    	mov.w     #0x4aa, w0
    1a70:	10 07 98    	mov.w     w0, [w14+2]
    1a72:	40 83 20    	mov.w     #0x834, w0
    1a74:	40 40 90    	mov.b     [w0+4], w0
    1a76:	6f 4f 60    	and.b     w0, #0xf, [w14]
    1a78:	1e 40 78    	mov.b     [w14], w0
    1a7a:	00 04 e0    	cp0.b     w0
    1a7c:	3b 00 32    	bra       Z, 0x1af4 <.L79>
    1a7e:	1e 80 fb    	ze        [w14], w0
    1a80:	00 00 40    	add.w     w0, w0, w0
    1a82:	80 00 78    	mov.w     w0, w1
    1a84:	40 83 20    	mov.w     #0x834, w0
    1a86:	40 40 90    	mov.b     [w0+4], w0
    1a88:	00 00 fb    	se        w0, w0
    1a8a:	4f 00 de    	lsr.w     w0, #0xf, w0
    1a8c:	01 00 70    	ior.w     w0, w1, w0
    1a8e:	c2 00 dd    	sl.w      w0, #0x2, w1
    1a90:	00 c0 20    	mov.w     #0xc00, w0
    1a92:	00 80 40    	add.w     w1, w0, w0
    1a94:	20 07 98    	mov.w     w0, [w14+4]
    1a96:	40 83 20    	mov.w     #0x834, w0
    1a98:	40 40 90    	mov.b     [w0+4], w0
    1a9a:	00 04 e0    	cp0.b     w0
    1a9c:	16 00 3d    	bra       GE, 0x1aca <.L80>
    1a9e:	1e 80 fb    	ze        [w14], w0
    1aa0:	00 00 40    	add.w     w0, w0, w0
    1aa2:	9e 00 90    	mov.w     [w14+2], w1
    1aa4:	00 80 40    	add.w     w1, w0, w0
    1aa6:	10 00 78    	mov.w     [w0], w0
    1aa8:	64 00 60    	and.w     w0, #0x4, w0
    1aaa:	00 00 e0    	cp0.w     w0
    1aac:	0a 00 32    	bra       Z, 0x1ac2 <.L81>
    1aae:	40 83 20    	mov.w     #0x834, w0
    1ab0:	10 40 90    	mov.b     [w0+1], w0
    1ab2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1ab4:	02 00 3a    	bra       NZ, 0x1aba <.L82>
    1ab6:	00 40 eb    	clr.b     w0
    1ab8:	01 00 37    	bra       0x1abc <.L83>

00001aba <.L82>:
    1aba:	40 c8 b3    	mov.b     #0x84, w0

00001abc <.L83>:
    1abc:	ae 00 90    	mov.w     [w14+4], w1
    1abe:	90 40 98    	mov.b     w0, [w1+1]
    1ac0:	19 00 37    	bra       0x1af4 <.L79>

00001ac2 <.L81>:
    1ac2:	3c c8 bf    	mov.b     0x83c, WREG
    1ac4:	00 04 a0    	bset.b    w0, #0x0
    1ac6:	3c e8 b7    	mov.b     WREG, 0x83c
    1ac8:	15 00 37    	bra       0x1af4 <.L79>

00001aca <.L80>:
    1aca:	1e 80 fb    	ze        [w14], w0
    1acc:	00 00 40    	add.w     w0, w0, w0
    1ace:	9e 00 90    	mov.w     [w14+2], w1
    1ad0:	00 80 40    	add.w     w1, w0, w0
    1ad2:	10 00 78    	mov.w     [w0], w0
    1ad4:	68 00 60    	and.w     w0, #0x8, w0
    1ad6:	00 00 e0    	cp0.w     w0
    1ad8:	0a 00 32    	bra       Z, 0x1aee <.L84>
    1ada:	40 83 20    	mov.w     #0x834, w0
    1adc:	10 40 90    	mov.b     [w0+1], w0
    1ade:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1ae0:	02 00 3a    	bra       NZ, 0x1ae6 <.L85>
    1ae2:	80 c8 b3    	mov.b     #0x88, w0
    1ae4:	01 00 37    	bra       0x1ae8 <.L86>

00001ae6 <.L85>:
    1ae6:	40 c8 b3    	mov.b     #0x84, w0

00001ae8 <.L86>:
    1ae8:	ae 00 90    	mov.w     [w14+4], w1
    1aea:	90 40 98    	mov.b     w0, [w1+1]
    1aec:	03 00 37    	bra       0x1af4 <.L79>

00001aee <.L84>:
    1aee:	3c c8 bf    	mov.b     0x83c, WREG
    1af0:	00 04 a0    	bset.b    w0, #0x0
    1af2:	3c e8 b7    	mov.b     WREG, 0x83c

00001af4 <.L79>:
    1af4:	3c c8 bf    	mov.b     0x83c, WREG
    1af6:	00 80 fb    	ze        w0, w0
    1af8:	61 00 60    	and.w     w0, #0x1, w0
    1afa:	00 00 e0    	cp0.w     w0
    1afc:	06 00 3a    	bra       NZ, 0x1b0a <.L87>
    1afe:	40 c0 20    	mov.w     #0xc04, w0
    1b00:	80 40 eb    	clr.b     w1
    1b02:	01 48 78    	mov.b     w1, [w0]
    1b04:	50 c0 20    	mov.w     #0xc05, w0
    1b06:	81 cc b3    	mov.b     #0xc8, w1
    1b08:	01 48 78    	mov.b     w1, [w0]

00001b0a <.L87>:
    1b0a:	03 00 37    	bra       0x1b12 <.L78>

00001b0c <.L132>:
    1b0c:	3c c8 bf    	mov.b     0x83c, WREG
    1b0e:	00 04 a0    	bset.b    w0, #0x0
    1b10:	3c e8 b7    	mov.b     WREG, 0x83c

00001b12 <.L78>:
    1b12:	04 00 37    	bra       0x1b1c <.L72>

00001b14 <.L130>:
    1b14:	3c c8 bf    	mov.b     0x83c, WREG
    1b16:	00 04 a0    	bset.b    w0, #0x0
    1b18:	3c e8 b7    	mov.b     WREG, 0x83c
    1b1a:	10 01 37    	bra       0x1d3c <.L29>

00001b1c <.L72>:
    1b1c:	0f 01 37    	bra       0x1d3c <.L29>

00001b1e <.L33>:
    1b1e:	40 83 20    	mov.w     #0x834, w0
    1b20:	20 40 90    	mov.b     [w0+2], w0
    1b22:	00 04 e0    	cp0.b     w0
    1b24:	04 00 3d    	bra       GE, 0x1b2e <.L88>
    1b26:	3c c8 bf    	mov.b     0x83c, WREG
    1b28:	00 04 a0    	bset.b    w0, #0x0
    1b2a:	3c e8 b7    	mov.b     WREG, 0x83c
    1b2c:	07 01 37    	bra       0x1d3c <.L29>

00001b2e <.L88>:
    1b2e:	40 83 20    	mov.w     #0x834, w0
    1b30:	90 40 78    	mov.b     [w0], w1
    1b32:	60 b2 20    	mov.w     #0xb26, w0
    1b34:	01 48 78    	mov.b     w1, [w0]
    1b36:	40 83 20    	mov.w     #0x834, w0
    1b38:	90 40 90    	mov.b     [w0+1], w1
    1b3a:	70 b2 20    	mov.w     #0xb27, w0
    1b3c:	01 48 78    	mov.b     w1, [w0]
    1b3e:	40 83 20    	mov.w     #0x834, w0
    1b40:	10 00 90    	mov.w     [w0+2], w0
    1b42:	40 59 88    	mov.w     w0, 0xb28
    1b44:	40 83 20    	mov.w     #0x834, w0
    1b46:	20 00 90    	mov.w     [w0+4], w0
    1b48:	50 59 88    	mov.w     w0, 0xb2a
    1b4a:	40 83 20    	mov.w     #0x834, w0
    1b4c:	30 00 90    	mov.w     [w0+6], w0
    1b4e:	60 59 88    	mov.w     w0, 0xb2c
    1b50:	40 c0 20    	mov.w     #0xc04, w0
    1b52:	80 40 eb    	clr.b     w1
    1b54:	01 48 78    	mov.b     w1, [w0]
    1b56:	50 c0 20    	mov.w     #0xc05, w0
    1b58:	81 cc b3    	mov.b     #0xc8, w1
    1b5a:	01 48 78    	mov.b     w1, [w0]
    1b5c:	ef 00 37    	bra       0x1d3c <.L29>

00001b5e <.L34>:
    1b5e:	40 83 20    	mov.w     #0x834, w0
    1b60:	90 40 78    	mov.b     [w0], w1
    1b62:	60 b2 20    	mov.w     #0xb26, w0
    1b64:	01 48 78    	mov.b     w1, [w0]
    1b66:	40 83 20    	mov.w     #0x834, w0
    1b68:	90 40 90    	mov.b     [w0+1], w1
    1b6a:	70 b2 20    	mov.w     #0xb27, w0
    1b6c:	01 48 78    	mov.b     w1, [w0]
    1b6e:	40 83 20    	mov.w     #0x834, w0
    1b70:	10 00 90    	mov.w     [w0+2], w0
    1b72:	40 59 88    	mov.w     w0, 0xb28
    1b74:	40 83 20    	mov.w     #0x834, w0
    1b76:	20 00 90    	mov.w     [w0+4], w0
    1b78:	50 59 88    	mov.w     w0, 0xb2a
    1b7a:	40 83 20    	mov.w     #0x834, w0
    1b7c:	30 00 90    	mov.w     [w0+6], w0
    1b7e:	60 59 88    	mov.w     w0, 0xb2c
    1b80:	40 83 20    	mov.w     #0x834, w0
    1b82:	30 40 90    	mov.b     [w0+3], w0
    1b84:	00 80 fb    	ze        w0, w0
    1b86:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1b88:	14 00 32    	bra       Z, 0x1bb2 <.L92>
    1b8a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1b8c:	36 00 32    	bra       Z, 0x1bfa <.L93>
    1b8e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1b90:	5c 00 3a    	bra       NZ, 0x1c4a <.L133>
    1b92:	60 57 29    	mov.w     #0x9576, w0
    1b94:	70 59 88    	mov.w     w0, 0xb2e
    1b96:	70 59 80    	mov.w     0xb2e, w0
    1b98:	10 40 78    	mov.b     [w0], w0
    1b9a:	00 80 fb    	ze        w0, w0
    1b9c:	80 59 88    	mov.w     w0, 0xb30
    1b9e:	40 83 20    	mov.w     #0x834, w0
    1ba0:	b0 00 90    	mov.w     [w0+6], w1
    1ba2:	80 59 80    	mov.w     0xb30, w0
    1ba4:	80 8f 50    	sub.w     w1, w0, [w15]
    1ba6:	03 00 31    	bra       C, 0x1bae <.L94>
    1ba8:	40 83 20    	mov.w     #0x834, w0
    1baa:	30 00 90    	mov.w     [w0+6], w0
    1bac:	80 59 88    	mov.w     w0, 0xb30

00001bae <.L94>:
    1bae:	22 01 07    	rcall     0x1df4 <_SendDataPacket> <L0> <.LFB6> <.LFE5>
    1bb0:	50 00 37    	bra       0x1c52 <.L95>

00001bb2 <.L92>:
    1bb2:	40 83 20    	mov.w     #0x834, w0
    1bb4:	20 40 90    	mov.b     [w0+2], w0
    1bb6:	00 80 fb    	ze        w0, w0
    1bb8:	00 00 e0    	cp0.w     w0
    1bba:	03 00 3a    	bra       NZ, 0x1bc2 <.L134>
    1bbc:	80 58 29    	mov.w     #0x9588, w0
    1bbe:	70 59 88    	mov.w     w0, 0xb2e
    1bc0:	03 00 37    	bra       0x1bc8 <.L98>

00001bc2 <.L134>:
    1bc2:	3c c8 bf    	mov.b     0x83c, WREG
    1bc4:	00 04 a0    	bset.b    w0, #0x0
    1bc6:	3c e8 b7    	mov.b     WREG, 0x83c

00001bc8 <.L98>:
    1bc8:	3c c8 bf    	mov.b     0x83c, WREG
    1bca:	00 80 fb    	ze        w0, w0
    1bcc:	61 00 60    	and.w     w0, #0x1, w0
    1bce:	00 00 e0    	cp0.w     w0
    1bd0:	13 00 3a    	bra       NZ, 0x1bf8 <.L99>
    1bd2:	70 59 80    	mov.w     0xb2e, w0
    1bd4:	00 80 e8    	inc2.w    w0, w0
    1bd6:	90 40 78    	mov.b     [w0], w1
    1bd8:	00 b3 20    	mov.w     #0xb30, w0
    1bda:	01 48 78    	mov.b     w1, [w0]
    1bdc:	70 59 80    	mov.w     0xb2e, w0
    1bde:	63 00 40    	add.w     w0, #0x3, w0
    1be0:	90 40 78    	mov.b     [w0], w1
    1be2:	10 b3 20    	mov.w     #0xb31, w0
    1be4:	01 48 78    	mov.b     w1, [w0]
    1be6:	40 83 20    	mov.w     #0x834, w0
    1be8:	b0 00 90    	mov.w     [w0+6], w1
    1bea:	80 59 80    	mov.w     0xb30, w0
    1bec:	80 8f 50    	sub.w     w1, w0, [w15]
    1bee:	03 00 31    	bra       C, 0x1bf6 <.L100>
    1bf0:	40 83 20    	mov.w     #0x834, w0
    1bf2:	30 00 90    	mov.w     [w0+6], w0
    1bf4:	80 59 88    	mov.w     w0, 0xb30

00001bf6 <.L100>:
    1bf6:	fe 00 07    	rcall     0x1df4 <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001bf8 <.L99>:
    1bf8:	2c 00 37    	bra       0x1c52 <.L95>

00001bfa <.L93>:
    1bfa:	40 83 20    	mov.w     #0x834, w0
    1bfc:	20 40 90    	mov.b     [w0+2], w0
    1bfe:	00 80 fb    	ze        w0, w0
    1c00:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1c02:	07 00 32    	bra       Z, 0x1c12 <.L103>
    1c04:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1c06:	08 00 32    	bra       Z, 0x1c18 <.L104>
    1c08:	00 00 e0    	cp0.w     w0
    1c0a:	09 00 3a    	bra       NZ, 0x1c1e <.L135>
    1c0c:	a0 59 29    	mov.w     #0x959a, w0
    1c0e:	70 59 88    	mov.w     w0, 0xb2e
    1c10:	09 00 37    	bra       0x1c24 <.L105>

00001c12 <.L103>:
    1c12:	e0 59 29    	mov.w     #0x959e, w0
    1c14:	70 59 88    	mov.w     w0, 0xb2e
    1c16:	06 00 37    	bra       0x1c24 <.L105>

00001c18 <.L104>:
    1c18:	80 5b 29    	mov.w     #0x95b8, w0
    1c1a:	70 59 88    	mov.w     w0, 0xb2e
    1c1c:	03 00 37    	bra       0x1c24 <.L105>

00001c1e <.L135>:
    1c1e:	3c c8 bf    	mov.b     0x83c, WREG
    1c20:	00 04 a0    	bset.b    w0, #0x0
    1c22:	3c e8 b7    	mov.b     WREG, 0x83c

00001c24 <.L105>:
    1c24:	3c c8 bf    	mov.b     0x83c, WREG
    1c26:	00 80 fb    	ze        w0, w0
    1c28:	61 00 60    	and.w     w0, #0x1, w0
    1c2a:	00 00 e0    	cp0.w     w0
    1c2c:	0d 00 3a    	bra       NZ, 0x1c48 <.L106>
    1c2e:	70 59 80    	mov.w     0xb2e, w0
    1c30:	10 40 78    	mov.b     [w0], w0
    1c32:	00 80 fb    	ze        w0, w0
    1c34:	80 59 88    	mov.w     w0, 0xb30
    1c36:	40 83 20    	mov.w     #0x834, w0
    1c38:	b0 00 90    	mov.w     [w0+6], w1
    1c3a:	80 59 80    	mov.w     0xb30, w0
    1c3c:	80 8f 50    	sub.w     w1, w0, [w15]
    1c3e:	03 00 31    	bra       C, 0x1c46 <.L107>
    1c40:	40 83 20    	mov.w     #0x834, w0
    1c42:	30 00 90    	mov.w     [w0+6], w0
    1c44:	80 59 88    	mov.w     w0, 0xb30

00001c46 <.L107>:
    1c46:	d6 00 07    	rcall     0x1df4 <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001c48 <.L106>:
    1c48:	04 00 37    	bra       0x1c52 <.L95>

00001c4a <.L133>:
    1c4a:	3c c8 bf    	mov.b     0x83c, WREG
    1c4c:	00 04 a0    	bset.b    w0, #0x0
    1c4e:	3c e8 b7    	mov.b     WREG, 0x83c
    1c50:	75 00 37    	bra       0x1d3c <.L29>

00001c52 <.L95>:
    1c52:	74 00 37    	bra       0x1d3c <.L29>

00001c54 <.L35>:
    1c54:	30 60 80    	mov.w     0xc06, w0
    1c56:	d1 83 20    	mov.w     #0x83d, w1
    1c58:	91 40 78    	mov.b     [w1], w1
    1c5a:	01 48 78    	mov.b     w1, [w0]
    1c5c:	40 c0 20    	mov.w     #0xc04, w0
    1c5e:	11 c0 b3    	mov.b     #0x1, w1
    1c60:	01 48 78    	mov.b     w1, [w0]
    1c62:	50 c0 20    	mov.w     #0xc05, w0
    1c64:	81 cc b3    	mov.b     #0xc8, w1
    1c66:	01 48 78    	mov.b     w1, [w0]
    1c68:	69 00 37    	bra       0x1d3c <.L29>

00001c6a <.L36>:
    1c6a:	40 83 20    	mov.w     #0x834, w0
    1c6c:	20 40 90    	mov.b     [w0+2], w0
    1c6e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1c70:	22 00 3e    	bra       GTU, 0x1cb6 <.L108>
    1c72:	a0 4a 20    	mov.w     #0x4aa, w0
    1c74:	10 07 98    	mov.w     w0, [w14+2]
    1c76:	10 c0 b3    	mov.b     #0x1, w0
    1c78:	00 4f 78    	mov.b     w0, [w14]
    1c7a:	07 00 37    	bra       0x1c8a <.L109>

00001c7c <.L110>:
    1c7c:	1e 80 fb    	ze        [w14], w0
    1c7e:	00 00 40    	add.w     w0, w0, w0
    1c80:	9e 00 90    	mov.w     [w14+2], w1
    1c82:	00 80 40    	add.w     w1, w0, w0
    1c84:	80 00 eb    	clr.w     w1
    1c86:	01 08 78    	mov.w     w1, [w0]
    1c88:	1e 4f e8    	inc.b     [w14], [w14]

00001c8a <.L109>:
    1c8a:	1e 40 78    	mov.b     [w14], w0
    1c8c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1c8e:	f6 ff 36    	bra       LEU, 0x1c7c <.L110>
    1c90:	40 83 20    	mov.w     #0x834, w0
    1c92:	20 40 90    	mov.b     [w0+2], w0
    1c94:	3d e8 b7    	mov.b     WREG, 0x83d
    1c96:	3d c8 bf    	mov.b     0x83d, WREG
    1c98:	00 80 fb    	ze        w0, w0
    1c9a:	00 00 e0    	cp0.w     w0
    1c9c:	03 00 3a    	bra       NZ, 0x1ca4 <.L136>
    1c9e:	20 c0 b3    	mov.b     #0x2, w0
    1ca0:	40 e8 b7    	mov.b     WREG, 0x840
    1ca2:	02 00 37    	bra       0x1ca8 <.L113>

00001ca4 <.L136>:
    1ca4:	30 c0 b3    	mov.b     #0x3, w0
    1ca6:	40 e8 b7    	mov.b     WREG, 0x840

00001ca8 <.L113>:
    1ca8:	40 c0 20    	mov.w     #0xc04, w0
    1caa:	80 40 eb    	clr.b     w1
    1cac:	01 48 78    	mov.b     w1, [w0]
    1cae:	50 c0 20    	mov.w     #0xc05, w0
    1cb0:	81 cc b3    	mov.b     #0xc8, w1
    1cb2:	01 48 78    	mov.b     w1, [w0]
    1cb4:	43 00 37    	bra       0x1d3c <.L29>

00001cb6 <.L108>:
    1cb6:	3c c8 bf    	mov.b     0x83c, WREG
    1cb8:	00 04 a0    	bset.b    w0, #0x0
    1cba:	3c e8 b7    	mov.b     WREG, 0x83c
    1cbc:	3f 00 37    	bra       0x1d3c <.L29>

00001cbe <.L37>:
    1cbe:	40 c8 bf    	mov.b     0x840, WREG
    1cc0:	00 80 fb    	ze        w0, w0
    1cc2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1cc4:	13 00 3a    	bra       NZ, 0x1cec <.L137>
    1cc6:	40 83 20    	mov.w     #0x834, w0
    1cc8:	40 40 90    	mov.b     [w0+4], w0
    1cca:	00 04 e0    	cp0.b     w0
    1ccc:	0a 00 3a    	bra       NZ, 0x1ce2 <.L117>
    1cce:	30 60 80    	mov.w     0xc06, w0
    1cd0:	80 40 eb    	clr.b     w1
    1cd2:	01 48 78    	mov.b     w1, [w0]
    1cd4:	40 c0 20    	mov.w     #0xc04, w0
    1cd6:	11 c0 b3    	mov.b     #0x1, w1
    1cd8:	01 48 78    	mov.b     w1, [w0]
    1cda:	50 c0 20    	mov.w     #0xc05, w0
    1cdc:	81 cc b3    	mov.b     #0xc8, w1
    1cde:	01 48 78    	mov.b     w1, [w0]
    1ce0:	03 00 37    	bra       0x1ce8 <.L118>

00001ce2 <.L117>:
    1ce2:	3c c8 bf    	mov.b     0x83c, WREG
    1ce4:	00 04 a0    	bset.b    w0, #0x0
    1ce6:	3c e8 b7    	mov.b     WREG, 0x83c

00001ce8 <.L118>:
    1ce8:	00 00 00    	nop       
    1cea:	28 00 37    	bra       0x1d3c <.L29>

00001cec <.L137>:
    1cec:	3c c8 bf    	mov.b     0x83c, WREG
    1cee:	00 04 a0    	bset.b    w0, #0x0
    1cf0:	3c e8 b7    	mov.b     WREG, 0x83c
    1cf2:	24 00 37    	bra       0x1d3c <.L29>

00001cf4 <.L38>:
    1cf4:	40 c8 bf    	mov.b     0x840, WREG
    1cf6:	00 80 fb    	ze        w0, w0
    1cf8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1cfa:	19 00 3a    	bra       NZ, 0x1d2e <.L138>
    1cfc:	40 83 20    	mov.w     #0x834, w0
    1cfe:	40 40 90    	mov.b     [w0+4], w0
    1d00:	00 04 e0    	cp0.b     w0
    1d02:	10 00 3a    	bra       NZ, 0x1d24 <.L122>
    1d04:	40 83 20    	mov.w     #0x834, w0
    1d06:	20 40 90    	mov.b     [w0+2], w0
    1d08:	00 80 fb    	ze        w0, w0
    1d0a:	00 00 e0    	cp0.w     w0
    1d0c:	07 00 3a    	bra       NZ, 0x1d1c <.L139>
    1d0e:	40 c0 20    	mov.w     #0xc04, w0
    1d10:	80 40 eb    	clr.b     w1
    1d12:	01 48 78    	mov.b     w1, [w0]
    1d14:	50 c0 20    	mov.w     #0xc05, w0
    1d16:	81 cc b3    	mov.b     #0xc8, w1
    1d18:	01 48 78    	mov.b     w1, [w0]
    1d1a:	07 00 37    	bra       0x1d2a <.L126>

00001d1c <.L139>:
    1d1c:	3c c8 bf    	mov.b     0x83c, WREG
    1d1e:	00 04 a0    	bset.b    w0, #0x0
    1d20:	3c e8 b7    	mov.b     WREG, 0x83c
    1d22:	03 00 37    	bra       0x1d2a <.L126>

00001d24 <.L122>:
    1d24:	3c c8 bf    	mov.b     0x83c, WREG
    1d26:	00 04 a0    	bset.b    w0, #0x0
    1d28:	3c e8 b7    	mov.b     WREG, 0x83c

00001d2a <.L126>:
    1d2a:	00 00 00    	nop       
    1d2c:	07 00 37    	bra       0x1d3c <.L29>

00001d2e <.L138>:
    1d2e:	3c c8 bf    	mov.b     0x83c, WREG
    1d30:	00 04 a0    	bset.b    w0, #0x0
    1d32:	3c e8 b7    	mov.b     WREG, 0x83c
    1d34:	03 00 37    	bra       0x1d3c <.L29>

00001d36 <.L30>:
    1d36:	3c c8 bf    	mov.b     0x83c, WREG
    1d38:	00 04 a0    	bset.b    w0, #0x0
    1d3a:	3c e8 b7    	mov.b     WREG, 0x83c

00001d3c <.L29>:
    1d3c:	00 80 fa    	ulnk      
    1d3e:	00 00 06    	return    

00001d40 <_ProcessInToken>:
    1d40:	00 00 fa    	lnk       #0x0
    1d42:	3f c8 bf    	mov.b     0x83f, WREG
    1d44:	80 80 fb    	ze        w0, w1
    1d46:	00 0f 20    	mov.w     #0xf0, w0
    1d48:	00 80 60    	and.w     w1, w0, w0
    1d4a:	00 00 e0    	cp0.w     w0
    1d4c:	2b 00 3a    	bra       NZ, 0x1da4 <.L140>
    1d4e:	60 b2 20    	mov.w     #0xb26, w0
    1d50:	10 40 78    	mov.b     [w0], w0
    1d52:	80 80 fb    	ze        w0, w1
    1d54:	00 06 20    	mov.w     #0x60, w0
    1d56:	00 80 60    	and.w     w1, w0, w0
    1d58:	01 02 20    	mov.w     #0x20, w1
    1d5a:	81 0f 50    	sub.w     w0, w1, [w15]
    1d5c:	1f 00 32    	bra       Z, 0x1d9c <.L154>
    1d5e:	01 04 20    	mov.w     #0x40, w1
    1d60:	81 0f 50    	sub.w     w0, w1, [w15]
    1d62:	1a 00 32    	bra       Z, 0x1d98 <.L146>
    1d64:	00 00 e0    	cp0.w     w0
    1d66:	1d 00 3a    	bra       NZ, 0x1da2 <.L155>
    1d68:	70 b2 20    	mov.w     #0xb27, w0
    1d6a:	10 40 78    	mov.b     [w0], w0
    1d6c:	00 80 fb    	ze        w0, w0
    1d6e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1d70:	03 00 32    	bra       Z, 0x1d78 <.L148>
    1d72:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1d74:	0e 00 32    	bra       Z, 0x1d92 <.L149>
    1d76:	13 00 37    	bra       0x1d9e <.L143>

00001d78 <.L148>:
    1d78:	80 b2 20    	mov.w     #0xb28, w0
    1d7a:	10 40 78    	mov.b     [w0], w0
    1d7c:	00 80 fb    	ze        w0, w0
    1d7e:	b0 24 88    	mov.w     w0, 0x496
    1d80:	b0 24 80    	mov.w     0x496, w0
    1d82:	00 00 e0    	cp0.w     w0
    1d84:	03 00 3a    	bra       NZ, 0x1d8c <.L153>
    1d86:	10 c0 b3    	mov.b     #0x1, w0
    1d88:	40 e8 b7    	mov.b     WREG, 0x840
    1d8a:	02 00 37    	bra       0x1d90 <.L152>

00001d8c <.L153>:
    1d8c:	20 c0 b3    	mov.b     #0x2, w0
    1d8e:	40 e8 b7    	mov.b     WREG, 0x840

00001d90 <.L152>:
    1d90:	02 00 37    	bra       0x1d96 <.L147>

00001d92 <.L149>:
    1d92:	30 00 07    	rcall     0x1df4 <_SendDataPacket> <L0> <.LFB6> <.LFE5>
    1d94:	00 00 00    	nop       

00001d96 <.L147>:
    1d96:	03 00 37    	bra       0x1d9e <.L143>

00001d98 <.L146>:
    1d98:	dc 0a 07    	rcall     0x3352 <_VendorRequestsIn> <L0> <.LFB2> <.LFE1>
    1d9a:	01 00 37    	bra       0x1d9e <.L143>

00001d9c <.L154>:
    1d9c:	00 00 00    	nop       

00001d9e <.L143>:
    1d9e:	00 00 00    	nop       
    1da0:	01 00 37    	bra       0x1da4 <.L140>

00001da2 <.L155>:
    1da2:	00 00 00    	nop       

00001da4 <.L140>:
    1da4:	00 80 fa    	ulnk      
    1da6:	00 00 06    	return    

00001da8 <_ProcessOutToken>:
    1da8:	00 00 fa    	lnk       #0x0
    1daa:	3f c8 bf    	mov.b     0x83f, WREG
    1dac:	80 80 fb    	ze        w0, w1
    1dae:	00 0f 20    	mov.w     #0xf0, w0
    1db0:	00 80 60    	and.w     w1, w0, w0
    1db2:	00 00 e0    	cp0.w     w0
    1db4:	1d 00 3a    	bra       NZ, 0x1df0 <.L156>

00001db6 <.L0>:
    1db6:	60 b2 20    	mov.w     #0xb26, w0
    1db8:	10 40 78    	mov.b     [w0], w0
    1dba:	80 80 fb    	ze        w0, w1
    1dbc:	00 06 20    	mov.w     #0x60, w0
    1dbe:	00 80 60    	and.w     w1, w0, w0
    1dc0:	01 02 20    	mov.w     #0x20, w1
    1dc2:	81 0f 50    	sub.w     w0, w1, [w15]
    1dc4:	05 00 32    	bra       Z, 0x1dd0 <.L163>
    1dc6:	01 04 20    	mov.w     #0x40, w1
    1dc8:	81 0f 50    	sub.w     w0, w1, [w15]
    1dca:	04 00 3a    	bra       NZ, 0x1dd4 <.L164>

00001dcc <.L0>:
    1dcc:	c8 0a 07    	rcall     0x335e <_VendorRequestsOut> <L0> <.LFB3> <.LFE2>
    1dce:	03 00 37    	bra       0x1dd6 <.L159>

00001dd0 <.L163>:
    1dd0:	00 00 00    	nop       
    1dd2:	01 00 37    	bra       0x1dd6 <.L159>

00001dd4 <.L164>:
    1dd4:	00 00 00    	nop       

00001dd6 <.L159>:
    1dd6:	00 c0 20    	mov.w     #0xc00, w0
    1dd8:	01 c4 b3    	mov.b     #0x40, w1
    1dda:	01 48 78    	mov.b     w1, [w0]
    1ddc:	10 c0 20    	mov.w     #0xc01, w0
    1dde:	81 c8 b3    	mov.b     #0x88, w1
    1de0:	01 48 78    	mov.b     w1, [w0]
    1de2:	40 c0 20    	mov.w     #0xc04, w0
    1de4:	80 40 eb    	clr.b     w1
    1de6:	01 48 78    	mov.b     w1, [w0]
    1de8:	50 c0 20    	mov.w     #0xc05, w0
    1dea:	81 cc b3    	mov.b     #0xc8, w1
    1dec:	01 48 78    	mov.b     w1, [w0]
    1dee:	00 00 00    	nop       

00001df0 <.L156>:
    1df0:	00 80 fa    	ulnk      
    1df2:	00 00 06    	return    

00001df4 <_SendDataPacket>:
    1df4:	02 00 fa    	lnk       #0x2
    1df6:	81 59 80    	mov.w     0xb30, w1
    1df8:	f0 03 20    	mov.w     #0x3f, w0
    1dfa:	80 8f 50    	sub.w     w1, w0, [w15]
    1dfc:	0b 00 3e    	bra       GTU, 0x1e14 <.L166>
    1dfe:	80 59 80    	mov.w     0xb30, w0
    1e00:	00 4f 78    	mov.b     w0, [w14]
    1e02:	00 00 eb    	clr.w     w0
    1e04:	80 59 88    	mov.w     w0, 0xb30
    1e06:	60 b2 20    	mov.w     #0xb26, w0
    1e08:	80 c0 eb    	setm.b    w1
    1e0a:	01 48 78    	mov.b     w1, [w0]
    1e0c:	70 b2 20    	mov.w     #0xb27, w0
    1e0e:	80 c0 eb    	setm.b    w1
    1e10:	01 48 78    	mov.b     w1, [w0]
    1e12:	05 00 37    	bra       0x1e1e <.L167>

00001e14 <.L166>:
    1e14:	00 c4 b3    	mov.b     #0x40, w0
    1e16:	00 4f 78    	mov.b     w0, [w14]
    1e18:	80 59 80    	mov.w     0xb30, w0
    1e1a:	00 04 b1    	sub.w     #0x40, w0
    1e1c:	80 59 88    	mov.w     w0, 0xb30

00001e1e <.L167>:
    1e1e:	00 40 eb    	clr.b     w0
    1e20:	10 47 98    	mov.b     w0, [w14+1]
    1e22:	0c 00 37    	bra       0x1e3c <.L168>

00001e24 <.L169>:
    1e24:	31 60 80    	mov.w     0xc06, w1
    1e26:	1e 40 90    	mov.b     [w14+1], w0
    1e28:	00 80 fb    	ze        w0, w0
    1e2a:	80 80 40    	add.w     w1, w0, w1
    1e2c:	70 59 80    	mov.w     0xb2e, w0
    1e2e:	10 41 78    	mov.b     [w0], w2
    1e30:	82 48 78    	mov.b     w2, [w1]
    1e32:	00 00 e8    	inc.w     w0, w0
    1e34:	70 59 88    	mov.w     w0, 0xb2e
    1e36:	1e 40 90    	mov.b     [w14+1], w0
    1e38:	00 40 e8    	inc.b     w0, w0
    1e3a:	10 47 98    	mov.b     w0, [w14+1]

00001e3c <.L168>:
    1e3c:	1e 40 90    	mov.b     [w14+1], w0
    1e3e:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1e40:	f1 ff 39    	bra       NC, 0x1e24 <.L169>
    1e42:	40 c0 20    	mov.w     #0xc04, w0
    1e44:	1e 48 78    	mov.b     [w14], [w0]
    1e46:	50 c0 20    	mov.w     #0xc05, w0
    1e48:	10 40 78    	mov.b     [w0], w0
    1e4a:	00 c0 ea    	com.b     w0, w0
    1e4c:	02 c4 b3    	mov.b     #0x40, w2
    1e4e:	82 40 60    	and.b     w0, w2, w1
    1e50:	80 c8 b3    	mov.b     #0x88, w0
    1e52:	00 c0 70    	ior.b     w1, w0, w0
    1e54:	80 40 78    	mov.b     w0, w1
    1e56:	50 c0 20    	mov.w     #0xc05, w0
    1e58:	01 48 78    	mov.b     w1, [w0]
    1e5a:	00 80 fa    	ulnk      
    1e5c:	00 00 06    	return    

00001e5e <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    1e5e:	02 00 fa    	lnk       #0x2
    1e60:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    1e62:	1e 00 78    	mov.w     [w14], w0
    1e64:	01 02 07    	rcall     0x2268 <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    1e66:	1e 00 78    	mov.w     [w14], w0
    1e68:	10 08 90    	mov.w     [w0+18], w0
    1e6a:	00 00 e0    	cp0.w     w0
    1e6c:	05 00 32    	bra       Z, 0x1e78 <.L2>
        self->every(self);
    1e6e:	1e 00 78    	mov.w     [w14], w0
    1e70:	90 08 90    	mov.w     [w0+18], w1
    1e72:	1e 00 78    	mov.w     [w14], w0
    1e74:	01 00 01    	call      w1
    1e76:	1a 00 37    	bra       0x1eac <.L1>

00001e78 <.L2>:
    } else if (self->after) {
    1e78:	1e 00 78    	mov.w     [w14], w0
    1e7a:	20 08 90    	mov.w     [w0+20], w0
    1e7c:	00 00 e0    	cp0.w     w0
    1e7e:	14 00 32    	bra       Z, 0x1ea8 <.L4>
        if (self->aftercount) {
    1e80:	1e 00 78    	mov.w     [w14], w0
    1e82:	00 08 90    	mov.w     [w0+16], w0
    1e84:	00 00 e0    	cp0.w     w0
    1e86:	0a 00 32    	bra       Z, 0x1e9c <.L5>
            self->after(self);
    1e88:	1e 00 78    	mov.w     [w14], w0
    1e8a:	a0 08 90    	mov.w     [w0+20], w1
    1e8c:	1e 00 78    	mov.w     [w14], w0
    1e8e:	01 00 01    	call      w1
            self->aftercount--;
    1e90:	1e 00 78    	mov.w     [w14], w0
    1e92:	00 08 90    	mov.w     [w0+16], w0
    1e94:	80 00 e9    	dec.w     w0, w1
    1e96:	1e 00 78    	mov.w     [w14], w0
    1e98:	01 08 98    	mov.w     w1, [w0+16]
    1e9a:	08 00 37    	bra       0x1eac <.L1>

00001e9c <.L5>:
        } else {
            timer_disableInterrupt(self);
    1e9c:	1e 00 78    	mov.w     [w14], w0
    1e9e:	0c 02 07    	rcall     0x22b8 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    1ea0:	1e 00 78    	mov.w     [w14], w0
    1ea2:	80 00 eb    	clr.w     w1
    1ea4:	21 08 98    	mov.w     w1, [w0+20]
    1ea6:	02 00 37    	bra       0x1eac <.L1>

00001ea8 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    1ea8:	1e 00 78    	mov.w     [w14], w0
    1eaa:	06 02 07    	rcall     0x22b8 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

00001eac <.L1>:
    }
}
    1eac:	00 80 fa    	ulnk      
    1eae:	00 00 06    	return    

00001eb0 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    1eb0:	36 00 f8    	push      0x36
    1eb2:	80 9f be    	mov.d     w0, [w15++]
    1eb4:	82 9f be    	mov.d     w2, [w15++]
    1eb6:	84 9f be    	mov.d     w4, [w15++]
    1eb8:	86 9f be    	mov.d     w6, [w15++]
    1eba:	32 00 f8    	push      0x32
    1ebc:	34 00 f8    	push      0x34
    1ebe:	10 00 20    	mov.w     #0x1, w0
    1ec0:	a0 01 88    	mov.w     w0, 0x34
    1ec2:	00 20 20    	mov.w     #0x200, w0
    1ec4:	90 01 88    	mov.w     w0, 0x32
    1ec6:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    1ec8:	20 b3 20    	mov.w     #0xb32, w0
    1eca:	c9 ff 07    	rcall     0x1e5e <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
}
    1ecc:	00 80 fa    	ulnk      
    1ece:	34 00 f9    	pop       0x34
    1ed0:	32 00 f9    	pop       0x32
    1ed2:	4f 03 be    	mov.d     [--w15], w6
    1ed4:	4f 02 be    	mov.d     [--w15], w4
    1ed6:	4f 01 be    	mov.d     [--w15], w2
    1ed8:	4f 00 be    	mov.d     [--w15], w0
    1eda:	36 00 f9    	pop       0x36
    1edc:	00 40 06    	retfie    

00001ede <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    1ede:	36 00 f8    	push      0x36
    1ee0:	80 9f be    	mov.d     w0, [w15++]
    1ee2:	82 9f be    	mov.d     w2, [w15++]
    1ee4:	84 9f be    	mov.d     w4, [w15++]
    1ee6:	86 9f be    	mov.d     w6, [w15++]
    1ee8:	32 00 f8    	push      0x32
    1eea:	34 00 f8    	push      0x34
    1eec:	10 00 20    	mov.w     #0x1, w0
    1eee:	a0 01 88    	mov.w     w0, 0x34
    1ef0:	00 20 20    	mov.w     #0x200, w0
    1ef2:	90 01 88    	mov.w     w0, 0x32
    1ef4:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    1ef6:	80 b4 20    	mov.w     #0xb48, w0
    1ef8:	b2 ff 07    	rcall     0x1e5e <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
}
    1efa:	00 80 fa    	ulnk      
    1efc:	34 00 f9    	pop       0x34
    1efe:	32 00 f9    	pop       0x32
    1f00:	4f 03 be    	mov.d     [--w15], w6
    1f02:	4f 02 be    	mov.d     [--w15], w4
    1f04:	4f 01 be    	mov.d     [--w15], w2
    1f06:	4f 00 be    	mov.d     [--w15], w0
    1f08:	36 00 f9    	pop       0x36
    1f0a:	00 40 06    	retfie    

00001f0c <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    1f0c:	36 00 f8    	push      0x36
    1f0e:	80 9f be    	mov.d     w0, [w15++]
    1f10:	82 9f be    	mov.d     w2, [w15++]
    1f12:	84 9f be    	mov.d     w4, [w15++]
    1f14:	86 9f be    	mov.d     w6, [w15++]
    1f16:	32 00 f8    	push      0x32
    1f18:	34 00 f8    	push      0x34
    1f1a:	10 00 20    	mov.w     #0x1, w0
    1f1c:	a0 01 88    	mov.w     w0, 0x34
    1f1e:	00 20 20    	mov.w     #0x200, w0
    1f20:	90 01 88    	mov.w     w0, 0x32
    1f22:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    1f24:	e0 b5 20    	mov.w     #0xb5e, w0
    1f26:	9b ff 07    	rcall     0x1e5e <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
}
    1f28:	00 80 fa    	ulnk      
    1f2a:	34 00 f9    	pop       0x34
    1f2c:	32 00 f9    	pop       0x32
    1f2e:	4f 03 be    	mov.d     [--w15], w6
    1f30:	4f 02 be    	mov.d     [--w15], w4
    1f32:	4f 01 be    	mov.d     [--w15], w2
    1f34:	4f 00 be    	mov.d     [--w15], w0
    1f36:	36 00 f9    	pop       0x36
    1f38:	00 40 06    	retfie    

00001f3a <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    1f3a:	36 00 f8    	push      0x36
    1f3c:	80 9f be    	mov.d     w0, [w15++]
    1f3e:	82 9f be    	mov.d     w2, [w15++]
    1f40:	84 9f be    	mov.d     w4, [w15++]
    1f42:	86 9f be    	mov.d     w6, [w15++]
    1f44:	32 00 f8    	push      0x32
    1f46:	34 00 f8    	push      0x34
    1f48:	10 00 20    	mov.w     #0x1, w0
    1f4a:	a0 01 88    	mov.w     w0, 0x34
    1f4c:	00 20 20    	mov.w     #0x200, w0
    1f4e:	90 01 88    	mov.w     w0, 0x32
    1f50:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    1f52:	40 b7 20    	mov.w     #0xb74, w0
    1f54:	84 ff 07    	rcall     0x1e5e <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
}
    1f56:	00 80 fa    	ulnk      
    1f58:	34 00 f9    	pop       0x34
    1f5a:	32 00 f9    	pop       0x32
    1f5c:	4f 03 be    	mov.d     [--w15], w6
    1f5e:	4f 02 be    	mov.d     [--w15], w4
    1f60:	4f 01 be    	mov.d     [--w15], w2
    1f62:	4f 00 be    	mov.d     [--w15], w0
    1f64:	36 00 f9    	pop       0x36
    1f66:	00 40 06    	retfie    

00001f68 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    1f68:	36 00 f8    	push      0x36
    1f6a:	80 9f be    	mov.d     w0, [w15++]
    1f6c:	82 9f be    	mov.d     w2, [w15++]
    1f6e:	84 9f be    	mov.d     w4, [w15++]
    1f70:	86 9f be    	mov.d     w6, [w15++]
    1f72:	32 00 f8    	push      0x32
    1f74:	34 00 f8    	push      0x34
    1f76:	10 00 20    	mov.w     #0x1, w0
    1f78:	a0 01 88    	mov.w     w0, 0x34
    1f7a:	00 20 20    	mov.w     #0x200, w0
    1f7c:	90 01 88    	mov.w     w0, 0x32
    1f7e:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    1f80:	a0 b8 20    	mov.w     #0xb8a, w0
    1f82:	6d ff 07    	rcall     0x1e5e <_timer_serviceInterrupt> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>
}
    1f84:	00 80 fa    	ulnk      
    1f86:	34 00 f9    	pop       0x34
    1f88:	32 00 f9    	pop       0x32
    1f8a:	4f 03 be    	mov.d     [--w15], w6
    1f8c:	4f 02 be    	mov.d     [--w15], w4
    1f8e:	4f 01 be    	mov.d     [--w15], w2
    1f90:	4f 00 be    	mov.d     [--w15], w0
    1f92:	36 00 f9    	pop       0x36
    1f94:	00 40 06    	retfie    

00001f96 <_init_timer>:

void init_timer(void) {
    1f96:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    1f98:	b0 00 20    	mov.w     #0xb, w0
    1f9a:	80 1f 78    	mov.w     w0, [w15++]
    1f9c:	47 00 20    	mov.w     #0x4, w7
    1f9e:	36 c0 b3    	mov.b     #0x3, w6
    1fa0:	45 09 20    	mov.w     #0x94, w5
    1fa2:	44 08 20    	mov.w     #0x84, w4
    1fa4:	03 10 20    	mov.w     #0x100, w3
    1fa6:	22 10 20    	mov.w     #0x102, w2
    1fa8:	41 10 20    	mov.w     #0x104, w1
    1faa:	20 b3 20    	mov.w     #0xb32, w0
    1fac:	33 00 07    	rcall     0x2014 <_timer_init> <L0> <.LFB7> <.LFE6>
    1fae:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    1fb0:	c0 00 20    	mov.w     #0xc, w0
    1fb2:	80 1f 78    	mov.w     w0, [w15++]
    1fb4:	80 03 eb    	clr.w     w7
    1fb6:	76 c0 b3    	mov.b     #0x7, w6
    1fb8:	45 09 20    	mov.w     #0x94, w5
    1fba:	44 08 20    	mov.w     #0x84, w4
    1fbc:	63 10 20    	mov.w     #0x106, w3
    1fbe:	c2 10 20    	mov.w     #0x10c, w2
    1fc0:	01 11 20    	mov.w     #0x110, w1
    1fc2:	80 b4 20    	mov.w     #0xb48, w0
    1fc4:	27 00 07    	rcall     0x2014 <_timer_init> <L0> <.LFB7> <.LFE6>
    1fc6:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    1fc8:	d0 00 20    	mov.w     #0xd, w0
    1fca:	80 1f 78    	mov.w     w0, [w15++]
    1fcc:	17 00 20    	mov.w     #0x1, w7
    1fce:	86 c0 b3    	mov.b     #0x8, w6
    1fd0:	45 09 20    	mov.w     #0x94, w5
    1fd2:	44 08 20    	mov.w     #0x84, w4
    1fd4:	a3 10 20    	mov.w     #0x10a, w3
    1fd6:	e2 10 20    	mov.w     #0x10e, w2
    1fd8:	21 11 20    	mov.w     #0x112, w1
    1fda:	e0 b5 20    	mov.w     #0xb5e, w0
    1fdc:	1b 00 07    	rcall     0x2014 <_timer_init> <L0> <.LFB7> <.LFE6>
    1fde:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    1fe0:	e0 00 20    	mov.w     #0xe, w0
    1fe2:	80 1f 78    	mov.w     w0, [w15++]
    1fe4:	27 00 20    	mov.w     #0x2, w7
    1fe6:	b6 c0 b3    	mov.b     #0xb, w6
    1fe8:	65 09 20    	mov.w     #0x96, w5
    1fea:	64 08 20    	mov.w     #0x86, w4
    1fec:	43 11 20    	mov.w     #0x114, w3
    1fee:	a2 11 20    	mov.w     #0x11a, w2
    1ff0:	e1 11 20    	mov.w     #0x11e, w1
    1ff2:	40 b7 20    	mov.w     #0xb74, w0
    1ff4:	0f 00 07    	rcall     0x2014 <_timer_init> <L0> <.LFB7> <.LFE6>
    1ff6:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    1ff8:	f0 00 20    	mov.w     #0xf, w0
    1ffa:	80 1f 78    	mov.w     w0, [w15++]
    1ffc:	37 00 20    	mov.w     #0x3, w7
    1ffe:	c6 c0 b3    	mov.b     #0xc, w6
    2000:	65 09 20    	mov.w     #0x96, w5
    2002:	64 08 20    	mov.w     #0x86, w4
    2004:	83 11 20    	mov.w     #0x118, w3
    2006:	c2 11 20    	mov.w     #0x11c, w2
    2008:	01 12 20    	mov.w     #0x120, w1
    200a:	a0 b8 20    	mov.w     #0xb8a, w0
    200c:	03 00 07    	rcall     0x2014 <_timer_init> <L0> <.LFB7> <.LFE6>
    200e:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2010:	00 80 fa    	ulnk      
    2012:	00 00 06    	return    

00002014 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2014:	10 00 fa    	lnk       #0x10
    2016:	00 0f 78    	mov.w     w0, [w14]
    2018:	11 07 98    	mov.w     w1, [w14+2]
    201a:	22 07 98    	mov.w     w2, [w14+4]
    201c:	33 07 98    	mov.w     w3, [w14+6]
    201e:	44 07 98    	mov.w     w4, [w14+8]
    2020:	55 07 98    	mov.w     w5, [w14+10]
    2022:	46 4f 98    	mov.b     w6, [w14+12]
    2024:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    2026:	1e 00 78    	mov.w     [w14], w0
    2028:	9e 00 90    	mov.w     [w14+2], w1
    202a:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    202c:	1e 00 78    	mov.w     [w14], w0
    202e:	ae 00 90    	mov.w     [w14+4], w1
    2030:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    2032:	1e 00 78    	mov.w     [w14], w0
    2034:	be 00 90    	mov.w     [w14+6], w1
    2036:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    2038:	1e 00 78    	mov.w     [w14], w0
    203a:	ce 00 90    	mov.w     [w14+8], w1
    203c:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    203e:	1e 00 78    	mov.w     [w14], w0
    2040:	de 00 90    	mov.w     [w14+10], w1
    2042:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    2044:	1e 00 78    	mov.w     [w14], w0
    2046:	ce 48 90    	mov.b     [w14+12], w1
    2048:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    204a:	1e 00 78    	mov.w     [w14], w0
    204c:	fe 00 90    	mov.w     [w14+14], w1
    204e:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    2050:	1e 00 78    	mov.w     [w14], w0
    2052:	ce b8 97    	mov.w     [w14-8], w1
    2054:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    2056:	1e 00 78    	mov.w     [w14], w0
    2058:	80 00 eb    	clr.w     w1
    205a:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    205c:	1e 00 78    	mov.w     [w14], w0
    205e:	80 00 eb    	clr.w     w1
    2060:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    2062:	1e 00 78    	mov.w     [w14], w0
    2064:	80 00 eb    	clr.w     w1
    2066:	21 08 98    	mov.w     w1, [w0+20]
}
    2068:	00 80 fa    	ulnk      
    206a:	00 00 06    	return    

0000206c <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    206c:	06 00 fa    	lnk       #0x6
    206e:	88 1f 78    	mov.w     w8, [w15++]
    2070:	00 0f 78    	mov.w     w0, [w14]
    2072:	12 07 98    	mov.w     w2, [w14+2]
    2074:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    2076:	18 c0 b3    	mov.b     #0x1, w8
    2078:	d2 7b 23    	mov.w     #0x37bd, w2
    207a:	63 f8 23    	mov.w     #0x3f86, w3
    207c:	1e 00 90    	mov.w     [w14+2], w0
    207e:	ae 00 90    	mov.w     [w14+4], w1
    2080:	7a f9 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2082:	00 00 e0    	cp0.w     w0
    2084:	01 00 3c    	bra       GT, 0x2088 <.L14>
    2086:	00 44 eb    	clr.b     w8

00002088 <.L14>:
    2088:	08 04 e0    	cp0.b     w8
    208a:	69 00 3a    	bra       NZ, 0x215e <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    208c:	18 c0 b3    	mov.b     #0x1, w8
    208e:	d2 7b 23    	mov.w     #0x37bd, w2
    2090:	63 e8 23    	mov.w     #0x3e86, w3
    2092:	1e 00 90    	mov.w     [w14+2], w0
    2094:	ae 00 90    	mov.w     [w14+4], w1
    2096:	6f f9 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    2098:	00 00 e0    	cp0.w     w0
    209a:	01 00 3c    	bra       GT, 0x209e <.L17>
    209c:	00 44 eb    	clr.b     w8

0000209e <.L17>:
    209e:	08 04 e0    	cp0.b     w8
    20a0:	12 00 32    	bra       Z, 0x20c6 <.L18>
        timer_stop(self);
    20a2:	1e 00 78    	mov.w     [w14], w0
    20a4:	c4 00 07    	rcall     0x222e <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    20a6:	1e 00 78    	mov.w     [w14], w0
    20a8:	10 00 78    	mov.w     [w0], w0
    20aa:	01 03 20    	mov.w     #0x30, w1
    20ac:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    20ae:	1e 00 78    	mov.w     [w14], w0
    20b0:	10 04 90    	mov.w     [w0+2], w8
    20b2:	02 40 22    	mov.w     #0x2400, w2
    20b4:	43 77 24    	mov.w     #0x4774, w3
    20b6:	1e 00 90    	mov.w     [w14+2], w0
    20b8:	ae 00 90    	mov.w     [w14+4], w1
    20ba:	cf f9 07    	rcall     0x145a <___mulsf3>
    20bc:	5e f9 07    	rcall     0x137a <___fixunssfsi>
    20be:	00 00 78    	mov.w     w0, w0
    20c0:	00 00 e9    	dec.w     w0, w0
    20c2:	00 0c 78    	mov.w     w0, [w8]
    20c4:	4d 00 37    	bra       0x2160 <.L13>

000020c6 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    20c6:	18 c0 b3    	mov.b     #0x1, w8
    20c8:	d2 7b 23    	mov.w     #0x37bd, w2
    20ca:	63 d0 23    	mov.w     #0x3d06, w3
    20cc:	1e 00 90    	mov.w     [w14+2], w0
    20ce:	ae 00 90    	mov.w     [w14+4], w1
    20d0:	52 f9 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    20d2:	00 00 e0    	cp0.w     w0
    20d4:	01 00 3c    	bra       GT, 0x20d8 <.L19>
    20d6:	00 44 eb    	clr.b     w8

000020d8 <.L19>:
    20d8:	08 04 e0    	cp0.b     w8
    20da:	12 00 32    	bra       Z, 0x2100 <.L20>
        timer_stop(self);
    20dc:	1e 00 78    	mov.w     [w14], w0
    20de:	a7 00 07    	rcall     0x222e <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    20e0:	1e 00 78    	mov.w     [w14], w0
    20e2:	10 00 78    	mov.w     [w0], w0
    20e4:	01 02 20    	mov.w     #0x20, w1
    20e6:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    20e8:	1e 00 78    	mov.w     [w14], w0
    20ea:	10 04 90    	mov.w     [w0+2], w8
    20ec:	02 40 22    	mov.w     #0x2400, w2
    20ee:	43 87 24    	mov.w     #0x4874, w3
    20f0:	1e 00 90    	mov.w     [w14+2], w0
    20f2:	ae 00 90    	mov.w     [w14+4], w1
    20f4:	b2 f9 07    	rcall     0x145a <___mulsf3>
    20f6:	41 f9 07    	rcall     0x137a <___fixunssfsi>
    20f8:	00 00 78    	mov.w     w0, w0
    20fa:	00 00 e9    	dec.w     w0, w0
    20fc:	00 0c 78    	mov.w     w0, [w8]
    20fe:	30 00 37    	bra       0x2160 <.L13>

00002100 <.L20>:
    } else if (period>(65536.*TCY)) {
    2100:	18 c0 b3    	mov.b     #0x1, w8
    2102:	d2 7b 23    	mov.w     #0x37bd, w2
    2104:	63 b8 23    	mov.w     #0x3b86, w3
    2106:	1e 00 90    	mov.w     [w14+2], w0
    2108:	ae 00 90    	mov.w     [w14+4], w1
    210a:	35 f9 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    210c:	00 00 e0    	cp0.w     w0
    210e:	01 00 3c    	bra       GT, 0x2112 <.L21>
    2110:	00 44 eb    	clr.b     w8

00002112 <.L21>:
    2112:	08 04 e0    	cp0.b     w8
    2114:	12 00 32    	bra       Z, 0x213a <.L22>
        timer_stop(self);
    2116:	1e 00 78    	mov.w     [w14], w0
    2118:	8a 00 07    	rcall     0x222e <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    211a:	1e 00 78    	mov.w     [w14], w0
    211c:	10 00 78    	mov.w     [w0], w0
    211e:	01 01 20    	mov.w     #0x10, w1
    2120:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2122:	1e 00 78    	mov.w     [w14], w0
    2124:	10 04 90    	mov.w     [w0+2], w8
    2126:	02 40 22    	mov.w     #0x2400, w2
    2128:	43 9f 24    	mov.w     #0x49f4, w3
    212a:	1e 00 90    	mov.w     [w14+2], w0
    212c:	ae 00 90    	mov.w     [w14+4], w1
    212e:	95 f9 07    	rcall     0x145a <___mulsf3>
    2130:	24 f9 07    	rcall     0x137a <___fixunssfsi>
    2132:	00 00 78    	mov.w     w0, w0
    2134:	00 00 e9    	dec.w     w0, w0
    2136:	00 0c 78    	mov.w     w0, [w8]
    2138:	13 00 37    	bra       0x2160 <.L13>

0000213a <.L22>:
    } else {
        timer_stop(self);
    213a:	1e 00 78    	mov.w     [w14], w0
    213c:	78 00 07    	rcall     0x222e <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    213e:	1e 00 78    	mov.w     [w14], w0
    2140:	10 00 78    	mov.w     [w0], w0
    2142:	80 00 eb    	clr.w     w1
    2144:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2146:	1e 00 78    	mov.w     [w14], w0
    2148:	10 04 90    	mov.w     [w0+2], w8
    214a:	02 40 22    	mov.w     #0x2400, w2
    214c:	43 b7 24    	mov.w     #0x4b74, w3
    214e:	1e 00 90    	mov.w     [w14+2], w0
    2150:	ae 00 90    	mov.w     [w14+4], w1
    2152:	83 f9 07    	rcall     0x145a <___mulsf3>
    2154:	12 f9 07    	rcall     0x137a <___fixunssfsi>
    2156:	00 00 78    	mov.w     w0, w0
    2158:	00 00 e9    	dec.w     w0, w0
    215a:	00 0c 78    	mov.w     w0, [w8]
    215c:	01 00 37    	bra       0x2160 <.L13>

0000215e <.L23>:
    215e:	00 00 00    	nop       

00002160 <.L13>:
    }
}
    2160:	4f 04 78    	mov.w     [--w15], w8
    2162:	00 80 fa    	ulnk      
    2164:	00 00 06    	return    

00002166 <_timer_period>:

float timer_period(_TIMER *self) {
    2166:	04 00 fa    	lnk       #0x4
    2168:	88 9f be    	mov.d     w8, [w15++]
    216a:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    216c:	1e 00 90    	mov.w     [w14+2], w0
    216e:	10 00 78    	mov.w     [w0], w0
    2170:	90 00 78    	mov.w     [w0], w1
    2172:	00 03 20    	mov.w     #0x30, w0
    2174:	00 80 60    	and.w     w1, w0, w0
    2176:	44 00 de    	lsr.w     w0, #0x4, w0
    2178:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    217a:	1e 00 78    	mov.w     [w14], w0
    217c:	c2 00 dd    	sl.w      w0, #0x2, w1
    217e:	20 be 20    	mov.w     #0xbe2, w0
    2180:	00 80 40    	add.w     w1, w0, w0
    2182:	10 04 be    	mov.d     [w0], w8
    2184:	1e 00 90    	mov.w     [w14+2], w0
    2186:	10 00 90    	mov.w     [w0+2], w0
    2188:	10 00 78    	mov.w     [w0], w0
    218a:	80 00 eb    	clr.w     w1
    218c:	11 f9 07    	rcall     0x13b0 <___floatunsisf>
    218e:	02 00 20    	mov.w     #0x0, w2
    2190:	03 f8 23    	mov.w     #0x3f80, w3
    2192:	50 f8 07    	rcall     0x1234 <___addsf3>
    2194:	00 01 be    	mov.d     w0, w2
    2196:	08 00 be    	mov.d     w8, w0
    2198:	60 f9 07    	rcall     0x145a <___mulsf3>
}
    219a:	4f 04 be    	mov.d     [--w15], w8
    219c:	00 80 fa    	ulnk      
    219e:	00 00 06    	return    

000021a0 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    21a0:	06 00 fa    	lnk       #0x6
    21a2:	00 0f 78    	mov.w     w0, [w14]
    21a4:	12 07 98    	mov.w     w2, [w14+2]
    21a6:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    21a8:	1e 01 90    	mov.w     [w14+2], w2
    21aa:	ae 01 90    	mov.w     [w14+4], w3
    21ac:	00 00 20    	mov.w     #0x0, w0
    21ae:	01 f8 23    	mov.w     #0x3f80, w1
    21b0:	9e f8 07    	rcall     0x12ee <___divsf3>
    21b2:	00 01 be    	mov.d     w0, w2
    21b4:	1e 00 78    	mov.w     [w14], w0
    21b6:	5a ff 07    	rcall     0x206c <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    21b8:	00 80 fa    	ulnk      
    21ba:	00 00 06    	return    

000021bc <_timer_freq>:

float timer_freq(_TIMER *self) {
    21bc:	02 00 fa    	lnk       #0x2
    21be:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    21c0:	1e 00 78    	mov.w     [w14], w0
    21c2:	d1 ff 07    	rcall     0x2166 <_timer_period> <L0> <.LFB9> <.LFE8>
    21c4:	00 01 be    	mov.d     w0, w2
    21c6:	00 00 20    	mov.w     #0x0, w0
    21c8:	01 f8 23    	mov.w     #0x3f80, w1
    21ca:	91 f8 07    	rcall     0x12ee <___divsf3>
}
    21cc:	00 80 fa    	ulnk      
    21ce:	00 00 06    	return    

000021d0 <_timer_time>:

float timer_time(_TIMER *self) {
    21d0:	04 00 fa    	lnk       #0x4
    21d2:	88 9f be    	mov.d     w8, [w15++]
    21d4:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    21d6:	1e 00 90    	mov.w     [w14+2], w0
    21d8:	10 00 78    	mov.w     [w0], w0
    21da:	90 00 78    	mov.w     [w0], w1
    21dc:	00 03 20    	mov.w     #0x30, w0
    21de:	00 80 60    	and.w     w1, w0, w0
    21e0:	44 00 de    	lsr.w     w0, #0x4, w0
    21e2:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    21e4:	1e 00 78    	mov.w     [w14], w0
    21e6:	c2 00 dd    	sl.w      w0, #0x2, w1
    21e8:	20 be 20    	mov.w     #0xbe2, w0
    21ea:	00 80 40    	add.w     w1, w0, w0
    21ec:	10 04 be    	mov.d     [w0], w8
    21ee:	1e 00 90    	mov.w     [w14+2], w0
    21f0:	10 00 90    	mov.w     [w0+2], w0
    21f2:	10 00 78    	mov.w     [w0], w0
    21f4:	80 00 eb    	clr.w     w1
    21f6:	dc f8 07    	rcall     0x13b0 <___floatunsisf>
    21f8:	02 00 20    	mov.w     #0x0, w2
    21fa:	03 f8 23    	mov.w     #0x3f80, w3
    21fc:	1b f8 07    	rcall     0x1234 <___addsf3>
    21fe:	00 01 be    	mov.d     w0, w2
    2200:	08 00 be    	mov.d     w8, w0
    2202:	2b f9 07    	rcall     0x145a <___mulsf3>
}
    2204:	4f 04 be    	mov.d     [--w15], w8
    2206:	00 80 fa    	ulnk      
    2208:	00 00 06    	return    

0000220a <_timer_start>:

void timer_start(_TIMER *self) {
    220a:	02 00 fa    	lnk       #0x2
    220c:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    220e:	1e 00 78    	mov.w     [w14], w0
    2210:	2b 00 07    	rcall     0x2268 <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    2212:	1e 00 78    	mov.w     [w14], w0
    2214:	20 00 90    	mov.w     [w0+4], w0
    2216:	80 00 eb    	clr.w     w1
    2218:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    221a:	1e 00 78    	mov.w     [w14], w0
    221c:	10 00 78    	mov.w     [w0], w0
    221e:	9e 00 78    	mov.w     [w14], w1
    2220:	91 00 78    	mov.w     [w1], w1
    2222:	11 01 78    	mov.w     [w1], w2
    2224:	01 00 28    	mov.w     #0x8000, w1
    2226:	82 80 70    	ior.w     w1, w2, w1
    2228:	01 08 78    	mov.w     w1, [w0]
}
    222a:	00 80 fa    	ulnk      
    222c:	00 00 06    	return    

0000222e <_timer_stop>:

void timer_stop(_TIMER *self) {
    222e:	02 00 fa    	lnk       #0x2
    2230:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    2232:	1e 00 78    	mov.w     [w14], w0
    2234:	10 00 78    	mov.w     [w0], w0
    2236:	9e 00 78    	mov.w     [w14], w1
    2238:	91 00 78    	mov.w     [w1], w1
    223a:	11 01 78    	mov.w     [w1], w2
    223c:	f1 ff 27    	mov.w     #0x7fff, w1
    223e:	81 00 61    	and.w     w2, w1, w1
    2240:	01 08 78    	mov.w     w1, [w0]
}
    2242:	00 80 fa    	ulnk      
    2244:	00 00 06    	return    

00002246 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2246:	02 00 fa    	lnk       #0x2
    2248:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    224a:	1e 00 78    	mov.w     [w14], w0
    224c:	30 00 90    	mov.w     [w0+6], w0
    224e:	90 00 78    	mov.w     [w0], w1
    2250:	1e 00 78    	mov.w     [w14], w0
    2252:	20 48 90    	mov.b     [w0+10], w0
    2254:	00 80 fb    	ze        w0, w0
    2256:	12 00 20    	mov.w     #0x1, w2
    2258:	00 10 dd    	sl.w      w2, w0, w0
    225a:	00 80 60    	and.w     w1, w0, w0
    225c:	00 f0 a7    	btsc.w    w0, #0xf
    225e:	00 00 ea    	neg.w     w0, w0
    2260:	00 00 ea    	neg.w     w0, w0
    2262:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2264:	00 80 fa    	ulnk      
    2266:	00 00 06    	return    

00002268 <_timer_lower>:

void timer_lower(_TIMER *self) {
    2268:	02 00 fa    	lnk       #0x2
    226a:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    226c:	1e 00 78    	mov.w     [w14], w0
    226e:	30 00 90    	mov.w     [w0+6], w0
    2270:	9e 00 78    	mov.w     [w14], w1
    2272:	b1 00 90    	mov.w     [w1+6], w1
    2274:	11 01 78    	mov.w     [w1], w2
    2276:	9e 00 78    	mov.w     [w14], w1
    2278:	a1 48 90    	mov.b     [w1+10], w1
    227a:	81 80 fb    	ze        w1, w1
    227c:	13 00 20    	mov.w     #0x1, w3
    227e:	81 18 dd    	sl.w      w3, w1, w1
    2280:	81 80 ea    	com.w     w1, w1
    2282:	81 00 61    	and.w     w2, w1, w1
    2284:	01 08 78    	mov.w     w1, [w0]
}
    2286:	00 80 fa    	ulnk      
    2288:	00 00 06    	return    

0000228a <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    228a:	02 00 fa    	lnk       #0x2
    228c:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    228e:	1e 00 78    	mov.w     [w14], w0
    2290:	20 00 90    	mov.w     [w0+4], w0
    2292:	10 00 78    	mov.w     [w0], w0
}
    2294:	00 80 fa    	ulnk      
    2296:	00 00 06    	return    

00002298 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2298:	02 00 fa    	lnk       #0x2
    229a:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	40 00 90    	mov.w     [w0+8], w0
    22a0:	9e 00 78    	mov.w     [w14], w1
    22a2:	c1 00 90    	mov.w     [w1+8], w1
    22a4:	11 01 78    	mov.w     [w1], w2
    22a6:	9e 00 78    	mov.w     [w14], w1
    22a8:	a1 48 90    	mov.b     [w1+10], w1
    22aa:	81 80 fb    	ze        w1, w1
    22ac:	13 00 20    	mov.w     #0x1, w3
    22ae:	81 18 dd    	sl.w      w3, w1, w1
    22b0:	82 80 70    	ior.w     w1, w2, w1
    22b2:	01 08 78    	mov.w     w1, [w0]
}
    22b4:	00 80 fa    	ulnk      
    22b6:	00 00 06    	return    

000022b8 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    22b8:	02 00 fa    	lnk       #0x2
    22ba:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    22bc:	1e 00 78    	mov.w     [w14], w0
    22be:	40 00 90    	mov.w     [w0+8], w0
    22c0:	9e 00 78    	mov.w     [w14], w1
    22c2:	c1 00 90    	mov.w     [w1+8], w1
    22c4:	11 01 78    	mov.w     [w1], w2
    22c6:	9e 00 78    	mov.w     [w14], w1
    22c8:	a1 48 90    	mov.b     [w1+10], w1
    22ca:	81 80 fb    	ze        w1, w1
    22cc:	13 00 20    	mov.w     #0x1, w3
    22ce:	81 18 dd    	sl.w      w3, w1, w1
    22d0:	81 80 ea    	com.w     w1, w1
    22d2:	81 00 61    	and.w     w2, w1, w1
    22d4:	01 08 78    	mov.w     w1, [w0]
}
    22d6:	00 80 fa    	ulnk      
    22d8:	00 00 06    	return    

000022da <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    22da:	08 00 fa    	lnk       #0x8
    22dc:	00 0f 78    	mov.w     w0, [w14]
    22de:	12 07 98    	mov.w     w2, [w14+2]
    22e0:	23 07 98    	mov.w     w3, [w14+4]
    22e2:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    22e4:	1e 00 78    	mov.w     [w14], w0
    22e6:	e8 ff 07    	rcall     0x22b8 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    22e8:	1e 01 90    	mov.w     [w14+2], w2
    22ea:	ae 01 90    	mov.w     [w14+4], w3
    22ec:	1e 00 78    	mov.w     [w14], w0
    22ee:	be fe 07    	rcall     0x206c <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    22f0:	1e 00 78    	mov.w     [w14], w0
    22f2:	80 00 eb    	clr.w     w1
    22f4:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    22f6:	1e 00 78    	mov.w     [w14], w0
    22f8:	be 00 90    	mov.w     [w14+6], w1
    22fa:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    22fc:	1e 00 78    	mov.w     [w14], w0
    22fe:	80 00 eb    	clr.w     w1
    2300:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    2302:	1e 00 78    	mov.w     [w14], w0
    2304:	c9 ff 07    	rcall     0x2298 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    2306:	1e 00 78    	mov.w     [w14], w0
    2308:	80 ff 07    	rcall     0x220a <_timer_start> <L0> <.LFB13> <.LFE12>
}
    230a:	00 80 fa    	ulnk      
    230c:	00 00 06    	return    

0000230e <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    230e:	0a 00 fa    	lnk       #0xa
    2310:	00 0f 78    	mov.w     w0, [w14]
    2312:	12 07 98    	mov.w     w2, [w14+2]
    2314:	23 07 98    	mov.w     w3, [w14+4]
    2316:	31 07 98    	mov.w     w1, [w14+6]
    2318:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    231a:	1e 00 78    	mov.w     [w14], w0
    231c:	cd ff 07    	rcall     0x22b8 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    231e:	1e 01 90    	mov.w     [w14+2], w2
    2320:	ae 01 90    	mov.w     [w14+4], w3
    2322:	1e 00 78    	mov.w     [w14], w0
    2324:	a3 fe 07    	rcall     0x206c <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	be 00 90    	mov.w     [w14+6], w1
    232a:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	80 00 eb    	clr.w     w1
    2330:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    2332:	1e 00 78    	mov.w     [w14], w0
    2334:	ce 00 90    	mov.w     [w14+8], w1
    2336:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    2338:	1e 00 78    	mov.w     [w14], w0
    233a:	ae ff 07    	rcall     0x2298 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    233c:	1e 00 78    	mov.w     [w14], w0
    233e:	65 ff 07    	rcall     0x220a <_timer_start> <L0> <.LFB13> <.LFE12>
}
    2340:	00 80 fa    	ulnk      
    2342:	00 00 06    	return    

00002344 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    2344:	02 00 fa    	lnk       #0x2
    2346:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    2348:	1e 00 78    	mov.w     [w14], w0
    234a:	b6 ff 07    	rcall     0x22b8 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    234c:	1e 00 78    	mov.w     [w14], w0
    234e:	8c ff 07    	rcall     0x2268 <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    2350:	1e 00 78    	mov.w     [w14], w0
    2352:	6d ff 07    	rcall     0x222e <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    2354:	1e 00 78    	mov.w     [w14], w0
    2356:	80 00 eb    	clr.w     w1
    2358:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    235a:	1e 00 78    	mov.w     [w14], w0
    235c:	80 00 eb    	clr.w     w1
    235e:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    2360:	1e 00 78    	mov.w     [w14], w0
    2362:	80 00 eb    	clr.w     w1
    2364:	21 08 98    	mov.w     w1, [w0+20]
}
    2366:	00 80 fa    	ulnk      
    2368:	00 00 06    	return    

0000236a <_init_spi>:
    236a:	00 00 fa    	lnk       #0x0
    236c:	80 00 20    	mov.w     #0x8, w0
    236e:	80 1f 78    	mov.w     w0, [w15++]
    2370:	77 00 20    	mov.w     #0x7, w7
    2372:	00 43 eb    	clr.b     w6
    2374:	85 6a 20    	mov.w     #0x6a8, w5
    2376:	84 24 20    	mov.w     #0x248, w4
    2378:	43 24 20    	mov.w     #0x244, w3
    237a:	22 24 20    	mov.w     #0x242, w2
    237c:	01 24 20    	mov.w     #0x240, w1
    237e:	00 ba 20    	mov.w     #0xba0, w0
    2380:	1b 00 07    	rcall     0x23b8 <_spi_init> <L0> <.LFB1> <.LFE0>
    2382:	8f 87 e9    	dec2.w    w15, w15
    2384:	b0 00 20    	mov.w     #0xb, w0
    2386:	80 1f 78    	mov.w     w0, [w15++]
    2388:	a7 00 20    	mov.w     #0xa, w7
    238a:	00 43 eb    	clr.b     w6
    238c:	c5 6a 20    	mov.w     #0x6ac, w5
    238e:	84 26 20    	mov.w     #0x268, w4
    2390:	43 26 20    	mov.w     #0x264, w3
    2392:	22 26 20    	mov.w     #0x262, w2
    2394:	01 26 20    	mov.w     #0x260, w1
    2396:	60 bb 20    	mov.w     #0xbb6, w0
    2398:	0f 00 07    	rcall     0x23b8 <_spi_init> <L0> <.LFB1> <.LFE0>
    239a:	8f 87 e9    	dec2.w    w15, w15
    239c:	10 02 20    	mov.w     #0x21, w0
    239e:	80 1f 78    	mov.w     w0, [w15++]
    23a0:	07 02 20    	mov.w     #0x20, w7
    23a2:	00 43 eb    	clr.b     w6
    23a4:	85 6b 20    	mov.w     #0x6b8, w5
    23a6:	84 28 20    	mov.w     #0x288, w4
    23a8:	43 28 20    	mov.w     #0x284, w3
    23aa:	22 28 20    	mov.w     #0x282, w2
    23ac:	01 28 20    	mov.w     #0x280, w1
    23ae:	c0 bc 20    	mov.w     #0xbcc, w0
    23b0:	03 00 07    	rcall     0x23b8 <_spi_init> <L0> <.LFB1> <.LFE0>
    23b2:	8f 87 e9    	dec2.w    w15, w15
    23b4:	00 80 fa    	ulnk      
    23b6:	00 00 06    	return    

000023b8 <_spi_init>:
    23b8:	10 00 fa    	lnk       #0x10
    23ba:	00 0f 78    	mov.w     w0, [w14]
    23bc:	11 07 98    	mov.w     w1, [w14+2]
    23be:	22 07 98    	mov.w     w2, [w14+4]
    23c0:	33 07 98    	mov.w     w3, [w14+6]
    23c2:	44 07 98    	mov.w     w4, [w14+8]
    23c4:	55 07 98    	mov.w     w5, [w14+10]
    23c6:	46 4f 98    	mov.b     w6, [w14+12]
    23c8:	77 07 98    	mov.w     w7, [w14+14]
    23ca:	1e 00 78    	mov.w     [w14], w0
    23cc:	9e 00 90    	mov.w     [w14+2], w1
    23ce:	01 08 78    	mov.w     w1, [w0]
    23d0:	1e 00 78    	mov.w     [w14], w0
    23d2:	ae 00 90    	mov.w     [w14+4], w1
    23d4:	11 00 98    	mov.w     w1, [w0+2]
    23d6:	1e 00 78    	mov.w     [w14], w0
    23d8:	be 00 90    	mov.w     [w14+6], w1
    23da:	21 00 98    	mov.w     w1, [w0+4]
    23dc:	1e 00 78    	mov.w     [w14], w0
    23de:	ce 00 90    	mov.w     [w14+8], w1
    23e0:	31 00 98    	mov.w     w1, [w0+6]
    23e2:	1e 00 78    	mov.w     [w14], w0
    23e4:	de 00 90    	mov.w     [w14+10], w1
    23e6:	41 00 98    	mov.w     w1, [w0+8]
    23e8:	1e 00 78    	mov.w     [w14], w0
    23ea:	ce 48 90    	mov.b     [w14+12], w1
    23ec:	21 48 98    	mov.b     w1, [w0+10]
    23ee:	1e 00 78    	mov.w     [w14], w0
    23f0:	fe 00 90    	mov.w     [w14+14], w1
    23f2:	61 00 98    	mov.w     w1, [w0+12]
    23f4:	1e 00 78    	mov.w     [w14], w0
    23f6:	ce b8 97    	mov.w     [w14-8], w1
    23f8:	71 00 98    	mov.w     w1, [w0+14]
    23fa:	1e 00 78    	mov.w     [w14], w0
    23fc:	80 00 eb    	clr.w     w1
    23fe:	01 08 98    	mov.w     w1, [w0+16]
    2400:	1e 00 78    	mov.w     [w14], w0
    2402:	80 00 eb    	clr.w     w1
    2404:	11 08 98    	mov.w     w1, [w0+18]
    2406:	1e 00 78    	mov.w     [w14], w0
    2408:	80 00 eb    	clr.w     w1
    240a:	21 08 98    	mov.w     w1, [w0+20]
    240c:	00 80 fa    	ulnk      
    240e:	00 00 06    	return    

00002410 <_spi_open>:
    2410:	1a 00 fa    	lnk       #0x1a
    2412:	88 1f 78    	mov.w     w8, [w15++]
    2414:	60 07 98    	mov.w     w0, [w14+12]
    2416:	71 07 98    	mov.w     w1, [w14+14]
    2418:	02 0f 98    	mov.w     w2, [w14+16]
    241a:	13 0f 98    	mov.w     w3, [w14+18]
    241c:	24 0f 98    	mov.w     w4, [w14+20]
    241e:	35 0f 98    	mov.w     w5, [w14+22]
    2420:	06 5f 98    	mov.b     w6, [w14+24]
    2422:	00 10 20    	mov.w     #0x100, w0
    2424:	20 07 98    	mov.w     w0, [w14+4]
    2426:	00 00 eb    	clr.w     w0
    2428:	30 07 98    	mov.w     w0, [w14+6]
    242a:	00 14 20    	mov.w     #0x140, w0
    242c:	40 07 98    	mov.w     w0, [w14+8]
    242e:	00 04 20    	mov.w     #0x40, w0
    2430:	50 07 98    	mov.w     w0, [w14+10]
    2432:	7e 00 90    	mov.w     [w14+14], w0
    2434:	60 00 90    	mov.w     [w0+12], w0
    2436:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2438:	36 01 32    	bra       Z, 0x26a6 <.L21>
    243a:	0e 08 90    	mov.w     [w14+16], w0
    243c:	60 00 90    	mov.w     [w0+12], w0
    243e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2440:	34 01 32    	bra       Z, 0x26aa <.L22>
    2442:	1e 08 90    	mov.w     [w14+18], w0
    2444:	60 00 90    	mov.w     [w0+12], w0
    2446:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2448:	32 01 32    	bra       Z, 0x26ae <.L23>
    244a:	7e 00 90    	mov.w     [w14+14], w0
    244c:	00 08 90    	mov.w     [w0+16], w0
    244e:	00 00 e0    	cp0.w     w0
    2450:	97 00 3a    	bra       NZ, 0x2580 <.L7>
    2452:	0e 08 90    	mov.w     [w14+16], w0
    2454:	00 08 90    	mov.w     [w0+16], w0
    2456:	00 00 e0    	cp0.w     w0
    2458:	93 00 3a    	bra       NZ, 0x2580 <.L7>
    245a:	1e 08 90    	mov.w     [w14+18], w0
    245c:	00 08 90    	mov.w     [w0+16], w0
    245e:	00 00 e0    	cp0.w     w0
    2460:	8f 00 3a    	bra       NZ, 0x2580 <.L7>
    2462:	7e 00 90    	mov.w     [w14+14], w0
    2464:	66 03 07    	rcall     0x2b32 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2466:	0e 08 90    	mov.w     [w14+16], w0
    2468:	8b 03 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    246a:	0e 08 90    	mov.w     [w14+16], w0
    246c:	e6 03 07    	rcall     0x2c3a <_pin_set> <L0> <.LFB8> <.LFE7>
    246e:	1e 08 90    	mov.w     [w14+18], w0
    2470:	87 03 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2472:	1e 08 90    	mov.w     [w14+18], w0
    2474:	f7 03 07    	rcall     0x2c64 <_pin_clear> <L0> <.LFB9> <.LFE8>
    2476:	6e 00 90    	mov.w     [w14+12], w0
    2478:	fe 00 90    	mov.w     [w14+14], w1
    247a:	01 08 98    	mov.w     w1, [w0+16]
    247c:	7e 00 90    	mov.w     [w14+14], w0
    247e:	ee 00 90    	mov.w     [w14+12], w1
    2480:	01 08 98    	mov.w     w1, [w0+16]
    2482:	7e 00 90    	mov.w     [w14+14], w0
    2484:	80 00 eb    	clr.w     w1
    2486:	11 08 98    	mov.w     w1, [w0+18]
    2488:	7e 00 90    	mov.w     [w14+14], w0
    248a:	80 00 eb    	clr.w     w1
    248c:	21 08 98    	mov.w     w1, [w0+20]
    248e:	6e 00 90    	mov.w     [w14+12], w0
    2490:	8e 08 90    	mov.w     [w14+16], w1
    2492:	11 08 98    	mov.w     w1, [w0+18]
    2494:	0e 08 90    	mov.w     [w14+16], w0
    2496:	ee 00 90    	mov.w     [w14+12], w1
    2498:	01 08 98    	mov.w     w1, [w0+16]
    249a:	0e 08 90    	mov.w     [w14+16], w0
    249c:	80 00 eb    	clr.w     w1
    249e:	11 08 98    	mov.w     w1, [w0+18]
    24a0:	0e 08 90    	mov.w     [w14+16], w0
    24a2:	80 00 eb    	clr.w     w1
    24a4:	21 08 98    	mov.w     w1, [w0+20]
    24a6:	6e 00 90    	mov.w     [w14+12], w0
    24a8:	9e 08 90    	mov.w     [w14+18], w1
    24aa:	21 08 98    	mov.w     w1, [w0+20]
    24ac:	1e 08 90    	mov.w     [w14+18], w0
    24ae:	ee 00 90    	mov.w     [w14+12], w1
    24b0:	01 08 98    	mov.w     w1, [w0+16]
    24b2:	1e 08 90    	mov.w     [w14+18], w0
    24b4:	80 00 eb    	clr.w     w1
    24b6:	11 08 98    	mov.w     w1, [w0+18]
    24b8:	1e 08 90    	mov.w     [w14+18], w0
    24ba:	80 00 eb    	clr.w     w1
    24bc:	21 08 98    	mov.w     w1, [w0+20]
    24be:	11 3a 80    	mov.w     0x742, w1
    24c0:	f0 0b 20    	mov.w     #0xbf, w0
    24c2:	00 81 60    	and.w     w1, w0, w2
    24c4:	60 04 20    	mov.w     #0x46, w0
    24c6:	71 05 20    	mov.w     #0x57, w1
    24c8:	23 74 20    	mov.w     #0x742, w3
    24ca:	80 49 78    	mov.b     w0, [w3]
    24cc:	81 49 78    	mov.b     w1, [w3]
    24ce:	82 49 78    	mov.b     w2, [w3]
    24d0:	6e 00 90    	mov.w     [w14+12], w0
    24d2:	40 00 90    	mov.w     [w0+8], w0
    24d4:	ee 00 90    	mov.w     [w14+12], w1
    24d6:	c1 00 90    	mov.w     [w1+8], w1
    24d8:	11 01 78    	mov.w     [w1], w2
    24da:	ee 00 90    	mov.w     [w14+12], w1
    24dc:	a1 48 90    	mov.b     [w1+10], w1
    24de:	81 80 fb    	ze        w1, w1
    24e0:	f3 03 20    	mov.w     #0x3f, w3
    24e2:	81 18 dd    	sl.w      w3, w1, w1
    24e4:	81 80 ea    	com.w     w1, w1
    24e6:	81 00 61    	and.w     w2, w1, w1
    24e8:	01 08 78    	mov.w     w1, [w0]
    24ea:	6e 00 90    	mov.w     [w14+12], w0
    24ec:	40 00 90    	mov.w     [w0+8], w0
    24ee:	ee 00 90    	mov.w     [w14+12], w1
    24f0:	c1 00 90    	mov.w     [w1+8], w1
    24f2:	11 01 78    	mov.w     [w1], w2
    24f4:	fe 00 90    	mov.w     [w14+14], w1
    24f6:	e1 01 90    	mov.w     [w1+12], w3
    24f8:	ee 00 90    	mov.w     [w14+12], w1
    24fa:	a1 48 90    	mov.b     [w1+10], w1
    24fc:	81 80 fb    	ze        w1, w1
    24fe:	81 18 dd    	sl.w      w3, w1, w1
    2500:	82 80 70    	ior.w     w1, w2, w1
    2502:	01 08 78    	mov.w     w1, [w0]
    2504:	0e 08 90    	mov.w     [w14+16], w0
    2506:	70 00 90    	mov.w     [w0+14], w0
    2508:	8e 08 90    	mov.w     [w14+16], w1
    250a:	f1 00 90    	mov.w     [w1+14], w1
    250c:	11 01 78    	mov.w     [w1], w2
    250e:	8e 08 90    	mov.w     [w14+16], w1
    2510:	a1 48 90    	mov.b     [w1+10], w1
    2512:	81 80 fb    	ze        w1, w1
    2514:	f3 03 20    	mov.w     #0x3f, w3
    2516:	81 18 dd    	sl.w      w3, w1, w1
    2518:	81 80 ea    	com.w     w1, w1
    251a:	81 00 61    	and.w     w2, w1, w1
    251c:	01 08 78    	mov.w     w1, [w0]
    251e:	0e 08 90    	mov.w     [w14+16], w0
    2520:	70 00 90    	mov.w     [w0+14], w0
    2522:	8e 08 90    	mov.w     [w14+16], w1
    2524:	f1 00 90    	mov.w     [w1+14], w1
    2526:	11 01 78    	mov.w     [w1], w2
    2528:	ee 00 90    	mov.w     [w14+12], w1
    252a:	e1 01 90    	mov.w     [w1+12], w3
    252c:	8e 08 90    	mov.w     [w14+16], w1
    252e:	a1 48 90    	mov.b     [w1+10], w1
    2530:	81 80 fb    	ze        w1, w1
    2532:	81 18 dd    	sl.w      w3, w1, w1
    2534:	82 80 70    	ior.w     w1, w2, w1
    2536:	01 08 78    	mov.w     w1, [w0]
    2538:	1e 08 90    	mov.w     [w14+18], w0
    253a:	70 00 90    	mov.w     [w0+14], w0
    253c:	9e 08 90    	mov.w     [w14+18], w1
    253e:	f1 00 90    	mov.w     [w1+14], w1
    2540:	11 01 78    	mov.w     [w1], w2
    2542:	9e 08 90    	mov.w     [w14+18], w1
    2544:	a1 48 90    	mov.b     [w1+10], w1
    2546:	81 80 fb    	ze        w1, w1
    2548:	f3 03 20    	mov.w     #0x3f, w3
    254a:	81 18 dd    	sl.w      w3, w1, w1
    254c:	81 80 ea    	com.w     w1, w1
    254e:	81 00 61    	and.w     w2, w1, w1
    2550:	01 08 78    	mov.w     w1, [w0]
    2552:	1e 08 90    	mov.w     [w14+18], w0
    2554:	70 00 90    	mov.w     [w0+14], w0
    2556:	9e 08 90    	mov.w     [w14+18], w1
    2558:	f1 00 90    	mov.w     [w1+14], w1
    255a:	11 01 78    	mov.w     [w1], w2
    255c:	ee 00 90    	mov.w     [w14+12], w1
    255e:	f1 01 90    	mov.w     [w1+14], w3
    2560:	9e 08 90    	mov.w     [w14+18], w1
    2562:	a1 48 90    	mov.b     [w1+10], w1
    2564:	81 80 fb    	ze        w1, w1
    2566:	81 18 dd    	sl.w      w3, w1, w1
    2568:	82 80 70    	ior.w     w1, w2, w1
    256a:	01 08 78    	mov.w     w1, [w0]
    256c:	10 3a 80    	mov.w     0x742, w0
    256e:	00 01 78    	mov.w     w0, w2
    2570:	02 60 a0    	bset.w    w2, #0x6
    2572:	60 04 20    	mov.w     #0x46, w0
    2574:	71 05 20    	mov.w     #0x57, w1
    2576:	23 74 20    	mov.w     #0x742, w3
    2578:	80 49 78    	mov.b     w0, [w3]
    257a:	81 49 78    	mov.b     w1, [w3]
    257c:	82 49 78    	mov.b     w2, [w3]
    257e:	0f 00 37    	bra       0x259e <.L8>

00002580 <.L7>:
    2580:	6e 00 90    	mov.w     [w14+12], w0
    2582:	80 08 90    	mov.w     [w0+16], w1
    2584:	7e 00 90    	mov.w     [w14+14], w0
    2586:	80 8f 50    	sub.w     w1, w0, [w15]
    2588:	94 00 3a    	bra       NZ, 0x26b2 <.L24>
    258a:	6e 00 90    	mov.w     [w14+12], w0
    258c:	90 08 90    	mov.w     [w0+18], w1
    258e:	0e 08 90    	mov.w     [w14+16], w0
    2590:	80 8f 50    	sub.w     w1, w0, [w15]
    2592:	91 00 3a    	bra       NZ, 0x26b6 <.L25>
    2594:	6e 00 90    	mov.w     [w14+12], w0
    2596:	a0 08 90    	mov.w     [w0+20], w1
    2598:	1e 08 90    	mov.w     [w14+18], w0
    259a:	80 8f 50    	sub.w     w1, w0, [w15]
    259c:	8e 00 3a    	bra       NZ, 0x26ba <.L26>

0000259e <.L8>:
    259e:	18 c0 b3    	mov.b     #0x1, w8
    25a0:	02 40 22    	mov.w     #0x2400, w2
    25a2:	43 af 24    	mov.w     #0x4af4, w3
    25a4:	2e 08 90    	mov.w     [w14+20], w0
    25a6:	be 08 90    	mov.w     [w14+22], w1
    25a8:	e6 f6 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    25aa:	00 00 e0    	cp0.w     w0
    25ac:	01 00 3c    	bra       GT, 0x25b0 <.L10>
    25ae:	00 44 eb    	clr.b     w8

000025b0 <.L10>:
    25b0:	08 04 e0    	cp0.b     w8
    25b2:	04 00 32    	bra       Z, 0x25bc <.L11>
    25b4:	00 40 22    	mov.w     #0x2400, w0
    25b6:	41 af 24    	mov.w     #0x4af4, w1
    25b8:	20 0f 98    	mov.w     w0, [w14+20]
    25ba:	31 0f 98    	mov.w     w1, [w14+22]

000025bc <.L11>:
    25bc:	18 c0 b3    	mov.b     #0x1, w8
    25be:	02 40 22    	mov.w     #0x2400, w2
    25c0:	43 6f 24    	mov.w     #0x46f4, w3
    25c2:	2e 08 90    	mov.w     [w14+20], w0
    25c4:	be 08 90    	mov.w     [w14+22], w1
    25c6:	d5 f6 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    25c8:	00 00 e0    	cp0.w     w0
    25ca:	01 00 35    	bra       LT, 0x25ce <.L12>
    25cc:	00 44 eb    	clr.b     w8

000025ce <.L12>:
    25ce:	08 04 e0    	cp0.b     w8
    25d0:	04 00 32    	bra       Z, 0x25da <.L13>
    25d2:	00 40 22    	mov.w     #0x2400, w0
    25d4:	41 6f 24    	mov.w     #0x46f4, w1
    25d6:	20 0f 98    	mov.w     w0, [w14+20]
    25d8:	31 0f 98    	mov.w     w1, [w14+22]

000025da <.L13>:
    25da:	18 c0 b3    	mov.b     #0x1, w8
    25dc:	02 40 22    	mov.w     #0x2400, w2
    25de:	43 7f 24    	mov.w     #0x47f4, w3
    25e0:	2e 08 90    	mov.w     [w14+20], w0
    25e2:	be 08 90    	mov.w     [w14+22], w1
    25e4:	c6 f6 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    25e6:	00 00 e0    	cp0.w     w0
    25e8:	01 00 34    	bra       LE, 0x25ec <.L14>
    25ea:	00 44 eb    	clr.b     w8

000025ec <.L14>:
    25ec:	08 04 e0    	cp0.b     w8
    25ee:	0a 00 32    	bra       Z, 0x2604 <.L15>
    25f0:	02 00 20    	mov.w     #0x0, w2
    25f2:	03 28 24    	mov.w     #0x4280, w3
    25f4:	2e 08 90    	mov.w     [w14+20], w0
    25f6:	be 08 90    	mov.w     [w14+22], w1
    25f8:	30 f7 07    	rcall     0x145a <___mulsf3>
    25fa:	20 0f 98    	mov.w     w0, [w14+20]
    25fc:	31 0f 98    	mov.w     w1, [w14+22]
    25fe:	00 00 eb    	clr.w     w0
    2600:	00 0f 78    	mov.w     w0, [w14]
    2602:	2c 00 37    	bra       0x265c <.L16>

00002604 <.L15>:
    2604:	18 c0 b3    	mov.b     #0x1, w8
    2606:	02 40 22    	mov.w     #0x2400, w2
    2608:	43 8f 24    	mov.w     #0x48f4, w3
    260a:	2e 08 90    	mov.w     [w14+20], w0
    260c:	be 08 90    	mov.w     [w14+22], w1
    260e:	b1 f6 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    2610:	00 00 e0    	cp0.w     w0
    2612:	01 00 34    	bra       LE, 0x2616 <.L17>
    2614:	00 44 eb    	clr.b     w8

00002616 <.L17>:
    2616:	08 04 e0    	cp0.b     w8
    2618:	0a 00 32    	bra       Z, 0x262e <.L18>
    261a:	02 00 20    	mov.w     #0x0, w2
    261c:	03 18 24    	mov.w     #0x4180, w3
    261e:	2e 08 90    	mov.w     [w14+20], w0
    2620:	be 08 90    	mov.w     [w14+22], w1
    2622:	1b f7 07    	rcall     0x145a <___mulsf3>
    2624:	20 0f 98    	mov.w     w0, [w14+20]
    2626:	31 0f 98    	mov.w     w1, [w14+22]
    2628:	10 00 20    	mov.w     #0x1, w0
    262a:	00 0f 78    	mov.w     w0, [w14]
    262c:	17 00 37    	bra       0x265c <.L16>

0000262e <.L18>:
    262e:	18 c0 b3    	mov.b     #0x1, w8
    2630:	02 40 22    	mov.w     #0x2400, w2
    2632:	43 9f 24    	mov.w     #0x49f4, w3
    2634:	2e 08 90    	mov.w     [w14+20], w0
    2636:	be 08 90    	mov.w     [w14+22], w1
    2638:	9c f6 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    263a:	00 00 e0    	cp0.w     w0
    263c:	01 00 34    	bra       LE, 0x2640 <.L19>
    263e:	00 44 eb    	clr.b     w8

00002640 <.L19>:
    2640:	08 04 e0    	cp0.b     w8
    2642:	0a 00 32    	bra       Z, 0x2658 <.L20>
    2644:	02 00 20    	mov.w     #0x0, w2
    2646:	03 08 24    	mov.w     #0x4080, w3
    2648:	2e 08 90    	mov.w     [w14+20], w0
    264a:	be 08 90    	mov.w     [w14+22], w1
    264c:	06 f7 07    	rcall     0x145a <___mulsf3>
    264e:	20 0f 98    	mov.w     w0, [w14+20]
    2650:	31 0f 98    	mov.w     w1, [w14+22]
    2652:	20 00 20    	mov.w     #0x2, w0
    2654:	00 0f 78    	mov.w     w0, [w14]
    2656:	02 00 37    	bra       0x265c <.L16>

00002658 <.L20>:
    2658:	30 00 20    	mov.w     #0x3, w0
    265a:	00 0f 78    	mov.w     w0, [w14]

0000265c <.L16>:
    265c:	2e 09 90    	mov.w     [w14+20], w2
    265e:	be 09 90    	mov.w     [w14+22], w3
    2660:	00 40 22    	mov.w     #0x2400, w0
    2662:	41 b7 24    	mov.w     #0x4b74, w1
    2664:	44 f6 07    	rcall     0x12ee <___divsf3>
    2666:	02 00 20    	mov.w     #0x0, w2
    2668:	03 f0 23    	mov.w     #0x3f00, w3
    266a:	e4 f5 07    	rcall     0x1234 <___addsf3>
    266c:	86 f6 07    	rcall     0x137a <___fixunssfsi>
    266e:	10 07 98    	mov.w     w0, [w14+2]
    2670:	1e 00 90    	mov.w     [w14+2], w0
    2672:	68 00 10    	subr.w    w0, #0x8, w0
    2674:	42 00 dd    	sl.w      w0, #0x2, w0
    2676:	10 07 98    	mov.w     w0, [w14+2]
    2678:	6e 00 90    	mov.w     [w14+12], w0
    267a:	90 00 90    	mov.w     [w0+2], w1
    267c:	0e 58 90    	mov.b     [w14+24], w0
    267e:	00 80 fb    	ze        w0, w0
    2680:	63 00 60    	and.w     w0, #0x3, w0
    2682:	00 00 40    	add.w     w0, w0, w0
    2684:	64 01 47    	add.w     w14, #0x4, w2
    2686:	00 00 41    	add.w     w2, w0, w0
    2688:	10 00 78    	mov.w     [w0], w0
    268a:	1e 01 70    	ior.w     w0, [w14], w2
    268c:	1e 00 90    	mov.w     [w14+2], w0
    268e:	02 00 70    	ior.w     w0, w2, w0
    2690:	00 50 a0    	bset.w    w0, #0x5
    2692:	80 08 78    	mov.w     w0, [w1]
    2694:	6e 00 90    	mov.w     [w14+12], w0
    2696:	20 00 90    	mov.w     [w0+4], w0
    2698:	80 00 eb    	clr.w     w1
    269a:	01 08 78    	mov.w     w1, [w0]
    269c:	6e 00 90    	mov.w     [w14+12], w0
    269e:	10 00 78    	mov.w     [w0], w0
    26a0:	01 00 28    	mov.w     #0x8000, w1
    26a2:	01 08 78    	mov.w     w1, [w0]
    26a4:	0b 00 37    	bra       0x26bc <.L3>

000026a6 <.L21>:
    26a6:	00 00 00    	nop       
    26a8:	09 00 37    	bra       0x26bc <.L3>

000026aa <.L22>:
    26aa:	00 00 00    	nop       
    26ac:	07 00 37    	bra       0x26bc <.L3>

000026ae <.L23>:
    26ae:	00 00 00    	nop       
    26b0:	05 00 37    	bra       0x26bc <.L3>

000026b2 <.L24>:
    26b2:	00 00 00    	nop       
    26b4:	03 00 37    	bra       0x26bc <.L3>

000026b6 <.L25>:
    26b6:	00 00 00    	nop       
    26b8:	01 00 37    	bra       0x26bc <.L3>

000026ba <.L26>:
    26ba:	00 00 00    	nop       

000026bc <.L3>:
    26bc:	4f 04 78    	mov.w     [--w15], w8
    26be:	00 80 fa    	ulnk      
    26c0:	00 00 06    	return    

000026c2 <_spi_close>:
    26c2:	02 00 fa    	lnk       #0x2
    26c4:	00 0f 78    	mov.w     w0, [w14]
    26c6:	1e 00 78    	mov.w     [w14], w0
    26c8:	10 00 78    	mov.w     [w0], w0
    26ca:	80 00 eb    	clr.w     w1
    26cc:	01 08 78    	mov.w     w1, [w0]
    26ce:	1e 00 78    	mov.w     [w14], w0
    26d0:	10 00 90    	mov.w     [w0+2], w0
    26d2:	80 00 eb    	clr.w     w1
    26d4:	01 08 78    	mov.w     w1, [w0]
    26d6:	1e 00 78    	mov.w     [w14], w0
    26d8:	20 00 90    	mov.w     [w0+4], w0
    26da:	80 00 eb    	clr.w     w1
    26dc:	01 08 78    	mov.w     w1, [w0]
    26de:	1e 00 78    	mov.w     [w14], w0
    26e0:	00 08 90    	mov.w     [w0+16], w0
    26e2:	00 00 e0    	cp0.w     w0
    26e4:	28 00 32    	bra       Z, 0x2736 <.L28>
    26e6:	11 3a 80    	mov.w     0x742, w1
    26e8:	f0 0b 20    	mov.w     #0xbf, w0
    26ea:	00 81 60    	and.w     w1, w0, w2
    26ec:	60 04 20    	mov.w     #0x46, w0
    26ee:	71 05 20    	mov.w     #0x57, w1
    26f0:	23 74 20    	mov.w     #0x742, w3
    26f2:	80 49 78    	mov.b     w0, [w3]
    26f4:	81 49 78    	mov.b     w1, [w3]
    26f6:	82 49 78    	mov.b     w2, [w3]
    26f8:	1e 00 78    	mov.w     [w14], w0
    26fa:	40 00 90    	mov.w     [w0+8], w0
    26fc:	9e 00 78    	mov.w     [w14], w1
    26fe:	c1 00 90    	mov.w     [w1+8], w1
    2700:	11 01 78    	mov.w     [w1], w2
    2702:	9e 00 78    	mov.w     [w14], w1
    2704:	a1 48 90    	mov.b     [w1+10], w1
    2706:	81 80 fb    	ze        w1, w1
    2708:	f3 03 20    	mov.w     #0x3f, w3
    270a:	81 18 dd    	sl.w      w3, w1, w1
    270c:	82 80 70    	ior.w     w1, w2, w1
    270e:	01 08 78    	mov.w     w1, [w0]
    2710:	10 3a 80    	mov.w     0x742, w0
    2712:	00 01 78    	mov.w     w0, w2
    2714:	02 60 a0    	bset.w    w2, #0x6
    2716:	60 04 20    	mov.w     #0x46, w0
    2718:	71 05 20    	mov.w     #0x57, w1
    271a:	23 74 20    	mov.w     #0x742, w3
    271c:	80 49 78    	mov.b     w0, [w3]
    271e:	81 49 78    	mov.b     w1, [w3]
    2720:	82 49 78    	mov.b     w2, [w3]
    2722:	1e 00 78    	mov.w     [w14], w0
    2724:	00 08 90    	mov.w     [w0+16], w0
    2726:	80 00 eb    	clr.w     w1
    2728:	01 08 98    	mov.w     w1, [w0+16]
    272a:	1e 00 78    	mov.w     [w14], w0
    272c:	00 08 90    	mov.w     [w0+16], w0
    272e:	01 02 07    	rcall     0x2b32 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2730:	1e 00 78    	mov.w     [w14], w0
    2732:	80 00 eb    	clr.w     w1
    2734:	01 08 98    	mov.w     w1, [w0+16]

00002736 <.L28>:
    2736:	1e 00 78    	mov.w     [w14], w0
    2738:	10 08 90    	mov.w     [w0+18], w0
    273a:	00 00 e0    	cp0.w     w0
    273c:	2f 00 32    	bra       Z, 0x279c <.L29>
    273e:	11 3a 80    	mov.w     0x742, w1
    2740:	f0 0b 20    	mov.w     #0xbf, w0
    2742:	00 81 60    	and.w     w1, w0, w2
    2744:	60 04 20    	mov.w     #0x46, w0
    2746:	71 05 20    	mov.w     #0x57, w1
    2748:	23 74 20    	mov.w     #0x742, w3
    274a:	80 49 78    	mov.b     w0, [w3]
    274c:	81 49 78    	mov.b     w1, [w3]
    274e:	82 49 78    	mov.b     w2, [w3]
    2750:	1e 00 78    	mov.w     [w14], w0
    2752:	10 08 90    	mov.w     [w0+18], w0
    2754:	70 00 90    	mov.w     [w0+14], w0
    2756:	9e 00 78    	mov.w     [w14], w1
    2758:	91 08 90    	mov.w     [w1+18], w1
    275a:	f1 00 90    	mov.w     [w1+14], w1
    275c:	11 01 78    	mov.w     [w1], w2
    275e:	9e 00 78    	mov.w     [w14], w1
    2760:	91 08 90    	mov.w     [w1+18], w1
    2762:	a1 48 90    	mov.b     [w1+10], w1
    2764:	81 80 fb    	ze        w1, w1
    2766:	f3 03 20    	mov.w     #0x3f, w3
    2768:	81 18 dd    	sl.w      w3, w1, w1
    276a:	81 80 ea    	com.w     w1, w1
    276c:	81 00 61    	and.w     w2, w1, w1
    276e:	01 08 78    	mov.w     w1, [w0]
    2770:	10 3a 80    	mov.w     0x742, w0
    2772:	00 01 78    	mov.w     w0, w2
    2774:	02 60 a0    	bset.w    w2, #0x6
    2776:	60 04 20    	mov.w     #0x46, w0
    2778:	71 05 20    	mov.w     #0x57, w1
    277a:	23 74 20    	mov.w     #0x742, w3
    277c:	80 49 78    	mov.b     w0, [w3]
    277e:	81 49 78    	mov.b     w1, [w3]
    2780:	82 49 78    	mov.b     w2, [w3]
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	10 08 90    	mov.w     [w0+18], w0
    2786:	80 00 eb    	clr.w     w1
    2788:	01 08 98    	mov.w     w1, [w0+16]
    278a:	1e 00 78    	mov.w     [w14], w0
    278c:	10 08 90    	mov.w     [w0+18], w0
    278e:	f8 01 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    2790:	1e 00 78    	mov.w     [w14], w0
    2792:	10 08 90    	mov.w     [w0+18], w0
    2794:	52 02 07    	rcall     0x2c3a <_pin_set> <L0> <.LFB8> <.LFE7>
    2796:	1e 00 78    	mov.w     [w14], w0
    2798:	80 00 eb    	clr.w     w1
    279a:	11 08 98    	mov.w     w1, [w0+18]

0000279c <.L29>:
    279c:	1e 00 78    	mov.w     [w14], w0
    279e:	20 08 90    	mov.w     [w0+20], w0
    27a0:	00 00 e0    	cp0.w     w0
    27a2:	2f 00 32    	bra       Z, 0x2802 <.L27>
    27a4:	11 3a 80    	mov.w     0x742, w1
    27a6:	f0 0b 20    	mov.w     #0xbf, w0
    27a8:	00 81 60    	and.w     w1, w0, w2
    27aa:	60 04 20    	mov.w     #0x46, w0
    27ac:	71 05 20    	mov.w     #0x57, w1
    27ae:	23 74 20    	mov.w     #0x742, w3
    27b0:	80 49 78    	mov.b     w0, [w3]
    27b2:	81 49 78    	mov.b     w1, [w3]
    27b4:	82 49 78    	mov.b     w2, [w3]
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	20 08 90    	mov.w     [w0+20], w0
    27ba:	70 00 90    	mov.w     [w0+14], w0
    27bc:	9e 00 78    	mov.w     [w14], w1
    27be:	a1 08 90    	mov.w     [w1+20], w1
    27c0:	f1 00 90    	mov.w     [w1+14], w1
    27c2:	11 01 78    	mov.w     [w1], w2
    27c4:	9e 00 78    	mov.w     [w14], w1
    27c6:	a1 08 90    	mov.w     [w1+20], w1
    27c8:	a1 48 90    	mov.b     [w1+10], w1
    27ca:	81 80 fb    	ze        w1, w1
    27cc:	f3 03 20    	mov.w     #0x3f, w3
    27ce:	81 18 dd    	sl.w      w3, w1, w1
    27d0:	81 80 ea    	com.w     w1, w1
    27d2:	81 00 61    	and.w     w2, w1, w1
    27d4:	01 08 78    	mov.w     w1, [w0]
    27d6:	10 3a 80    	mov.w     0x742, w0
    27d8:	00 01 78    	mov.w     w0, w2
    27da:	02 60 a0    	bset.w    w2, #0x6
    27dc:	60 04 20    	mov.w     #0x46, w0
    27de:	71 05 20    	mov.w     #0x57, w1
    27e0:	23 74 20    	mov.w     #0x742, w3
    27e2:	80 49 78    	mov.b     w0, [w3]
    27e4:	81 49 78    	mov.b     w1, [w3]
    27e6:	82 49 78    	mov.b     w2, [w3]
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	20 08 90    	mov.w     [w0+20], w0
    27ec:	80 00 eb    	clr.w     w1
    27ee:	01 08 98    	mov.w     w1, [w0+16]
    27f0:	1e 00 78    	mov.w     [w14], w0
    27f2:	20 08 90    	mov.w     [w0+20], w0
    27f4:	c5 01 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	20 08 90    	mov.w     [w0+20], w0
    27fa:	34 02 07    	rcall     0x2c64 <_pin_clear> <L0> <.LFB9> <.LFE8>
    27fc:	1e 00 78    	mov.w     [w14], w0
    27fe:	80 00 eb    	clr.w     w1
    2800:	21 08 98    	mov.w     w1, [w0+20]

00002802 <.L27>:
    2802:	00 80 fa    	ulnk      
    2804:	00 00 06    	return    

00002806 <_spi_transfer>:
    2806:	04 00 fa    	lnk       #0x4
    2808:	00 0f 78    	mov.w     w0, [w14]
    280a:	21 47 98    	mov.b     w1, [w14+2]
    280c:	1e 00 78    	mov.w     [w14], w0
    280e:	30 00 90    	mov.w     [w0+6], w0
    2810:	ae 40 90    	mov.b     [w14+2], w1
    2812:	81 80 fb    	ze        w1, w1
    2814:	01 08 78    	mov.w     w1, [w0]
    2816:	00 00 00    	nop       

00002818 <.L32>:
    2818:	1e 00 78    	mov.w     [w14], w0
    281a:	10 00 78    	mov.w     [w0], w0
    281c:	10 00 78    	mov.w     [w0], w0
    281e:	61 00 60    	and.w     w0, #0x1, w0
    2820:	00 00 e0    	cp0.w     w0
    2822:	fa ff 32    	bra       Z, 0x2818 <.L32>
    2824:	1e 00 78    	mov.w     [w14], w0
    2826:	30 00 90    	mov.w     [w0+6], w0
    2828:	10 00 78    	mov.w     [w0], w0
    282a:	00 40 78    	mov.b     w0, w0
    282c:	00 80 fa    	ulnk      
    282e:	00 00 06    	return    

00002830 <___digitalWrite>:
    2830:	04 00 fa    	lnk       #0x4
    2832:	00 0f 78    	mov.w     w0, [w14]
    2834:	11 07 98    	mov.w     w1, [w14+2]
    2836:	1e 00 90    	mov.w     [w14+2], w0
    2838:	00 00 e0    	cp0.w     w0
    283a:	0d 00 32    	bra       Z, 0x2856 <.L2>
    283c:	1e 00 78    	mov.w     [w14], w0
    283e:	10 00 78    	mov.w     [w0], w0
    2840:	9e 00 78    	mov.w     [w14], w1
    2842:	91 00 78    	mov.w     [w1], w1
    2844:	11 01 78    	mov.w     [w1], w2
    2846:	9e 00 78    	mov.w     [w14], w1
    2848:	e1 40 90    	mov.b     [w1+6], w1
    284a:	81 80 fb    	ze        w1, w1
    284c:	13 00 20    	mov.w     #0x1, w3
    284e:	81 18 dd    	sl.w      w3, w1, w1
    2850:	82 80 70    	ior.w     w1, w2, w1
    2852:	01 08 78    	mov.w     w1, [w0]
    2854:	0d 00 37    	bra       0x2870 <.L1>

00002856 <.L2>:
    2856:	1e 00 78    	mov.w     [w14], w0
    2858:	10 00 78    	mov.w     [w0], w0
    285a:	9e 00 78    	mov.w     [w14], w1
    285c:	91 00 78    	mov.w     [w1], w1
    285e:	11 01 78    	mov.w     [w1], w2
    2860:	9e 00 78    	mov.w     [w14], w1
    2862:	e1 40 90    	mov.b     [w1+6], w1
    2864:	81 80 fb    	ze        w1, w1
    2866:	13 00 20    	mov.w     #0x1, w3
    2868:	81 18 dd    	sl.w      w3, w1, w1
    286a:	81 80 ea    	com.w     w1, w1
    286c:	81 00 61    	and.w     w2, w1, w1
    286e:	01 08 78    	mov.w     w1, [w0]

00002870 <.L1>:
    2870:	00 80 fa    	ulnk      
    2872:	00 00 06    	return    

00002874 <___digitalRead>:
    2874:	02 00 fa    	lnk       #0x2
    else
        bitclear(self->port, self->bit);
}

uint16_t __digitalRead(_PIN *self) {
    2876:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2878:	1e 00 78    	mov.w     [w14], w0
    287a:	10 00 78    	mov.w     [w0], w0
    287c:	90 00 78    	mov.w     [w0], w1
    287e:	1e 00 78    	mov.w     [w14], w0
    2880:	60 40 90    	mov.b     [w0+6], w0
    2882:	00 80 fb    	ze        w0, w0
    2884:	12 00 20    	mov.w     #0x1, w2
    2886:	00 10 dd    	sl.w      w2, w0, w0
    2888:	00 80 60    	and.w     w1, w0, w0
    288a:	00 f0 a7    	btsc.w    w0, #0xf
    288c:	00 00 ea    	neg.w     w0, w0
    288e:	00 00 ea    	neg.w     w0, w0
    2890:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2892:	00 80 fa    	ulnk      
    2894:	00 00 06    	return    

00002896 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2896:	02 00 fa    	lnk       #0x2
    2898:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = self->annum;
    289a:	1e 00 78    	mov.w     [w14], w0
    289c:	40 00 90    	mov.w     [w0+8], w0
    289e:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.SAMP = 1;
    28a0:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE==0) {}
    28a2:	00 00 00    	nop       

000028a4 <.L6>:
    28a4:	00 19 80    	mov.w     0x320, w0
    28a6:	61 00 60    	and.w     w0, #0x1, w0
    28a8:	00 00 e0    	cp0.w     w0
    28aa:	fc ff 32    	bra       Z, 0x28a4 <.L6>
    return ADC1BUF0;
    28ac:	00 18 80    	mov.w     0x300, w0
}
    28ae:	00 80 fa    	ulnk      
    28b0:	00 00 06    	return    

000028b2 <_init_pin>:

void init_pin(void) {
    28b2:	02 00 fa    	lnk       #0x2
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28b4:	40 6d 20    	mov.w     #0x6d4, w0
    28b6:	80 1f 78    	mov.w     w0, [w15++]
    28b8:	47 01 20    	mov.w     #0x14, w7
    28ba:	00 43 eb    	clr.b     w6
    28bc:	80 82 eb    	setm.w    w5
    28be:	54 c0 b3    	mov.b     #0x5, w4
    28c0:	80 01 eb    	clr.w     w3
    28c2:	82 2d 20    	mov.w     #0x2d8, w2
    28c4:	a1 2d 20    	mov.w     #0x2da, w1
    28c6:	c0 84 20    	mov.w     #0x84c, w0
    28c8:	08 01 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    28ca:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28cc:	80 6d 20    	mov.w     #0x6d8, w0
    28ce:	80 1f 78    	mov.w     w0, [w15++]
    28d0:	97 01 20    	mov.w     #0x19, w7
    28d2:	86 c0 b3    	mov.b     #0x8, w6
    28d4:	80 82 eb    	setm.w    w5
    28d6:	44 c0 b3    	mov.b     #0x4, w4
    28d8:	80 01 eb    	clr.w     w3
    28da:	82 2d 20    	mov.w     #0x2d8, w2
    28dc:	a1 2d 20    	mov.w     #0x2da, w1
    28de:	20 86 20    	mov.w     #0x862, w0
    28e0:	fc 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    28e2:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    28e4:	a0 6c 20    	mov.w     #0x6ca, w0
    28e6:	80 1f 78    	mov.w     w0, [w15++]
    28e8:	a7 00 20    	mov.w     #0xa, w7
    28ea:	00 43 eb    	clr.b     w6
    28ec:	80 82 eb    	setm.w    w5
    28ee:	44 c0 b3    	mov.b     #0x4, w4
    28f0:	80 01 eb    	clr.w     w3
    28f2:	82 2e 20    	mov.w     #0x2e8, w2
    28f4:	a1 2e 20    	mov.w     #0x2ea, w1
    28f6:	80 87 20    	mov.w     #0x878, w0
    28f8:	f0 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    28fa:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    28fc:	00 6d 20    	mov.w     #0x6d0, w0
    28fe:	80 1f 78    	mov.w     w0, [w15++]
    2900:	17 01 20    	mov.w     #0x11, w7
    2902:	86 c0 b3    	mov.b     #0x8, w6
    2904:	80 82 eb    	setm.w    w5
    2906:	54 c0 b3    	mov.b     #0x5, w4
    2908:	80 01 eb    	clr.w     w3
    290a:	82 2e 20    	mov.w     #0x2e8, w2
    290c:	a1 2e 20    	mov.w     #0x2ea, w1
    290e:	e0 88 20    	mov.w     #0x88e, w0
    2910:	e4 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2912:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2914:	c0 6d 20    	mov.w     #0x6dc, w0
    2916:	80 1f 78    	mov.w     w0, [w15++]
    2918:	d7 01 20    	mov.w     #0x1d, w7
    291a:	86 c0 b3    	mov.b     #0x8, w6
    291c:	f5 00 20    	mov.w     #0xf, w5
    291e:	f4 c0 b3    	mov.b     #0xf, w4
    2920:	23 4e 20    	mov.w     #0x4e2, w3
    2922:	82 2c 20    	mov.w     #0x2c8, w2
    2924:	a1 2c 20    	mov.w     #0x2ca, w1
    2926:	40 8a 20    	mov.w     #0x8a4, w0
    2928:	d8 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    292a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    292c:	00 6d 20    	mov.w     #0x6d0, w0
    292e:	80 1f 78    	mov.w     w0, [w15++]
    2930:	07 01 20    	mov.w     #0x10, w7
    2932:	00 43 eb    	clr.b     w6
    2934:	80 82 eb    	setm.w    w5
    2936:	34 c0 b3    	mov.b     #0x3, w4
    2938:	80 01 eb    	clr.w     w3
    293a:	82 2e 20    	mov.w     #0x2e8, w2
    293c:	a1 2e 20    	mov.w     #0x2ea, w1
    293e:	a0 8b 20    	mov.w     #0x8ba, w0
    2940:	cc 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2942:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2944:	20 6c 20    	mov.w     #0x6c2, w0
    2946:	80 1f 78    	mov.w     w0, [w15++]
    2948:	27 00 20    	mov.w     #0x2, w7
    294a:	00 43 eb    	clr.b     w6
    294c:	80 82 eb    	setm.w    w5
    294e:	84 c0 b3    	mov.b     #0x8, w4
    2950:	80 01 eb    	clr.w     w3
    2952:	82 2d 20    	mov.w     #0x2d8, w2
    2954:	a1 2d 20    	mov.w     #0x2da, w1
    2956:	00 8d 20    	mov.w     #0x8d0, w0
    2958:	c0 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    295a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    295c:	c0 6c 20    	mov.w     #0x6cc, w0
    295e:	80 1f 78    	mov.w     w0, [w15++]
    2960:	c7 00 20    	mov.w     #0xc, w7
    2962:	00 43 eb    	clr.b     w6
    2964:	80 82 eb    	setm.w    w5
    2966:	b4 c0 b3    	mov.b     #0xb, w4
    2968:	80 01 eb    	clr.w     w3
    296a:	82 2d 20    	mov.w     #0x2d8, w2
    296c:	a1 2d 20    	mov.w     #0x2da, w1
    296e:	60 8e 20    	mov.w     #0x8e6, w0
    2970:	b4 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2972:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2974:	40 6c 20    	mov.w     #0x6c4, w0
    2976:	80 1f 78    	mov.w     w0, [w15++]
    2978:	47 00 20    	mov.w     #0x4, w7
    297a:	00 43 eb    	clr.b     w6
    297c:	80 82 eb    	setm.w    w5
    297e:	94 c0 b3    	mov.b     #0x9, w4
    2980:	80 01 eb    	clr.w     w3
    2982:	82 2d 20    	mov.w     #0x2d8, w2
    2984:	a1 2d 20    	mov.w     #0x2da, w1
    2986:	c0 8f 20    	mov.w     #0x8fc, w0
    2988:	a8 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    298a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    298c:	20 6c 20    	mov.w     #0x6c2, w0
    298e:	80 1f 78    	mov.w     w0, [w15++]
    2990:	37 00 20    	mov.w     #0x3, w7
    2992:	86 c0 b3    	mov.b     #0x8, w6
    2994:	80 82 eb    	setm.w    w5
    2996:	a4 c0 b3    	mov.b     #0xa, w4
    2998:	80 01 eb    	clr.w     w3
    299a:	82 2d 20    	mov.w     #0x2d8, w2
    299c:	a1 2d 20    	mov.w     #0x2da, w1
    299e:	20 91 20    	mov.w     #0x912, w0
    29a0:	9c 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    29a2:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29a4:	a0 6c 20    	mov.w     #0x6ca, w0
    29a6:	80 1f 78    	mov.w     w0, [w15++]
    29a8:	b7 00 20    	mov.w     #0xb, w7
    29aa:	86 c0 b3    	mov.b     #0x8, w6
    29ac:	80 82 eb    	setm.w    w5
    29ae:	00 42 eb    	clr.b     w4
    29b0:	80 01 eb    	clr.w     w3
    29b2:	82 2d 20    	mov.w     #0x2d8, w2
    29b4:	a1 2d 20    	mov.w     #0x2da, w1
    29b6:	80 92 20    	mov.w     #0x928, w0
    29b8:	90 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    29ba:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29bc:	80 6d 20    	mov.w     #0x6d8, w0
    29be:	80 1f 78    	mov.w     w0, [w15++]
    29c0:	87 01 20    	mov.w     #0x18, w7
    29c2:	00 43 eb    	clr.b     w6
    29c4:	80 82 eb    	setm.w    w5
    29c6:	14 c0 b3    	mov.b     #0x1, w4
    29c8:	80 01 eb    	clr.w     w3
    29ca:	82 2d 20    	mov.w     #0x2d8, w2
    29cc:	a1 2d 20    	mov.w     #0x2da, w1
    29ce:	e0 93 20    	mov.w     #0x93e, w0
    29d0:	84 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    29d2:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29d4:	60 6d 20    	mov.w     #0x6d6, w0
    29d6:	80 1f 78    	mov.w     w0, [w15++]
    29d8:	77 01 20    	mov.w     #0x17, w7
    29da:	86 c0 b3    	mov.b     #0x8, w6
    29dc:	80 82 eb    	setm.w    w5
    29de:	24 c0 b3    	mov.b     #0x2, w4
    29e0:	80 01 eb    	clr.w     w3
    29e2:	82 2d 20    	mov.w     #0x2d8, w2
    29e4:	a1 2d 20    	mov.w     #0x2da, w1
    29e6:	40 95 20    	mov.w     #0x954, w0
    29e8:	78 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    29ea:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29ec:	60 6d 20    	mov.w     #0x6d6, w0
    29ee:	80 1f 78    	mov.w     w0, [w15++]
    29f0:	67 01 20    	mov.w     #0x16, w7
    29f2:	00 43 eb    	clr.b     w6
    29f4:	80 82 eb    	setm.w    w5
    29f6:	34 c0 b3    	mov.b     #0x3, w4
    29f8:	80 01 eb    	clr.w     w3
    29fa:	82 2d 20    	mov.w     #0x2d8, w2
    29fc:	a1 2d 20    	mov.w     #0x2da, w1
    29fe:	a0 96 20    	mov.w     #0x96a, w0
    2a00:	6c 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a02:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a04:	00 6c 20    	mov.w     #0x6c0, w0
    2a06:	80 1f 78    	mov.w     w0, [w15++]
    2a08:	80 03 eb    	clr.w     w7
    2a0a:	00 43 eb    	clr.b     w6
    2a0c:	80 02 eb    	clr.w     w5
    2a0e:	00 42 eb    	clr.b     w4
    2a10:	23 4e 20    	mov.w     #0x4e2, w3
    2a12:	82 2c 20    	mov.w     #0x2c8, w2
    2a14:	a1 2c 20    	mov.w     #0x2ca, w1
    2a16:	e0 9e 20    	mov.w     #0x9ee, w0
    2a18:	60 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a1a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a1c:	00 6c 20    	mov.w     #0x6c0, w0
    2a1e:	80 1f 78    	mov.w     w0, [w15++]
    2a20:	17 00 20    	mov.w     #0x1, w7
    2a22:	86 c0 b3    	mov.b     #0x8, w6
    2a24:	15 00 20    	mov.w     #0x1, w5
    2a26:	14 c0 b3    	mov.b     #0x1, w4
    2a28:	23 4e 20    	mov.w     #0x4e2, w3
    2a2a:	82 2c 20    	mov.w     #0x2c8, w2
    2a2c:	a1 2c 20    	mov.w     #0x2ca, w1
    2a2e:	80 9d 20    	mov.w     #0x9d8, w0
    2a30:	54 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a32:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a34:	c0 6c 20    	mov.w     #0x6cc, w0
    2a36:	80 1f 78    	mov.w     w0, [w15++]
    2a38:	d7 00 20    	mov.w     #0xd, w7
    2a3a:	86 c0 b3    	mov.b     #0x8, w6
    2a3c:	25 00 20    	mov.w     #0x2, w5
    2a3e:	24 c0 b3    	mov.b     #0x2, w4
    2a40:	23 4e 20    	mov.w     #0x4e2, w3
    2a42:	82 2c 20    	mov.w     #0x2c8, w2
    2a44:	a1 2c 20    	mov.w     #0x2ca, w1
    2a46:	20 9c 20    	mov.w     #0x9c2, w0
    2a48:	48 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a4a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a4c:	00 00 eb    	clr.w     w0
    2a4e:	80 1f 78    	mov.w     w0, [w15++]
    2a50:	80 83 eb    	setm.w    w7
    2a52:	00 43 eb    	clr.b     w6
    2a54:	35 00 20    	mov.w     #0x3, w5
    2a56:	34 c0 b3    	mov.b     #0x3, w4
    2a58:	23 4e 20    	mov.w     #0x4e2, w3
    2a5a:	82 2c 20    	mov.w     #0x2c8, w2
    2a5c:	a1 2c 20    	mov.w     #0x2ca, w1
    2a5e:	c0 9a 20    	mov.w     #0x9ac, w0
    2a60:	3c 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a62:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a64:	c0 6d 20    	mov.w     #0x6dc, w0
    2a66:	80 1f 78    	mov.w     w0, [w15++]
    2a68:	c7 01 20    	mov.w     #0x1c, w7
    2a6a:	00 43 eb    	clr.b     w6
    2a6c:	45 00 20    	mov.w     #0x4, w5
    2a6e:	44 c0 b3    	mov.b     #0x4, w4
    2a70:	23 4e 20    	mov.w     #0x4e2, w3
    2a72:	82 2c 20    	mov.w     #0x2c8, w2
    2a74:	a1 2c 20    	mov.w     #0x2ca, w1
    2a76:	60 99 20    	mov.w     #0x996, w0
    2a78:	30 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a7a:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a7c:	20 6d 20    	mov.w     #0x6d2, w0
    2a7e:	80 1f 78    	mov.w     w0, [w15++]
    2a80:	27 01 20    	mov.w     #0x12, w7
    2a82:	00 43 eb    	clr.b     w6
    2a84:	55 00 20    	mov.w     #0x5, w5
    2a86:	54 c0 b3    	mov.b     #0x5, w4
    2a88:	23 4e 20    	mov.w     #0x4e2, w3
    2a8a:	82 2c 20    	mov.w     #0x2c8, w2
    2a8c:	a1 2c 20    	mov.w     #0x2ca, w1
    2a8e:	00 98 20    	mov.w     #0x980, w0
    2a90:	24 00 07    	rcall     0x2ada <_pin_init> <L0> <.LFB4> <.LFE3>
    2a92:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2a94:	00 00 eb    	clr.w     w0
    2a96:	00 0f 78    	mov.w     w0, [w14]
    2a98:	07 00 37    	bra       0x2aa8 <.L8>

00002a9a <.L9>:
        pin_digitalIn(&D[i]);
    2a9a:	1e 00 78    	mov.w     [w14], w0
    2a9c:	76 00 b9    	mul.su    w0, #0x16, w0
    2a9e:	80 00 78    	mov.w     w0, w1
    2aa0:	c0 84 20    	mov.w     #0x84c, w0
    2aa2:	00 80 40    	add.w     w1, w0, w0
    2aa4:	46 00 07    	rcall     0x2b32 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2aa6:	1e 0f e8    	inc.w     [w14], [w14]

00002aa8 <.L8>:
    2aa8:	1e 00 78    	mov.w     [w14], w0
    2aaa:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2aac:	f6 ff 36    	bra       LEU, 0x2a9a <.L9>
    for (i = 0; i<6; i++)
    2aae:	00 00 eb    	clr.w     w0
    2ab0:	00 0f 78    	mov.w     w0, [w14]
    2ab2:	07 00 37    	bra       0x2ac2 <.L10>

00002ab4 <.L11>:
        pin_analogIn(&A[i]);
    2ab4:	1e 00 78    	mov.w     [w14], w0
    2ab6:	76 00 b9    	mul.su    w0, #0x16, w0
    2ab8:	80 00 78    	mov.w     w0, w1
    2aba:	00 98 20    	mov.w     #0x980, w0
    2abc:	00 80 40    	add.w     w1, w0, w0
    2abe:	95 00 07    	rcall     0x2bea <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    2ac0:	1e 0f e8    	inc.w     [w14], [w14]

00002ac2 <.L10>:
    2ac2:	1e 00 78    	mov.w     [w14], w0
    2ac4:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2ac6:	f6 ff 36    	bra       LEU, 0x2ab4 <.L11>

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2ac8:	00 2e 20    	mov.w     #0x2e0, w0
    2aca:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    2acc:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2ace:	00 c4 20    	mov.w     #0xc40, w0
    2ad0:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = 0;
    2ad2:	28 23 ef    	clr.w     0x328
    AD1CON1bits.ADON = 1;
    2ad4:	21 e3 a8    	bset.b    0x321, #0x7
}
    2ad6:	00 80 fa    	ulnk      
    2ad8:	00 00 06    	return    

00002ada <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2ada:	10 00 fa    	lnk       #0x10
    2adc:	00 0f 78    	mov.w     w0, [w14]
    2ade:	11 07 98    	mov.w     w1, [w14+2]
    2ae0:	22 07 98    	mov.w     w2, [w14+4]
    2ae2:	33 07 98    	mov.w     w3, [w14+6]
    2ae4:	04 4f 98    	mov.b     w4, [w14+8]
    2ae6:	55 07 98    	mov.w     w5, [w14+10]
    2ae8:	46 4f 98    	mov.b     w6, [w14+12]
    2aea:	77 07 98    	mov.w     w7, [w14+14]
    self->port = port;
    2aec:	1e 00 78    	mov.w     [w14], w0
    2aee:	9e 00 90    	mov.w     [w14+2], w1
    2af0:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2af2:	1e 00 78    	mov.w     [w14], w0
    2af4:	ae 00 90    	mov.w     [w14+4], w1
    2af6:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2af8:	1e 00 78    	mov.w     [w14], w0
    2afa:	be 00 90    	mov.w     [w14+6], w1
    2afc:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	8e 48 90    	mov.b     [w14+8], w1
    2b02:	61 40 98    	mov.b     w1, [w0+6]
    self->annum = annum;
    2b04:	1e 00 78    	mov.w     [w14], w0
    2b06:	de 00 90    	mov.w     [w14+10], w1
    2b08:	41 00 98    	mov.w     w1, [w0+8]
    self->rpshift = rpshift;
    2b0a:	1e 00 78    	mov.w     [w14], w0
    2b0c:	ce 48 90    	mov.b     [w14+12], w1
    2b0e:	21 48 98    	mov.b     w1, [w0+10]
    self->rpnum = rpnum;
    2b10:	fe 00 90    	mov.w     [w14+14], w1
    2b12:	1e 00 78    	mov.w     [w14], w0
    2b14:	61 00 98    	mov.w     w1, [w0+12]
    self->rpor = rpor;
    2b16:	1e 00 78    	mov.w     [w14], w0
    2b18:	ce b8 97    	mov.w     [w14-8], w1
    2b1a:	71 00 98    	mov.w     w1, [w0+14]
    self->owner = NULL;
    2b1c:	1e 00 78    	mov.w     [w14], w0
    2b1e:	80 00 eb    	clr.w     w1
    2b20:	01 08 98    	mov.w     w1, [w0+16]
    self->write = NULL;
    2b22:	1e 00 78    	mov.w     [w14], w0
    2b24:	80 00 eb    	clr.w     w1
    2b26:	11 08 98    	mov.w     w1, [w0+18]
    self->read = NULL;
    2b28:	1e 00 78    	mov.w     [w14], w0
    2b2a:	80 00 eb    	clr.w     w1
    2b2c:	21 08 98    	mov.w     w1, [w0+20]
}
    2b2e:	00 80 fa    	ulnk      
    2b30:	00 00 06    	return    

00002b32 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2b32:	02 00 fa    	lnk       #0x2
    2b34:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    2b36:	1e 00 78    	mov.w     [w14], w0
    2b38:	20 00 90    	mov.w     [w0+4], w0
    2b3a:	00 00 e0    	cp0.w     w0
    2b3c:	0d 00 32    	bra       Z, 0x2b58 <.L14>
        bitclear(self->ans, self->bit);
    2b3e:	1e 00 78    	mov.w     [w14], w0
    2b40:	20 00 90    	mov.w     [w0+4], w0
    2b42:	9e 00 78    	mov.w     [w14], w1
    2b44:	a1 00 90    	mov.w     [w1+4], w1
    2b46:	11 01 78    	mov.w     [w1], w2
    2b48:	9e 00 78    	mov.w     [w14], w1
    2b4a:	e1 40 90    	mov.b     [w1+6], w1
    2b4c:	81 80 fb    	ze        w1, w1
    2b4e:	13 00 20    	mov.w     #0x1, w3
    2b50:	81 18 dd    	sl.w      w3, w1, w1
    2b52:	81 80 ea    	com.w     w1, w1
    2b54:	81 00 61    	and.w     w2, w1, w1
    2b56:	01 08 78    	mov.w     w1, [w0]

00002b58 <.L14>:
    bitset(self->tris, self->bit);
    2b58:	1e 00 78    	mov.w     [w14], w0
    2b5a:	10 00 90    	mov.w     [w0+2], w0
    2b5c:	9e 00 78    	mov.w     [w14], w1
    2b5e:	91 00 90    	mov.w     [w1+2], w1
    2b60:	11 01 78    	mov.w     [w1], w2
    2b62:	9e 00 78    	mov.w     [w14], w1
    2b64:	e1 40 90    	mov.b     [w1+6], w1
    2b66:	81 80 fb    	ze        w1, w1
    2b68:	13 00 20    	mov.w     #0x1, w3
    2b6a:	81 18 dd    	sl.w      w3, w1, w1
    2b6c:	82 80 70    	ior.w     w1, w2, w1
    2b6e:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    2b70:	1e 00 78    	mov.w     [w14], w0
    2b72:	80 00 eb    	clr.w     w1
    2b74:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;    
    2b76:	1e 00 78    	mov.w     [w14], w0
    2b78:	41 87 22    	mov.w     #0x2874, w1
    2b7a:	21 08 98    	mov.w     w1, [w0+20]
}
    2b7c:	00 80 fa    	ulnk      
    2b7e:	00 00 06    	return    

00002b80 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    2b80:	02 00 fa    	lnk       #0x2
    2b82:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    2b84:	1e 00 78    	mov.w     [w14], w0
    2b86:	20 00 90    	mov.w     [w0+4], w0
    2b88:	00 00 e0    	cp0.w     w0
    2b8a:	0d 00 32    	bra       Z, 0x2ba6 <.L16>
        bitclear(self->ans, self->bit);
    2b8c:	1e 00 78    	mov.w     [w14], w0
    2b8e:	20 00 90    	mov.w     [w0+4], w0
    2b90:	9e 00 78    	mov.w     [w14], w1
    2b92:	a1 00 90    	mov.w     [w1+4], w1
    2b94:	11 01 78    	mov.w     [w1], w2
    2b96:	9e 00 78    	mov.w     [w14], w1
    2b98:	e1 40 90    	mov.b     [w1+6], w1
    2b9a:	81 80 fb    	ze        w1, w1
    2b9c:	13 00 20    	mov.w     #0x1, w3
    2b9e:	81 18 dd    	sl.w      w3, w1, w1
    2ba0:	81 80 ea    	com.w     w1, w1
    2ba2:	81 00 61    	and.w     w2, w1, w1
    2ba4:	01 08 78    	mov.w     w1, [w0]

00002ba6 <.L16>:
    bitclear(self->port, self->bit);
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	10 00 78    	mov.w     [w0], w0
    2baa:	9e 00 78    	mov.w     [w14], w1
    2bac:	91 00 78    	mov.w     [w1], w1
    2bae:	11 01 78    	mov.w     [w1], w2
    2bb0:	9e 00 78    	mov.w     [w14], w1
    2bb2:	e1 40 90    	mov.b     [w1+6], w1
    2bb4:	81 80 fb    	ze        w1, w1
    2bb6:	13 00 20    	mov.w     #0x1, w3
    2bb8:	81 18 dd    	sl.w      w3, w1, w1
    2bba:	81 80 ea    	com.w     w1, w1
    2bbc:	81 00 61    	and.w     w2, w1, w1
    2bbe:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    2bc0:	1e 00 78    	mov.w     [w14], w0
    2bc2:	10 00 90    	mov.w     [w0+2], w0
    2bc4:	9e 00 78    	mov.w     [w14], w1
    2bc6:	91 00 90    	mov.w     [w1+2], w1
    2bc8:	11 01 78    	mov.w     [w1], w2
    2bca:	9e 00 78    	mov.w     [w14], w1
    2bcc:	e1 40 90    	mov.b     [w1+6], w1
    2bce:	81 80 fb    	ze        w1, w1
    2bd0:	13 00 20    	mov.w     #0x1, w3
    2bd2:	81 18 dd    	sl.w      w3, w1, w1
    2bd4:	81 80 ea    	com.w     w1, w1
    2bd6:	81 00 61    	and.w     w2, w1, w1
    2bd8:	01 08 78    	mov.w     w1, [w0]
    self->write = __digitalWrite;
    2bda:	1e 00 78    	mov.w     [w14], w0
    2bdc:	01 83 22    	mov.w     #0x2830, w1
    2bde:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;
    2be0:	1e 00 78    	mov.w     [w14], w0
    2be2:	41 87 22    	mov.w     #0x2874, w1
    2be4:	21 08 98    	mov.w     w1, [w0+20]
}
    2be6:	00 80 fa    	ulnk      
    2be8:	00 00 06    	return    

00002bea <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    2bea:	02 00 fa    	lnk       #0x2
    2bec:	00 0f 78    	mov.w     w0, [w14]
    if (!(self->ans))
    2bee:	1e 00 78    	mov.w     [w14], w0
    2bf0:	20 00 90    	mov.w     [w0+4], w0
    2bf2:	00 00 e0    	cp0.w     w0
    2bf4:	1f 00 32    	bra       Z, 0x2c34 <.L20>
        return;
    bitset(self->tris, self->bit);
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	10 00 90    	mov.w     [w0+2], w0
    2bfa:	9e 00 78    	mov.w     [w14], w1
    2bfc:	91 00 90    	mov.w     [w1+2], w1
    2bfe:	11 01 78    	mov.w     [w1], w2
    2c00:	9e 00 78    	mov.w     [w14], w1
    2c02:	e1 40 90    	mov.b     [w1+6], w1
    2c04:	81 80 fb    	ze        w1, w1
    2c06:	13 00 20    	mov.w     #0x1, w3
    2c08:	81 18 dd    	sl.w      w3, w1, w1
    2c0a:	82 80 70    	ior.w     w1, w2, w1
    2c0c:	01 08 78    	mov.w     w1, [w0]
    bitset(self->ans, self->bit);
    2c0e:	1e 00 78    	mov.w     [w14], w0
    2c10:	20 00 90    	mov.w     [w0+4], w0
    2c12:	9e 00 78    	mov.w     [w14], w1
    2c14:	a1 00 90    	mov.w     [w1+4], w1
    2c16:	11 01 78    	mov.w     [w1], w2
    2c18:	9e 00 78    	mov.w     [w14], w1
    2c1a:	e1 40 90    	mov.b     [w1+6], w1
    2c1c:	81 80 fb    	ze        w1, w1
    2c1e:	13 00 20    	mov.w     #0x1, w3
    2c20:	81 18 dd    	sl.w      w3, w1, w1
    2c22:	82 80 70    	ior.w     w1, w2, w1
    2c24:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    2c26:	1e 00 78    	mov.w     [w14], w0
    2c28:	80 00 eb    	clr.w     w1
    2c2a:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __analogRead;
    2c2c:	1e 00 78    	mov.w     [w14], w0
    2c2e:	61 89 22    	mov.w     #0x2896, w1
    2c30:	21 08 98    	mov.w     w1, [w0+20]
    2c32:	01 00 37    	bra       0x2c36 <.L17>

00002c34 <.L20>:
    2c34:	00 00 00    	nop       

00002c36 <.L17>:
}
    2c36:	00 80 fa    	ulnk      
    2c38:	00 00 06    	return    

00002c3a <_pin_set>:

void pin_set(_PIN *self) {
    2c3a:	02 00 fa    	lnk       #0x2
    2c3c:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    2c3e:	1e 00 78    	mov.w     [w14], w0
    2c40:	90 08 90    	mov.w     [w0+18], w1
    2c42:	00 83 22    	mov.w     #0x2830, w0
    2c44:	80 8f 50    	sub.w     w1, w0, [w15]
    2c46:	0c 00 3a    	bra       NZ, 0x2c60 <.L21>
        bitset(self->port, self->bit);
    2c48:	1e 00 78    	mov.w     [w14], w0
    2c4a:	10 00 78    	mov.w     [w0], w0
    2c4c:	9e 00 78    	mov.w     [w14], w1
    2c4e:	91 00 78    	mov.w     [w1], w1
    2c50:	11 01 78    	mov.w     [w1], w2
    2c52:	9e 00 78    	mov.w     [w14], w1
    2c54:	e1 40 90    	mov.b     [w1+6], w1
    2c56:	81 80 fb    	ze        w1, w1
    2c58:	13 00 20    	mov.w     #0x1, w3
    2c5a:	81 18 dd    	sl.w      w3, w1, w1
    2c5c:	82 80 70    	ior.w     w1, w2, w1
    2c5e:	01 08 78    	mov.w     w1, [w0]

00002c60 <.L21>:
}
    2c60:	00 80 fa    	ulnk      
    2c62:	00 00 06    	return    

00002c64 <_pin_clear>:

void pin_clear(_PIN *self) {
    2c64:	02 00 fa    	lnk       #0x2
    2c66:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    2c68:	1e 00 78    	mov.w     [w14], w0
    2c6a:	90 08 90    	mov.w     [w0+18], w1
    2c6c:	00 83 22    	mov.w     #0x2830, w0
    2c6e:	80 8f 50    	sub.w     w1, w0, [w15]
    2c70:	0d 00 3a    	bra       NZ, 0x2c8c <.L23>
        bitclear(self->port, self->bit);
    2c72:	1e 00 78    	mov.w     [w14], w0
    2c74:	10 00 78    	mov.w     [w0], w0
    2c76:	9e 00 78    	mov.w     [w14], w1
    2c78:	91 00 78    	mov.w     [w1], w1
    2c7a:	11 01 78    	mov.w     [w1], w2
    2c7c:	9e 00 78    	mov.w     [w14], w1
    2c7e:	e1 40 90    	mov.b     [w1+6], w1
    2c80:	81 80 fb    	ze        w1, w1
    2c82:	13 00 20    	mov.w     #0x1, w3
    2c84:	81 18 dd    	sl.w      w3, w1, w1
    2c86:	81 80 ea    	com.w     w1, w1
    2c88:	81 00 61    	and.w     w2, w1, w1
    2c8a:	01 08 78    	mov.w     w1, [w0]

00002c8c <.L23>:
}
    2c8c:	00 80 fa    	ulnk      
    2c8e:	00 00 06    	return    

00002c90 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    2c90:	02 00 fa    	lnk       #0x2
    2c92:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    2c94:	1e 00 78    	mov.w     [w14], w0
    2c96:	90 08 90    	mov.w     [w0+18], w1
    2c98:	00 83 22    	mov.w     #0x2830, w0
    2c9a:	80 8f 50    	sub.w     w1, w0, [w15]
    2c9c:	0c 00 3a    	bra       NZ, 0x2cb6 <.L25>
        bitflip(self->port, self->bit);
    2c9e:	1e 00 78    	mov.w     [w14], w0
    2ca0:	10 00 78    	mov.w     [w0], w0
    2ca2:	9e 00 78    	mov.w     [w14], w1
    2ca4:	91 00 78    	mov.w     [w1], w1
    2ca6:	11 01 78    	mov.w     [w1], w2
    2ca8:	9e 00 78    	mov.w     [w14], w1
    2caa:	e1 40 90    	mov.b     [w1+6], w1
    2cac:	81 80 fb    	ze        w1, w1
    2cae:	13 00 20    	mov.w     #0x1, w3
    2cb0:	81 18 dd    	sl.w      w3, w1, w1
    2cb2:	81 00 69    	xor.w     w2, w1, w1
    2cb4:	01 08 78    	mov.w     w1, [w0]

00002cb6 <.L25>:
}
    2cb6:	00 80 fa    	ulnk      
    2cb8:	00 00 06    	return    

00002cba <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    2cba:	04 00 fa    	lnk       #0x4
    2cbc:	00 0f 78    	mov.w     w0, [w14]
    2cbe:	11 07 98    	mov.w     w1, [w14+2]
    if (self->write)
    2cc0:	1e 00 78    	mov.w     [w14], w0
    2cc2:	10 08 90    	mov.w     [w0+18], w0
    2cc4:	00 00 e0    	cp0.w     w0
    2cc6:	05 00 32    	bra       Z, 0x2cd2 <.L27>
        self->write(self, val);
    2cc8:	1e 00 78    	mov.w     [w14], w0
    2cca:	10 09 90    	mov.w     [w0+18], w2
    2ccc:	9e 00 90    	mov.w     [w14+2], w1
    2cce:	1e 00 78    	mov.w     [w14], w0
    2cd0:	02 00 01    	call      w2

00002cd2 <.L27>:
}
    2cd2:	00 80 fa    	ulnk      
    2cd4:	00 00 06    	return    

00002cd6 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    2cd6:	02 00 fa    	lnk       #0x2
    2cd8:	00 0f 78    	mov.w     w0, [w14]
    if (self->read)
    2cda:	1e 00 78    	mov.w     [w14], w0
    2cdc:	20 08 90    	mov.w     [w0+20], w0
    2cde:	00 00 e0    	cp0.w     w0
    2ce0:	05 00 32    	bra       Z, 0x2cec <.L30>
        return self->read(self);
    2ce2:	1e 00 78    	mov.w     [w14], w0
    2ce4:	a0 08 90    	mov.w     [w0+20], w1
    2ce6:	1e 00 78    	mov.w     [w14], w0
    2ce8:	01 00 01    	call      w1
    2cea:	01 00 37    	bra       0x2cee <.L31>

00002cec <.L30>:
    else
        return 0xFFFF;
    2cec:	00 80 eb    	setm.w    w0

00002cee <.L31>:
}
    2cee:	00 80 fa    	ulnk      
    2cf0:	00 00 06    	return    

00002cf2 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2cf2:	08 00 fa    	lnk       #0x8
    2cf4:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2cf6:	3e 00 90    	mov.w     [w14+6], w0
    2cf8:	00 08 90    	mov.w     [w0+16], w0
    2cfa:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2cfc:	00 00 eb    	clr.w     w0
    2cfe:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    2d00:	1e 00 78    	mov.w     [w14], w0
    2d02:	30 00 90    	mov.w     [w0+6], w0
    2d04:	10 00 78    	mov.w     [w0], w0
    2d06:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2d08:	1e 02 90    	mov.w     [w14+2], w4
    2d0a:	ae 02 90    	mov.w     [w14+4], w5
    2d0c:	1e 00 78    	mov.w     [w14], w0
    2d0e:	20 00 90    	mov.w     [w0+4], w0
    2d10:	10 00 78    	mov.w     [w0], w0
    2d12:	80 00 eb    	clr.w     w1
    2d14:	00 01 be    	mov.d     w0, w2
    2d16:	04 00 be    	mov.d     w4, w0
    2d18:	d4 f3 07    	rcall     0x14c2 <___udivsi3>
    2d1a:	00 00 78    	mov.w     w0, w0
}
    2d1c:	00 80 fa    	ulnk      
    2d1e:	00 00 06    	return    

00002d20 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2d20:	0a 00 fa    	lnk       #0xa
    2d22:	30 07 98    	mov.w     w0, [w14+6]
    2d24:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d26:	3e 00 90    	mov.w     [w14+6], w0
    2d28:	00 08 90    	mov.w     [w0+16], w0
    2d2a:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    2d2c:	4e 00 90    	mov.w     [w14+8], w0
    2d2e:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d30:	1e 00 78    	mov.w     [w14], w0
    2d32:	20 00 90    	mov.w     [w0+4], w0
    2d34:	10 00 78    	mov.w     [w0], w0
    2d36:	80 00 eb    	clr.w     w1
    2d38:	00 9a b9    	mul.ss    w3, w0, w4
    2d3a:	04 02 78    	mov.w     w4, w4
    2d3c:	02 8b b9    	mul.ss    w1, w2, w6
    2d3e:	86 02 78    	mov.w     w6, w5
    2d40:	05 02 42    	add.w     w4, w5, w4
    2d42:	00 10 b8    	mul.uu    w2, w0, w0
    2d44:	01 02 42    	add.w     w4, w1, w4
    2d46:	84 00 78    	mov.w     w4, w1
    2d48:	10 07 98    	mov.w     w0, [w14+2]
    2d4a:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    2d4c:	1e 00 78    	mov.w     [w14], w0
    2d4e:	30 00 90    	mov.w     [w0+6], w0
    2d50:	ae 00 90    	mov.w     [w14+4], w1
    2d52:	01 08 78    	mov.w     w1, [w0]
}
    2d54:	00 80 fa    	ulnk      
    2d56:	00 00 06    	return    

00002d58 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    2d58:	08 00 fa    	lnk       #0x8
    2d5a:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d5c:	3e 00 90    	mov.w     [w14+6], w0
    2d5e:	00 08 90    	mov.w     [w0+16], w0
    2d60:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2d62:	00 00 eb    	clr.w     w0
    2d64:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    2d66:	1e 00 78    	mov.w     [w14], w0
    2d68:	20 00 90    	mov.w     [w0+4], w0
    2d6a:	90 00 78    	mov.w     [w0], w1
    2d6c:	1e 00 78    	mov.w     [w14], w0
    2d6e:	60 00 90    	mov.w     [w0+12], w0
    2d70:	00 80 50    	sub.w     w1, w0, w0
    2d72:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    2d74:	1e 02 90    	mov.w     [w14+2], w4
    2d76:	ae 02 90    	mov.w     [w14+4], w5
    2d78:	1e 00 78    	mov.w     [w14], w0
    2d7a:	70 00 90    	mov.w     [w0+14], w0
    2d7c:	80 00 eb    	clr.w     w1
    2d7e:	00 01 be    	mov.d     w0, w2
    2d80:	04 00 be    	mov.d     w4, w0
    2d82:	9f f3 07    	rcall     0x14c2 <___udivsi3>
    2d84:	00 00 78    	mov.w     w0, w0
}
    2d86:	00 80 fa    	ulnk      
    2d88:	00 00 06    	return    

00002d8a <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    2d8a:	0a 00 fa    	lnk       #0xa
    2d8c:	30 07 98    	mov.w     w0, [w14+6]
    2d8e:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d90:	3e 00 90    	mov.w     [w14+6], w0
    2d92:	00 08 90    	mov.w     [w0+16], w0
    2d94:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    2d96:	4e 00 90    	mov.w     [w14+8], w0
    2d98:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d9a:	1e 00 78    	mov.w     [w14], w0
    2d9c:	70 00 90    	mov.w     [w0+14], w0
    2d9e:	80 00 eb    	clr.w     w1
    2da0:	00 9a b9    	mul.ss    w3, w0, w4
    2da2:	04 02 78    	mov.w     w4, w4
    2da4:	02 8b b9    	mul.ss    w1, w2, w6
    2da6:	86 02 78    	mov.w     w6, w5
    2da8:	05 02 42    	add.w     w4, w5, w4
    2daa:	00 10 b8    	mul.uu    w2, w0, w0
    2dac:	01 02 42    	add.w     w4, w1, w4
    2dae:	84 00 78    	mov.w     w4, w1
    2db0:	10 07 98    	mov.w     w0, [w14+2]
    2db2:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2db4:	1e 00 78    	mov.w     [w14], w0
    2db6:	20 00 90    	mov.w     [w0+4], w0
    2db8:	9e 00 78    	mov.w     [w14], w1
    2dba:	61 01 90    	mov.w     [w1+12], w2
    2dbc:	ae 00 90    	mov.w     [w14+4], w1
    2dbe:	81 00 41    	add.w     w2, w1, w1
    2dc0:	01 08 78    	mov.w     w1, [w0]
}
    2dc2:	00 80 fa    	ulnk      
    2dc4:	00 00 06    	return    

00002dc6 <_init_oc>:

void init_oc(void) {
    2dc6:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2dc8:	26 01 20    	mov.w     #0x12, w6
    2dca:	85 19 20    	mov.w     #0x198, w5
    2dcc:	64 19 20    	mov.w     #0x196, w4
    2dce:	43 19 20    	mov.w     #0x194, w3
    2dd0:	22 19 20    	mov.w     #0x192, w2
    2dd2:	01 19 20    	mov.w     #0x190, w1
    2dd4:	40 a0 20    	mov.w     #0xa04, w0
    2dd6:	42 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2dd8:	36 01 20    	mov.w     #0x13, w6
    2dda:	25 1a 20    	mov.w     #0x1a2, w5
    2ddc:	04 1a 20    	mov.w     #0x1a0, w4
    2dde:	e3 19 20    	mov.w     #0x19e, w3
    2de0:	c2 19 20    	mov.w     #0x19c, w2
    2de2:	a1 19 20    	mov.w     #0x19a, w1
    2de4:	60 a1 20    	mov.w     #0xa16, w0
    2de6:	3a 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2de8:	46 01 20    	mov.w     #0x14, w6
    2dea:	c5 1a 20    	mov.w     #0x1ac, w5
    2dec:	a4 1a 20    	mov.w     #0x1aa, w4
    2dee:	83 1a 20    	mov.w     #0x1a8, w3
    2df0:	62 1a 20    	mov.w     #0x1a6, w2
    2df2:	41 1a 20    	mov.w     #0x1a4, w1
    2df4:	80 a2 20    	mov.w     #0xa28, w0
    2df6:	32 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2df8:	56 01 20    	mov.w     #0x15, w6
    2dfa:	65 1b 20    	mov.w     #0x1b6, w5
    2dfc:	44 1b 20    	mov.w     #0x1b4, w4
    2dfe:	23 1b 20    	mov.w     #0x1b2, w3
    2e00:	02 1b 20    	mov.w     #0x1b0, w2
    2e02:	e1 1a 20    	mov.w     #0x1ae, w1
    2e04:	a0 a3 20    	mov.w     #0xa3a, w0
    2e06:	2a 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2e08:	66 01 20    	mov.w     #0x16, w6
    2e0a:	05 1c 20    	mov.w     #0x1c0, w5
    2e0c:	e4 1b 20    	mov.w     #0x1be, w4
    2e0e:	c3 1b 20    	mov.w     #0x1bc, w3
    2e10:	a2 1b 20    	mov.w     #0x1ba, w2
    2e12:	81 1b 20    	mov.w     #0x1b8, w1
    2e14:	c0 a4 20    	mov.w     #0xa4c, w0
    2e16:	22 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2e18:	76 01 20    	mov.w     #0x17, w6
    2e1a:	a5 1c 20    	mov.w     #0x1ca, w5
    2e1c:	84 1c 20    	mov.w     #0x1c8, w4
    2e1e:	63 1c 20    	mov.w     #0x1c6, w3
    2e20:	42 1c 20    	mov.w     #0x1c4, w2
    2e22:	21 1c 20    	mov.w     #0x1c2, w1
    2e24:	e0 a5 20    	mov.w     #0xa5e, w0
    2e26:	1a 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2e28:	86 01 20    	mov.w     #0x18, w6
    2e2a:	45 1d 20    	mov.w     #0x1d4, w5
    2e2c:	24 1d 20    	mov.w     #0x1d2, w4
    2e2e:	03 1d 20    	mov.w     #0x1d0, w3
    2e30:	e2 1c 20    	mov.w     #0x1ce, w2
    2e32:	c1 1c 20    	mov.w     #0x1cc, w1
    2e34:	00 a7 20    	mov.w     #0xa70, w0
    2e36:	12 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2e38:	96 01 20    	mov.w     #0x19, w6
    2e3a:	e5 1d 20    	mov.w     #0x1de, w5
    2e3c:	c4 1d 20    	mov.w     #0x1dc, w4
    2e3e:	a3 1d 20    	mov.w     #0x1da, w3
    2e40:	82 1d 20    	mov.w     #0x1d8, w2
    2e42:	61 1d 20    	mov.w     #0x1d6, w1
    2e44:	20 a8 20    	mov.w     #0xa82, w0
    2e46:	0a 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2e48:	36 02 20    	mov.w     #0x23, w6
    2e4a:	85 1e 20    	mov.w     #0x1e8, w5
    2e4c:	64 1e 20    	mov.w     #0x1e6, w4
    2e4e:	43 1e 20    	mov.w     #0x1e4, w3
    2e50:	22 1e 20    	mov.w     #0x1e2, w2
    2e52:	01 1e 20    	mov.w     #0x1e0, w1
    2e54:	40 a9 20    	mov.w     #0xa94, w0
    2e56:	02 00 07    	rcall     0x2e5c <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    2e58:	00 80 fa    	ulnk      
    2e5a:	00 00 06    	return    

00002e5c <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    2e5c:	0e 00 fa    	lnk       #0xe
    2e5e:	00 0f 78    	mov.w     w0, [w14]
    2e60:	11 07 98    	mov.w     w1, [w14+2]
    2e62:	22 07 98    	mov.w     w2, [w14+4]
    2e64:	33 07 98    	mov.w     w3, [w14+6]
    2e66:	44 07 98    	mov.w     w4, [w14+8]
    2e68:	55 07 98    	mov.w     w5, [w14+10]
    2e6a:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    2e6c:	1e 00 78    	mov.w     [w14], w0
    2e6e:	9e 00 90    	mov.w     [w14+2], w1
    2e70:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	ae 00 90    	mov.w     [w14+4], w1
    2e76:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    2e78:	1e 00 78    	mov.w     [w14], w0
    2e7a:	be 00 90    	mov.w     [w14+6], w1
    2e7c:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    2e7e:	1e 00 78    	mov.w     [w14], w0
    2e80:	ce 00 90    	mov.w     [w14+8], w1
    2e82:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    2e84:	1e 00 78    	mov.w     [w14], w0
    2e86:	de 00 90    	mov.w     [w14+10], w1
    2e88:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    2e8a:	1e 00 78    	mov.w     [w14], w0
    2e8c:	01 e8 23    	mov.w     #0x3e80, w1
    2e8e:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	01 e8 23    	mov.w     #0x3e80, w1
    2e94:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    2e96:	1e 00 78    	mov.w     [w14], w0
    2e98:	ee 00 90    	mov.w     [w14+12], w1
    2e9a:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    2e9c:	1e 00 78    	mov.w     [w14], w0
    2e9e:	80 00 eb    	clr.w     w1
    2ea0:	01 08 98    	mov.w     w1, [w0+16]
}
    2ea2:	00 80 fa    	ulnk      
    2ea4:	00 00 06    	return    

00002ea6 <_oc_free>:

void oc_free(_OC *self) {
    2ea6:	02 00 fa    	lnk       #0x2
    2ea8:	00 0f 78    	mov.w     w0, [w14]
    *(self->OCxCON1) = 0;
    2eaa:	1e 00 78    	mov.w     [w14], w0
    2eac:	10 00 78    	mov.w     [w0], w0
    2eae:	80 00 eb    	clr.w     w1
    2eb0:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    2eb2:	1e 00 78    	mov.w     [w14], w0
    2eb4:	10 00 90    	mov.w     [w0+2], w0
    2eb6:	80 00 eb    	clr.w     w1
    2eb8:	01 08 78    	mov.w     w1, [w0]
    if (self->pin) {
    2eba:	1e 00 78    	mov.w     [w14], w0
    2ebc:	00 08 90    	mov.w     [w0+16], w0
    2ebe:	00 00 e0    	cp0.w     w0
    2ec0:	2f 00 32    	bra       Z, 0x2f20 <.L7>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ec2:	11 3a 80    	mov.w     0x742, w1
    2ec4:	f0 0b 20    	mov.w     #0xbf, w0
    2ec6:	00 81 60    	and.w     w1, w0, w2
    2ec8:	60 04 20    	mov.w     #0x46, w0
    2eca:	71 05 20    	mov.w     #0x57, w1
    2ecc:	23 74 20    	mov.w     #0x742, w3
    2ece:	80 49 78    	mov.b     w0, [w3]
    2ed0:	81 49 78    	mov.b     w1, [w3]
    2ed2:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2ed4:	1e 00 78    	mov.w     [w14], w0
    2ed6:	00 08 90    	mov.w     [w0+16], w0
    2ed8:	70 00 90    	mov.w     [w0+14], w0
    2eda:	9e 00 78    	mov.w     [w14], w1
    2edc:	81 08 90    	mov.w     [w1+16], w1
    2ede:	f1 00 90    	mov.w     [w1+14], w1
    2ee0:	11 01 78    	mov.w     [w1], w2
    2ee2:	9e 00 78    	mov.w     [w14], w1
    2ee4:	81 08 90    	mov.w     [w1+16], w1
    2ee6:	a1 48 90    	mov.b     [w1+10], w1
    2ee8:	81 80 fb    	ze        w1, w1
    2eea:	f3 03 20    	mov.w     #0x3f, w3
    2eec:	81 18 dd    	sl.w      w3, w1, w1
    2eee:	81 80 ea    	com.w     w1, w1
    2ef0:	81 00 61    	and.w     w2, w1, w1
    2ef2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ef4:	10 3a 80    	mov.w     0x742, w0
    2ef6:	00 01 78    	mov.w     w0, w2
    2ef8:	02 60 a0    	bset.w    w2, #0x6
    2efa:	60 04 20    	mov.w     #0x46, w0
    2efc:	71 05 20    	mov.w     #0x57, w1
    2efe:	23 74 20    	mov.w     #0x742, w3
    2f00:	80 49 78    	mov.b     w0, [w3]
    2f02:	81 49 78    	mov.b     w1, [w3]
    2f04:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    2f06:	1e 00 78    	mov.w     [w14], w0
    2f08:	00 08 90    	mov.w     [w0+16], w0
    2f0a:	80 00 eb    	clr.w     w1
    2f0c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    2f0e:	1e 00 78    	mov.w     [w14], w0
    2f10:	00 08 90    	mov.w     [w0+16], w0
    2f12:	36 fe 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    2f14:	1e 00 78    	mov.w     [w14], w0
    2f16:	00 08 90    	mov.w     [w0+16], w0
    2f18:	a5 fe 07    	rcall     0x2c64 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->pin = NULL;
    2f1a:	1e 00 78    	mov.w     [w14], w0
    2f1c:	80 00 eb    	clr.w     w1
    2f1e:	01 08 98    	mov.w     w1, [w0+16]

00002f20 <.L7>:
    }
}
    2f20:	00 80 fa    	ulnk      
    2f22:	00 00 06    	return    

00002f24 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2f24:	10 00 fa    	lnk       #0x10
    2f26:	88 1f 78    	mov.w     w8, [w15++]
    2f28:	20 07 98    	mov.w     w0, [w14+4]
    2f2a:	31 07 98    	mov.w     w1, [w14+6]
    2f2c:	42 07 98    	mov.w     w2, [w14+8]
    2f2e:	54 07 98    	mov.w     w4, [w14+10]
    2f30:	65 07 98    	mov.w     w5, [w14+12]
    2f32:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (pin->rpnum==-1)
    2f34:	3e 00 90    	mov.w     [w14+6], w0
    2f36:	60 00 90    	mov.w     [w0+12], w0
    2f38:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2f3a:	9c 00 32    	bra       Z, 0x3074 <.L18>
        return;
    if (pin->owner==NULL) {
    2f3c:	3e 00 90    	mov.w     [w14+6], w0
    2f3e:	00 08 90    	mov.w     [w0+16], w0
    2f40:	00 00 e0    	cp0.w     w0
    2f42:	33 00 3a    	bra       NZ, 0x2faa <.L12>
        self->pin = pin;
    2f44:	2e 00 90    	mov.w     [w14+4], w0
    2f46:	be 00 90    	mov.w     [w14+6], w1
    2f48:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    2f4a:	3e 00 90    	mov.w     [w14+6], w0
    2f4c:	ae 00 90    	mov.w     [w14+4], w1
    2f4e:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f50:	11 3a 80    	mov.w     0x742, w1
    2f52:	f0 0b 20    	mov.w     #0xbf, w0
    2f54:	00 81 60    	and.w     w1, w0, w2
    2f56:	60 04 20    	mov.w     #0x46, w0
    2f58:	71 05 20    	mov.w     #0x57, w1
    2f5a:	23 74 20    	mov.w     #0x742, w3
    2f5c:	80 49 78    	mov.b     w0, [w3]
    2f5e:	81 49 78    	mov.b     w1, [w3]
    2f60:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2f62:	3e 00 90    	mov.w     [w14+6], w0
    2f64:	70 00 90    	mov.w     [w0+14], w0
    2f66:	be 00 90    	mov.w     [w14+6], w1
    2f68:	f1 00 90    	mov.w     [w1+14], w1
    2f6a:	11 01 78    	mov.w     [w1], w2
    2f6c:	be 00 90    	mov.w     [w14+6], w1
    2f6e:	a1 48 90    	mov.b     [w1+10], w1
    2f70:	81 80 fb    	ze        w1, w1
    2f72:	f3 03 20    	mov.w     #0x3f, w3
    2f74:	81 18 dd    	sl.w      w3, w1, w1
    2f76:	81 80 ea    	com.w     w1, w1
    2f78:	81 00 61    	and.w     w2, w1, w1
    2f7a:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2f7c:	3e 00 90    	mov.w     [w14+6], w0
    2f7e:	70 00 90    	mov.w     [w0+14], w0
    2f80:	be 00 90    	mov.w     [w14+6], w1
    2f82:	f1 00 90    	mov.w     [w1+14], w1
    2f84:	11 01 78    	mov.w     [w1], w2
    2f86:	ae 00 90    	mov.w     [w14+4], w1
    2f88:	d1 01 90    	mov.w     [w1+10], w3
    2f8a:	be 00 90    	mov.w     [w14+6], w1
    2f8c:	a1 48 90    	mov.b     [w1+10], w1
    2f8e:	81 80 fb    	ze        w1, w1
    2f90:	81 18 dd    	sl.w      w3, w1, w1
    2f92:	82 80 70    	ior.w     w1, w2, w1
    2f94:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f96:	10 3a 80    	mov.w     0x742, w0
    2f98:	00 01 78    	mov.w     w0, w2
    2f9a:	02 60 a0    	bset.w    w2, #0x6
    2f9c:	60 04 20    	mov.w     #0x46, w0
    2f9e:	71 05 20    	mov.w     #0x57, w1
    2fa0:	23 74 20    	mov.w     #0x742, w3
    2fa2:	80 49 78    	mov.b     w0, [w3]
    2fa4:	81 49 78    	mov.b     w1, [w3]
    2fa6:	82 49 78    	mov.b     w2, [w3]
    2fa8:	05 00 37    	bra       0x2fb4 <.L13>

00002faa <.L12>:
    } else if (pin->owner!=(void *)self) {
    2faa:	3e 00 90    	mov.w     [w14+6], w0
    2fac:	80 08 90    	mov.w     [w0+16], w1
    2fae:	2e 00 90    	mov.w     [w14+4], w0
    2fb0:	80 8f 50    	sub.w     w1, w0, [w15]
    2fb2:	62 00 3a    	bra       NZ, 0x3078 <.L19>

00002fb4 <.L13>:
        return;
    }
    if (timer) {
    2fb4:	4e 00 90    	mov.w     [w14+8], w0
    2fb6:	00 00 e0    	cp0.w     w0
    2fb8:	1c 00 32    	bra       Z, 0x2ff2 <.L14>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2fba:	2e 00 90    	mov.w     [w14+4], w0
    2fbc:	10 00 78    	mov.w     [w0], w0
    2fbe:	ce 00 90    	mov.w     [w14+8], w1
    2fc0:	e1 00 90    	mov.w     [w1+12], w1
    2fc2:	ca 08 dd    	sl.w      w1, #0xa, w1
    2fc4:	61 00 b3    	ior.w     #0x6, w1
    2fc6:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2fc8:	2e 00 90    	mov.w     [w14+4], w0
    2fca:	10 00 90    	mov.w     [w0+2], w0
    2fcc:	f1 01 20    	mov.w     #0x1f, w1
    2fce:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    2fd0:	5e 01 90    	mov.w     [w14+10], w2
    2fd2:	ee 01 90    	mov.w     [w14+12], w3
    2fd4:	4e 00 90    	mov.w     [w14+8], w0
    2fd6:	e4 f8 07    	rcall     0x21a0 <_timer_setFreq> <L0> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    2fd8:	2e 00 90    	mov.w     [w14+4], w0
    2fda:	20 00 90    	mov.w     [w0+4], w0
    2fdc:	ce 00 90    	mov.w     [w14+8], w1
    2fde:	91 00 90    	mov.w     [w1+2], w1
    2fe0:	91 00 78    	mov.w     [w1], w1
    2fe2:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    2fe4:	2e 00 90    	mov.w     [w14+4], w0
    2fe6:	40 00 90    	mov.w     [w0+8], w0
    2fe8:	80 00 eb    	clr.w     w1
    2fea:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    2fec:	4e 00 90    	mov.w     [w14+8], w0
    2fee:	0d f9 07    	rcall     0x220a <_timer_start> <L0> <.LFB13> <.LFE12>
    2ff0:	25 00 37    	bra       0x303c <.L15>

00002ff2 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2ff2:	2e 00 90    	mov.w     [w14+4], w0
    2ff4:	10 00 78    	mov.w     [w0], w0
    2ff6:	61 c0 21    	mov.w     #0x1c06, w1
    2ff8:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2ffa:	2e 00 90    	mov.w     [w14+4], w0
    2ffc:	10 00 90    	mov.w     [w0+2], w0
    2ffe:	f1 01 20    	mov.w     #0x1f, w1
    3000:	01 08 78    	mov.w     w1, [w0]
        if (freq<(FCY/65536.))
    3002:	18 c0 b3    	mov.b     #0x1, w8
    3004:	02 40 22    	mov.w     #0x2400, w2
    3006:	43 37 24    	mov.w     #0x4374, w3
    3008:	5e 00 90    	mov.w     [w14+10], w0
    300a:	ee 00 90    	mov.w     [w14+12], w1
    300c:	b2 f1 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    300e:	00 00 e0    	cp0.w     w0
    3010:	01 00 35    	bra       LT, 0x3014 <.L16>
    3012:	00 44 eb    	clr.b     w8

00003014 <.L16>:
    3014:	08 04 e0    	cp0.b     w8
    3016:	05 00 32    	bra       Z, 0x3022 <.L17>
            *(self->OCxRS) = 0xFFFF;
    3018:	2e 00 90    	mov.w     [w14+4], w0
    301a:	20 00 90    	mov.w     [w0+4], w0
    301c:	80 80 eb    	setm.w    w1
    301e:	01 08 78    	mov.w     w1, [w0]
    3020:	0d 00 37    	bra       0x303c <.L15>

00003022 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3022:	2e 00 90    	mov.w     [w14+4], w0
    3024:	20 04 90    	mov.w     [w0+4], w8
    3026:	5e 01 90    	mov.w     [w14+10], w2
    3028:	ee 01 90    	mov.w     [w14+12], w3
    302a:	00 40 22    	mov.w     #0x2400, w0
    302c:	41 b7 24    	mov.w     #0x4b74, w1
    302e:	5f f1 07    	rcall     0x12ee <___divsf3>
    3030:	02 00 20    	mov.w     #0x0, w2
    3032:	03 f8 23    	mov.w     #0x3f80, w3
    3034:	fe f0 07    	rcall     0x1232 <___subsf3>
    3036:	a1 f1 07    	rcall     0x137a <___fixunssfsi>
    3038:	00 00 78    	mov.w     w0, w0
    303a:	00 0c 78    	mov.w     w0, [w8]

0000303c <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    303c:	7e 00 90    	mov.w     [w14+14], w0
    303e:	61 01 b8    	mul.uu    w0, #0x1, w2
    3040:	2e 00 90    	mov.w     [w14+4], w0
    3042:	20 00 90    	mov.w     [w0+4], w0
    3044:	10 00 78    	mov.w     [w0], w0
    3046:	80 00 eb    	clr.w     w1
    3048:	00 9a b9    	mul.ss    w3, w0, w4
    304a:	04 02 78    	mov.w     w4, w4
    304c:	02 8b b9    	mul.ss    w1, w2, w6
    304e:	86 02 78    	mov.w     w6, w5
    3050:	05 02 42    	add.w     w4, w5, w4
    3052:	00 10 b8    	mul.uu    w2, w0, w0
    3054:	01 02 42    	add.w     w4, w1, w4
    3056:	84 00 78    	mov.w     w4, w1
    3058:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    305a:	2e 00 90    	mov.w     [w14+4], w0
    305c:	30 00 90    	mov.w     [w0+6], w0
    305e:	9e 00 90    	mov.w     [w14+2], w1
    3060:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    3062:	2e 00 90    	mov.w     [w14+4], w0
    3064:	00 08 90    	mov.w     [w0+16], w0
    3066:	01 d2 22    	mov.w     #0x2d20, w1
    3068:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    306a:	2e 00 90    	mov.w     [w14+4], w0
    306c:	00 08 90    	mov.w     [w0+16], w0
    306e:	21 cf 22    	mov.w     #0x2cf2, w1
    3070:	21 08 98    	mov.w     w1, [w0+20]
    3072:	03 00 37    	bra       0x307a <.L9>

00003074 <.L18>:
    3074:	00 00 00    	nop       
    3076:	01 00 37    	bra       0x307a <.L9>

00003078 <.L19>:
    3078:	00 00 00    	nop       

0000307a <.L9>:
}
    307a:	4f 04 78    	mov.w     [--w15], w8
    307c:	00 80 fa    	ulnk      
    307e:	00 00 06    	return    

00003080 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3080:	14 00 fa    	lnk       #0x14
    3082:	20 07 98    	mov.w     w0, [w14+4]
    3084:	31 07 98    	mov.w     w1, [w14+6]
    3086:	42 07 98    	mov.w     w2, [w14+8]
    3088:	54 07 98    	mov.w     w4, [w14+10]
    308a:	65 07 98    	mov.w     w5, [w14+12]
    308c:	76 07 98    	mov.w     w6, [w14+14]
    308e:	07 0f 98    	mov.w     w7, [w14+16]
    3090:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    3092:	3e 00 90    	mov.w     [w14+6], w0
    3094:	60 00 90    	mov.w     [w0+12], w0
    3096:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3098:	86 00 32    	bra       Z, 0x31a6 <.L25>
        return;
    if (pin->owner==NULL) {
    309a:	3e 00 90    	mov.w     [w14+6], w0
    309c:	00 08 90    	mov.w     [w0+16], w0
    309e:	00 00 e0    	cp0.w     w0
    30a0:	33 00 3a    	bra       NZ, 0x3108 <.L23>
        self->pin = pin;
    30a2:	2e 00 90    	mov.w     [w14+4], w0
    30a4:	be 00 90    	mov.w     [w14+6], w1
    30a6:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    30a8:	3e 00 90    	mov.w     [w14+6], w0
    30aa:	ae 00 90    	mov.w     [w14+4], w1
    30ac:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    30ae:	11 3a 80    	mov.w     0x742, w1
    30b0:	f0 0b 20    	mov.w     #0xbf, w0
    30b2:	00 81 60    	and.w     w1, w0, w2
    30b4:	60 04 20    	mov.w     #0x46, w0
    30b6:	71 05 20    	mov.w     #0x57, w1
    30b8:	23 74 20    	mov.w     #0x742, w3
    30ba:	80 49 78    	mov.b     w0, [w3]
    30bc:	81 49 78    	mov.b     w1, [w3]
    30be:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    30c0:	3e 00 90    	mov.w     [w14+6], w0
    30c2:	70 00 90    	mov.w     [w0+14], w0
    30c4:	be 00 90    	mov.w     [w14+6], w1
    30c6:	f1 00 90    	mov.w     [w1+14], w1
    30c8:	11 01 78    	mov.w     [w1], w2
    30ca:	be 00 90    	mov.w     [w14+6], w1
    30cc:	a1 48 90    	mov.b     [w1+10], w1
    30ce:	81 80 fb    	ze        w1, w1
    30d0:	f3 03 20    	mov.w     #0x3f, w3
    30d2:	81 18 dd    	sl.w      w3, w1, w1
    30d4:	81 80 ea    	com.w     w1, w1
    30d6:	81 00 61    	and.w     w2, w1, w1
    30d8:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    30da:	3e 00 90    	mov.w     [w14+6], w0
    30dc:	70 00 90    	mov.w     [w0+14], w0
    30de:	be 00 90    	mov.w     [w14+6], w1
    30e0:	f1 00 90    	mov.w     [w1+14], w1
    30e2:	11 01 78    	mov.w     [w1], w2
    30e4:	ae 00 90    	mov.w     [w14+4], w1
    30e6:	d1 01 90    	mov.w     [w1+10], w3
    30e8:	be 00 90    	mov.w     [w14+6], w1
    30ea:	a1 48 90    	mov.b     [w1+10], w1
    30ec:	81 80 fb    	ze        w1, w1
    30ee:	81 18 dd    	sl.w      w3, w1, w1
    30f0:	82 80 70    	ior.w     w1, w2, w1
    30f2:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    30f4:	10 3a 80    	mov.w     0x742, w0
    30f6:	00 01 78    	mov.w     w0, w2
    30f8:	02 60 a0    	bset.w    w2, #0x6
    30fa:	60 04 20    	mov.w     #0x46, w0
    30fc:	71 05 20    	mov.w     #0x57, w1
    30fe:	23 74 20    	mov.w     #0x742, w3
    3100:	80 49 78    	mov.b     w0, [w3]
    3102:	81 49 78    	mov.b     w1, [w3]
    3104:	82 49 78    	mov.b     w2, [w3]
    3106:	05 00 37    	bra       0x3112 <.L24>

00003108 <.L23>:
    } else if (pin->owner!=(void *)self) {
    3108:	3e 00 90    	mov.w     [w14+6], w0
    310a:	80 08 90    	mov.w     [w0+16], w1
    310c:	2e 00 90    	mov.w     [w14+4], w0
    310e:	80 8f 50    	sub.w     w1, w0, [w15]
    3110:	4c 00 3a    	bra       NZ, 0x31aa <.L26>

00003112 <.L24>:
        return;
    }
    if (timer) {
    3112:	4e 00 90    	mov.w     [w14+8], w0
    3114:	00 00 e0    	cp0.w     w0
    3116:	4a 00 32    	bra       Z, 0x31ac <.L20>
        self->servooffset = (uint16_t)(FCY*min_width);
    3118:	02 40 22    	mov.w     #0x2400, w2
    311a:	43 b7 24    	mov.w     #0x4b74, w3
    311c:	7e 00 90    	mov.w     [w14+14], w0
    311e:	8e 08 90    	mov.w     [w14+16], w1
    3120:	9c f1 07    	rcall     0x145a <___mulsf3>
    3122:	2b f1 07    	rcall     0x137a <___fixunssfsi>
    3124:	80 00 78    	mov.w     w0, w1
    3126:	2e 00 90    	mov.w     [w14+4], w0
    3128:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    312a:	7e 01 90    	mov.w     [w14+14], w2
    312c:	8e 09 90    	mov.w     [w14+16], w3
    312e:	3e b8 97    	mov.w     [w14-10], w0
    3130:	ce b8 97    	mov.w     [w14-8], w1
    3132:	7f f0 07    	rcall     0x1232 <___subsf3>
    3134:	02 40 22    	mov.w     #0x2400, w2
    3136:	43 b7 24    	mov.w     #0x4b74, w3
    3138:	90 f1 07    	rcall     0x145a <___mulsf3>
    313a:	1f f1 07    	rcall     0x137a <___fixunssfsi>
    313c:	80 00 78    	mov.w     w0, w1
    313e:	2e 00 90    	mov.w     [w14+4], w0
    3140:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    3142:	2e 00 90    	mov.w     [w14+4], w0
    3144:	10 00 78    	mov.w     [w0], w0
    3146:	f1 c0 21    	mov.w     #0x1c0f, w1
    3148:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    314a:	2e 00 90    	mov.w     [w14+4], w0
    314c:	10 00 90    	mov.w     [w0+2], w0
    314e:	ce 00 90    	mov.w     [w14+8], w1
    3150:	f1 00 90    	mov.w     [w1+14], w1
    3152:	01 70 a0    	bset.w    w1, #0x7
    3154:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    3156:	2e 00 90    	mov.w     [w14+4], w0
    3158:	30 00 90    	mov.w     [w0+6], w0
    315a:	11 00 20    	mov.w     #0x1, w1
    315c:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    315e:	1e 08 90    	mov.w     [w14+18], w0
    3160:	61 01 b8    	mul.uu    w0, #0x1, w2
    3162:	2e 00 90    	mov.w     [w14+4], w0
    3164:	70 00 90    	mov.w     [w0+14], w0
    3166:	80 00 eb    	clr.w     w1
    3168:	00 9a b9    	mul.ss    w3, w0, w4
    316a:	04 02 78    	mov.w     w4, w4
    316c:	02 8b b9    	mul.ss    w1, w2, w6
    316e:	86 02 78    	mov.w     w6, w5
    3170:	05 02 42    	add.w     w4, w5, w4
    3172:	00 10 b8    	mul.uu    w2, w0, w0
    3174:	01 02 42    	add.w     w4, w1, w4
    3176:	84 00 78    	mov.w     w4, w1
    3178:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    317a:	2e 00 90    	mov.w     [w14+4], w0
    317c:	20 00 90    	mov.w     [w0+4], w0
    317e:	ae 00 90    	mov.w     [w14+4], w1
    3180:	61 01 90    	mov.w     [w1+12], w2
    3182:	9e 00 90    	mov.w     [w14+2], w1
    3184:	81 00 41    	add.w     w2, w1, w1
    3186:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    3188:	5e 01 90    	mov.w     [w14+10], w2
    318a:	ee 01 90    	mov.w     [w14+12], w3
    318c:	4e 00 90    	mov.w     [w14+8], w0
    318e:	6e f7 07    	rcall     0x206c <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
        timer_start(timer);
    3190:	4e 00 90    	mov.w     [w14+8], w0
    3192:	3b f8 07    	rcall     0x220a <_timer_start> <L0> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    3194:	2e 00 90    	mov.w     [w14+4], w0
    3196:	00 08 90    	mov.w     [w0+16], w0
    3198:	a1 d8 22    	mov.w     #0x2d8a, w1
    319a:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    319c:	2e 00 90    	mov.w     [w14+4], w0
    319e:	00 08 90    	mov.w     [w0+16], w0
    31a0:	81 d5 22    	mov.w     #0x2d58, w1
    31a2:	21 08 98    	mov.w     w1, [w0+20]
    31a4:	03 00 37    	bra       0x31ac <.L20>

000031a6 <.L25>:
    31a6:	00 00 00    	nop       
    31a8:	01 00 37    	bra       0x31ac <.L20>

000031aa <.L26>:
    31aa:	00 00 00    	nop       

000031ac <.L20>:
    }
}
    31ac:	00 80 fa    	ulnk      
    31ae:	00 00 06    	return    

000031b0 <_enc_read_reg>:
    31b0:	06 00 fa    	lnk       #0x6
    31b2:	88 9f be    	mov.d     w8, [w15++]
    31b4:	00 04 78    	mov.w     w0, w8
    31b6:	21 07 98    	mov.w     w1, [w14+4]
    31b8:	2e 00 90    	mov.w     [w14+4], w0
    31ba:	00 e0 a0    	bset.w    w0, #0xe
    31bc:	00 0f 78    	mov.w     w0, [w14]
    31be:	9e 04 78    	mov.w     [w14], w9
    31c0:	1e 00 78    	mov.w     [w14], w0
    31c2:	34 02 07    	rcall     0x362c <_parity> <.L0> <.LFB0> <.Ltext0>
    31c4:	00 80 fb    	ze        w0, w0
    31c6:	4f 00 dd    	sl.w      w0, #0xf, w0
    31c8:	09 00 70    	ior.w     w0, w9, w0
    31ca:	00 0f 78    	mov.w     w0, [w14]
    31cc:	40 42 80    	mov.w     0x848, w0
    31ce:	4a fd 07    	rcall     0x2c64 <_pin_clear> <L0> <.LFB9> <.LFE8>
    31d0:	1e 40 90    	mov.b     [w14+1], w0
    31d2:	80 40 78    	mov.b     w0, w1
    31d4:	00 ba 20    	mov.w     #0xba0, w0
    31d6:	17 fb 07    	rcall     0x2806 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    31d8:	1e 40 78    	mov.b     [w14], w0
    31da:	80 40 78    	mov.b     w0, w1
    31dc:	00 ba 20    	mov.w     #0xba0, w0
    31de:	13 fb 07    	rcall     0x2806 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    31e0:	40 42 80    	mov.w     0x848, w0
    31e2:	2b fd 07    	rcall     0x2c3a <_pin_set> <L0> <.LFB8> <.LFE7>
    31e4:	40 42 80    	mov.w     0x848, w0
    31e6:	3e fd 07    	rcall     0x2c64 <_pin_clear> <L0> <.LFB9> <.LFE8>
    31e8:	80 40 eb    	clr.b     w1
    31ea:	00 ba 20    	mov.w     #0xba0, w0
    31ec:	0c fb 07    	rcall     0x2806 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    31ee:	30 47 98    	mov.b     w0, [w14+3]
    31f0:	80 40 eb    	clr.b     w1
    31f2:	00 ba 20    	mov.w     #0xba0, w0
    31f4:	08 fb 07    	rcall     0x2806 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    31f6:	20 47 98    	mov.b     w0, [w14+2]
    31f8:	40 42 80    	mov.w     0x848, w0
    31fa:	1f fd 07    	rcall     0x2c3a <_pin_set> <L0> <.LFB8> <.LFE7>
    31fc:	9e 00 90    	mov.w     [w14+2], w1
    31fe:	01 0c 78    	mov.w     w1, [w8]
    3200:	08 00 78    	mov.w     w8, w0
    3202:	4f 04 be    	mov.d     [--w15], w8
    3204:	00 80 fa    	ulnk      
    3206:	00 00 06    	return    

00003208 <_VendorRequests>:
    3208:	10 00 fa    	lnk       #0x10
    320a:	40 83 20    	mov.w     #0x834, w0
    320c:	10 40 90    	mov.b     [w0+1], w0
    320e:	00 80 fb    	ze        w0, w0
    3210:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3212:	41 00 32    	bra       Z, 0x3296 <.L8>
    3214:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3216:	0c 00 3c    	bra       GT, 0x3230 <.L13>
    3218:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    321a:	1c 00 32    	bra       Z, 0x3254 <.L5>
    321c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    321e:	03 00 3c    	bra       GT, 0x3226 <.L14>
    3220:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3222:	0f 00 32    	bra       Z, 0x3242 <.L4>
    3224:	91 00 37    	bra       0x3348 <.L3>

00003226 <.L14>:
    3226:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3228:	1e 00 32    	bra       Z, 0x3266 <.L6>
    322a:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    322c:	25 00 32    	bra       Z, 0x3278 <.L7>
    322e:	8c 00 37    	bra       0x3348 <.L3>

00003230 <.L13>:
    3230:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3232:	51 00 32    	bra       Z, 0x32d6 <.L10>
    3234:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3236:	3e 00 35    	bra       LT, 0x32b4 <.L9>
    3238:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    323a:	5e 00 32    	bra       Z, 0x32f8 <.L11>
    323c:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    323e:	73 00 32    	bra       Z, 0x3326 <.L12>
    3240:	83 00 37    	bra       0x3348 <.L3>

00003242 <.L4>:
    3242:	00 80 20    	mov.w     #0x800, w0
    3244:	4d 01 07    	rcall     0x34e0 <_led_toggle> <L0> <.LFB4> <.LFE3>
    3246:	40 c0 20    	mov.w     #0xc04, w0
    3248:	80 40 eb    	clr.b     w1
    324a:	01 48 78    	mov.b     w1, [w0]
    324c:	50 c0 20    	mov.w     #0xc05, w0
    324e:	81 cc b3    	mov.b     #0xc8, w1
    3250:	01 48 78    	mov.b     w1, [w0]
    3252:	7d 00 37    	bra       0x334e <.L2>

00003254 <.L5>:
    3254:	80 80 20    	mov.w     #0x808, w0
    3256:	44 01 07    	rcall     0x34e0 <_led_toggle> <L0> <.LFB4> <.LFE3>
    3258:	40 c0 20    	mov.w     #0xc04, w0
    325a:	80 40 eb    	clr.b     w1
    325c:	01 48 78    	mov.b     w1, [w0]
    325e:	50 c0 20    	mov.w     #0xc05, w0
    3260:	81 cc b3    	mov.b     #0xc8, w1
    3262:	01 48 78    	mov.b     w1, [w0]
    3264:	74 00 37    	bra       0x334e <.L2>

00003266 <.L6>:
    3266:	00 81 20    	mov.w     #0x810, w0
    3268:	3b 01 07    	rcall     0x34e0 <_led_toggle> <L0> <.LFB4> <.LFE3>
    326a:	40 c0 20    	mov.w     #0xc04, w0
    326c:	80 40 eb    	clr.b     w1
    326e:	01 48 78    	mov.b     w1, [w0]
    3270:	50 c0 20    	mov.w     #0xc05, w0
    3272:	81 cc b3    	mov.b     #0xc8, w1
    3274:	01 48 78    	mov.b     w1, [w0]
    3276:	6b 00 37    	bra       0x334e <.L2>

00003278 <.L7>:
    3278:	40 83 20    	mov.w     #0x834, w0
    327a:	10 00 90    	mov.w     [w0+2], w0
    327c:	80 00 78    	mov.w     w0, w1
    327e:	60 8e 20    	mov.w     #0x8e6, w0
    3280:	1c fd 07    	rcall     0x2cba <_pin_write> <L0> <.LFB11> <.LFE10>
    3282:	80 00 eb    	clr.w     w1
    3284:	c0 8f 20    	mov.w     #0x8fc, w0
    3286:	19 fd 07    	rcall     0x2cba <_pin_write> <L0> <.LFB11> <.LFE10>
    3288:	40 c0 20    	mov.w     #0xc04, w0
    328a:	80 40 eb    	clr.b     w1
    328c:	01 48 78    	mov.b     w1, [w0]
    328e:	50 c0 20    	mov.w     #0xc05, w0
    3290:	81 cc b3    	mov.b     #0xc8, w1
    3292:	01 48 78    	mov.b     w1, [w0]
    3294:	5c 00 37    	bra       0x334e <.L2>

00003296 <.L8>:
    3296:	80 00 eb    	clr.w     w1
    3298:	60 8e 20    	mov.w     #0x8e6, w0
    329a:	0f fd 07    	rcall     0x2cba <_pin_write> <L0> <.LFB11> <.LFE10>
    329c:	40 83 20    	mov.w     #0x834, w0
    329e:	10 00 90    	mov.w     [w0+2], w0
    32a0:	80 00 78    	mov.w     w0, w1
    32a2:	c0 8f 20    	mov.w     #0x8fc, w0
    32a4:	0a fd 07    	rcall     0x2cba <_pin_write> <L0> <.LFB11> <.LFE10>
    32a6:	40 c0 20    	mov.w     #0xc04, w0
    32a8:	80 40 eb    	clr.b     w1
    32aa:	01 48 78    	mov.b     w1, [w0]
    32ac:	50 c0 20    	mov.w     #0xc05, w0
    32ae:	81 cc b3    	mov.b     #0xc8, w1
    32b0:	01 48 78    	mov.b     w1, [w0]
    32b2:	4d 00 37    	bra       0x334e <.L2>

000032b4 <.L9>:
    32b4:	60 8e 20    	mov.w     #0x8e6, w0
    32b6:	0f fd 07    	rcall     0x2cd6 <_pin_read> <L0> <.LFB12> <.LFE11>
    32b8:	20 07 98    	mov.w     w0, [w14+4]
    32ba:	30 60 80    	mov.w     0xc06, w0
    32bc:	ce 40 90    	mov.b     [w14+4], w1
    32be:	01 48 78    	mov.b     w1, [w0]
    32c0:	30 60 80    	mov.w     0xc06, w0
    32c2:	00 00 e8    	inc.w     w0, w0
    32c4:	de 40 90    	mov.b     [w14+5], w1
    32c6:	01 48 78    	mov.b     w1, [w0]
    32c8:	40 c0 20    	mov.w     #0xc04, w0
    32ca:	21 c0 b3    	mov.b     #0x2, w1
    32cc:	01 48 78    	mov.b     w1, [w0]
    32ce:	50 c0 20    	mov.w     #0xc05, w0
    32d0:	81 cc b3    	mov.b     #0xc8, w1
    32d2:	01 48 78    	mov.b     w1, [w0]
    32d4:	3c 00 37    	bra       0x334e <.L2>

000032d6 <.L10>:
    32d6:	c0 8f 20    	mov.w     #0x8fc, w0
    32d8:	fe fc 07    	rcall     0x2cd6 <_pin_read> <L0> <.LFB12> <.LFE11>
    32da:	20 07 98    	mov.w     w0, [w14+4]
    32dc:	30 60 80    	mov.w     0xc06, w0
    32de:	ce 40 90    	mov.b     [w14+4], w1
    32e0:	01 48 78    	mov.b     w1, [w0]
    32e2:	30 60 80    	mov.w     0xc06, w0
    32e4:	00 00 e8    	inc.w     w0, w0
    32e6:	de 40 90    	mov.b     [w14+5], w1
    32e8:	01 48 78    	mov.b     w1, [w0]
    32ea:	40 c0 20    	mov.w     #0xc04, w0
    32ec:	21 c0 b3    	mov.b     #0x2, w1
    32ee:	01 48 78    	mov.b     w1, [w0]
    32f0:	50 c0 20    	mov.w     #0xc05, w0
    32f2:	81 cc b3    	mov.b     #0xc8, w1
    32f4:	01 48 78    	mov.b     w1, [w0]
    32f6:	2b 00 37    	bra       0x334e <.L2>

000032f8 <.L11>:
    32f8:	00 00 eb    	clr.w     w0
    32fa:	f0 ff 23    	mov.w     #0x3fff, w0
    32fc:	66 01 47    	add.w     w14, #0x6, w2
    32fe:	80 00 78    	mov.w     w0, w1
    3300:	02 00 78    	mov.w     w2, w0
    3302:	56 ff 07    	rcall     0x31b0 <_enc_read_reg> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    3304:	7e 40 90    	mov.b     [w14+7], w0
    3306:	f0 43 b2    	and.b     #0x3f, w0
    3308:	70 47 98    	mov.b     w0, [w14+7]
    330a:	30 60 80    	mov.w     0xc06, w0
    330c:	ee 40 90    	mov.b     [w14+6], w1
    330e:	01 48 78    	mov.b     w1, [w0]
    3310:	30 60 80    	mov.w     0xc06, w0
    3312:	00 00 e8    	inc.w     w0, w0
    3314:	fe 40 90    	mov.b     [w14+7], w1
    3316:	01 48 78    	mov.b     w1, [w0]
    3318:	40 c0 20    	mov.w     #0xc04, w0
    331a:	21 c0 b3    	mov.b     #0x2, w1
    331c:	01 48 78    	mov.b     w1, [w0]
    331e:	50 c0 20    	mov.w     #0xc05, w0
    3320:	81 cc b3    	mov.b     #0xc8, w1
    3322:	01 48 78    	mov.b     w1, [w0]
    3324:	14 00 37    	bra       0x334e <.L2>

00003326 <.L12>:
    3326:	50 42 80    	mov.w     0x84a, w0
    3328:	d6 fc 07    	rcall     0x2cd6 <_pin_read> <L0> <.LFB12> <.LFE11>
    332a:	70 07 98    	mov.w     w0, [w14+14]
    332c:	30 60 80    	mov.w     0xc06, w0
    332e:	ee 48 90    	mov.b     [w14+14], w1
    3330:	01 48 78    	mov.b     w1, [w0]
    3332:	30 60 80    	mov.w     0xc06, w0
    3334:	00 00 e8    	inc.w     w0, w0
    3336:	fe 48 90    	mov.b     [w14+15], w1
    3338:	01 48 78    	mov.b     w1, [w0]
    333a:	40 c0 20    	mov.w     #0xc04, w0
    333c:	21 c0 b3    	mov.b     #0x2, w1
    333e:	01 48 78    	mov.b     w1, [w0]
    3340:	50 c0 20    	mov.w     #0xc05, w0
    3342:	81 cc b3    	mov.b     #0xc8, w1
    3344:	01 48 78    	mov.b     w1, [w0]
    3346:	03 00 37    	bra       0x334e <.L2>

00003348 <.L3>:
    3348:	3c c8 bf    	mov.b     0x83c, WREG
    334a:	00 04 a0    	bset.b    w0, #0x0
    334c:	3c e8 b7    	mov.b     WREG, 0x83c

0000334e <.L2>:
    334e:	00 80 fa    	ulnk      
    3350:	00 00 06    	return    

00003352 <_VendorRequestsIn>:
    3352:	00 00 fa    	lnk       #0x0
    3354:	3c c8 bf    	mov.b     0x83c, WREG
    3356:	00 04 a0    	bset.b    w0, #0x0
    3358:	3c e8 b7    	mov.b     WREG, 0x83c
    335a:	00 80 fa    	ulnk      
    335c:	00 00 06    	return    

0000335e <_VendorRequestsOut>:
    335e:	00 00 fa    	lnk       #0x0
    3360:	3c c8 bf    	mov.b     0x83c, WREG
    3362:	00 04 a0    	bset.b    w0, #0x0
    3364:	3c e8 b7    	mov.b     WREG, 0x83c
    3366:	00 80 fa    	ulnk      
    3368:	00 00 06    	return    

0000336a <_main>:
    336a:	00 00 fa    	lnk       #0x0
    336c:	00 10 20    	mov.w     #0x100, w0
    336e:	20 3a 88    	mov.w     w0, 0x744
    3370:	34 00 07    	rcall     0x33da <_init_ui> <L0> <.L0> <.LFB0> <.LFE4> <.Letext0> <.Ltext0>
    3372:	9f fa 07    	rcall     0x28b2 <_init_pin> <L0> <.LFB3> <.LFE2>
    3374:	28 fd 07    	rcall     0x2dc6 <_init_oc> <L0> <.LFB4> <.LFE3>
    3376:	f9 f7 07    	rcall     0x236a <_init_spi> <L0> <.L0> <.LFB0> <.LFE22> <.Letext0> <.Ltext0>
    3378:	c0 84 20    	mov.w     #0x84c, w0
    337a:	30 42 88    	mov.w     w0, 0x846
    337c:	20 86 20    	mov.w     #0x862, w0
    337e:	20 42 88    	mov.w     w0, 0x844
    3380:	80 87 20    	mov.w     #0x878, w0
    3382:	10 42 88    	mov.w     w0, 0x842
    3384:	e0 88 20    	mov.w     #0x88e, w0
    3386:	40 42 88    	mov.w     w0, 0x848
    3388:	00 98 20    	mov.w     #0x980, w0
    338a:	50 42 88    	mov.w     w0, 0x84a
    338c:	50 42 80    	mov.w     0x84a, w0
    338e:	2d fc 07    	rcall     0x2bea <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    3390:	40 42 80    	mov.w     0x848, w0
    3392:	f6 fb 07    	rcall     0x2b80 <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    3394:	40 42 80    	mov.w     0x848, w0
    3396:	51 fc 07    	rcall     0x2c3a <_pin_set> <L0> <.LFB8> <.LFE7>
    3398:	12 42 80    	mov.w     0x842, w2
    339a:	31 42 80    	mov.w     0x846, w1
    339c:	20 42 80    	mov.w     0x844, w0
    339e:	16 c0 b3    	mov.b     #0x1, w6
    33a0:	04 40 22    	mov.w     #0x2400, w4
    33a2:	45 9f 24    	mov.w     #0x49f4, w5
    33a4:	82 01 78    	mov.w     w2, w3
    33a6:	01 01 78    	mov.w     w1, w2
    33a8:	80 00 78    	mov.w     w0, w1
    33aa:	00 ba 20    	mov.w     #0xba0, w0
    33ac:	31 f8 07    	rcall     0x2410 <_spi_open> <L0> <.LFB2> <.LFE1>
    33ae:	03 00 28    	mov.w     #0x8000, w3
    33b0:	04 00 24    	mov.w     #0x4000, w4
    33b2:	c5 69 24    	mov.w     #0x469c, w5
    33b4:	00 01 eb    	clr.w     w2
    33b6:	61 8e 20    	mov.w     #0x8e6, w1
    33b8:	40 a0 20    	mov.w     #0xa04, w0
    33ba:	b4 fd 07    	rcall     0x2f24 <_oc_pwm> <L0> <.LFB7> <.LFE6>
    33bc:	80 01 eb    	clr.w     w3
    33be:	04 00 24    	mov.w     #0x4000, w4
    33c0:	c5 69 24    	mov.w     #0x469c, w5
    33c2:	00 01 eb    	clr.w     w2
    33c4:	c1 8f 20    	mov.w     #0x8fc, w1
    33c6:	60 a1 20    	mov.w     #0xa16, w0
    33c8:	ad fd 07    	rcall     0x2f24 <_oc_pwm> <L0> <.LFB7> <.LFE6>
    33ca:	18 f1 07    	rcall     0x15fc <_InitUSB> <.L0> <.LFB0> <.Ltext0>
    33cc:	01 00 37    	bra       0x33d0 <.L19> <.LBE2>

000033ce <.L20>:
    33ce:	55 f1 07    	rcall     0x167a <_ServiceUSB> <L0> <.LFB1> <.LFE0>

000033d0 <.L19>:
    33d0:	40 c8 bf    	mov.b     0x840, WREG
    33d2:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    33d4:	fc ff 3a    	bra       NZ, 0x33ce <.L20> <.LBB2>

000033d6 <.L21>:
    33d6:	51 f1 07    	rcall     0x167a <_ServiceUSB> <L0> <.LFB1> <.LFE0>

000033d8 <.LBE3>:
    33d8:	fe ff 37    	bra       0x33d6 <.L21> <.LBB3>

000033da <_init_ui>:
    33da:	00 00 fa    	lnk       #0x0
    33dc:	74 c0 b3    	mov.b     #0x7, w4
    33de:	63 4e 20    	mov.w     #0x4e6, w3
    33e0:	82 2d 20    	mov.w     #0x2d8, w2
    33e2:	a1 2d 20    	mov.w     #0x2da, w1
    33e4:	00 80 20    	mov.w     #0x800, w0
    33e6:	20 00 07    	rcall     0x3428 <_led_init> <L0> <.LFB1> <.LFE0>
    33e8:	00 42 eb    	clr.b     w4
    33ea:	a3 4e 20    	mov.w     #0x4ea, w3
    33ec:	82 2e 20    	mov.w     #0x2e8, w2
    33ee:	a1 2e 20    	mov.w     #0x2ea, w1
    33f0:	80 80 20    	mov.w     #0x808, w0
    33f2:	1a 00 07    	rcall     0x3428 <_led_init> <L0> <.LFB1> <.LFE0>
    33f4:	14 c0 b3    	mov.b     #0x1, w4
    33f6:	a3 4e 20    	mov.w     #0x4ea, w3
    33f8:	82 2e 20    	mov.w     #0x2e8, w2
    33fa:	a1 2e 20    	mov.w     #0x2ea, w1
    33fc:	00 81 20    	mov.w     #0x810, w0
    33fe:	14 00 07    	rcall     0x3428 <_led_init> <L0> <.LFB1> <.LFE0>
    3400:	f4 c0 b3    	mov.b     #0xf, w4
    3402:	43 4e 20    	mov.w     #0x4e4, w3
    3404:	02 2d 20    	mov.w     #0x2d0, w2
    3406:	21 2d 20    	mov.w     #0x2d2, w1
    3408:	80 81 20    	mov.w     #0x818, w0
    340a:	ad 00 07    	rcall     0x3566 <_sw_init> <L0> <.LFB7> <.LFE6>
    340c:	c4 c0 b3    	mov.b     #0xc, w4
    340e:	43 4e 20    	mov.w     #0x4e4, w3
    3410:	02 2d 20    	mov.w     #0x2d0, w2
    3412:	21 2d 20    	mov.w     #0x2d2, w1
    3414:	00 82 20    	mov.w     #0x820, w0
    3416:	a7 00 07    	rcall     0x3566 <_sw_init> <L0> <.LFB7> <.LFE6>
    3418:	c4 c0 b3    	mov.b     #0xc, w4
    341a:	23 4e 20    	mov.w     #0x4e2, w3
    341c:	82 2c 20    	mov.w     #0x2c8, w2
    341e:	a1 2c 20    	mov.w     #0x2ca, w1
    3420:	80 82 20    	mov.w     #0x828, w0
    3422:	a1 00 07    	rcall     0x3566 <_sw_init> <L0> <.LFB7> <.LFE6>
    3424:	00 80 fa    	ulnk      
    3426:	00 00 06    	return    

00003428 <_led_init>:
    3428:	0a 00 fa    	lnk       #0xa
    342a:	00 0f 78    	mov.w     w0, [w14]
    342c:	11 07 98    	mov.w     w1, [w14+2]
    342e:	22 07 98    	mov.w     w2, [w14+4]
    3430:	33 07 98    	mov.w     w3, [w14+6]
    3432:	04 4f 98    	mov.b     w4, [w14+8]
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	9e 00 90    	mov.w     [w14+2], w1
    3438:	01 08 78    	mov.w     w1, [w0]
    343a:	1e 00 78    	mov.w     [w14], w0
    343c:	ae 00 90    	mov.w     [w14+4], w1
    343e:	11 00 98    	mov.w     w1, [w0+2]
    3440:	1e 00 78    	mov.w     [w14], w0
    3442:	be 00 90    	mov.w     [w14+6], w1
    3444:	21 00 98    	mov.w     w1, [w0+4]
    3446:	1e 00 78    	mov.w     [w14], w0
    3448:	8e 48 90    	mov.b     [w14+8], w1
    344a:	61 40 98    	mov.b     w1, [w0+6]
    344c:	1e 00 78    	mov.w     [w14], w0
    344e:	20 00 90    	mov.w     [w0+4], w0
    3450:	9e 00 78    	mov.w     [w14], w1
    3452:	a1 00 90    	mov.w     [w1+4], w1
    3454:	11 01 78    	mov.w     [w1], w2
    3456:	9e 00 78    	mov.w     [w14], w1
    3458:	e1 40 90    	mov.b     [w1+6], w1
    345a:	81 80 fb    	ze        w1, w1
    345c:	13 00 20    	mov.w     #0x1, w3
    345e:	81 18 dd    	sl.w      w3, w1, w1
    3460:	81 80 ea    	com.w     w1, w1
    3462:	81 00 61    	and.w     w2, w1, w1
    3464:	01 08 78    	mov.w     w1, [w0]
    3466:	1e 00 78    	mov.w     [w14], w0
    3468:	10 00 78    	mov.w     [w0], w0
    346a:	9e 00 78    	mov.w     [w14], w1
    346c:	91 00 78    	mov.w     [w1], w1
    346e:	11 01 78    	mov.w     [w1], w2
    3470:	9e 00 78    	mov.w     [w14], w1
    3472:	e1 40 90    	mov.b     [w1+6], w1
    3474:	81 80 fb    	ze        w1, w1
    3476:	13 00 20    	mov.w     #0x1, w3
    3478:	81 18 dd    	sl.w      w3, w1, w1
    347a:	81 80 ea    	com.w     w1, w1
    347c:	81 00 61    	and.w     w2, w1, w1
    347e:	01 08 78    	mov.w     w1, [w0]
    3480:	1e 00 78    	mov.w     [w14], w0
    3482:	10 00 90    	mov.w     [w0+2], w0
    3484:	9e 00 78    	mov.w     [w14], w1
    3486:	91 00 90    	mov.w     [w1+2], w1
    3488:	11 01 78    	mov.w     [w1], w2
    348a:	9e 00 78    	mov.w     [w14], w1
    348c:	e1 40 90    	mov.b     [w1+6], w1
    348e:	81 80 fb    	ze        w1, w1
    3490:	13 00 20    	mov.w     #0x1, w3
    3492:	81 18 dd    	sl.w      w3, w1, w1
    3494:	81 80 ea    	com.w     w1, w1
    3496:	81 00 61    	and.w     w2, w1, w1
    3498:	01 08 78    	mov.w     w1, [w0]
    349a:	00 80 fa    	ulnk      
    349c:	00 00 06    	return    

0000349e <_led_on>:
    349e:	02 00 fa    	lnk       #0x2
    34a0:	00 0f 78    	mov.w     w0, [w14]
    34a2:	1e 00 78    	mov.w     [w14], w0
    34a4:	10 00 78    	mov.w     [w0], w0
    34a6:	9e 00 78    	mov.w     [w14], w1
    34a8:	91 00 78    	mov.w     [w1], w1
    34aa:	11 01 78    	mov.w     [w1], w2
    34ac:	9e 00 78    	mov.w     [w14], w1
    34ae:	e1 40 90    	mov.b     [w1+6], w1
    34b0:	81 80 fb    	ze        w1, w1
    34b2:	13 00 20    	mov.w     #0x1, w3
    34b4:	81 18 dd    	sl.w      w3, w1, w1
    34b6:	82 80 70    	ior.w     w1, w2, w1
    34b8:	01 08 78    	mov.w     w1, [w0]
    34ba:	00 80 fa    	ulnk      
    34bc:	00 00 06    	return    

000034be <_led_off>:
    34be:	02 00 fa    	lnk       #0x2
    34c0:	00 0f 78    	mov.w     w0, [w14]
    34c2:	1e 00 78    	mov.w     [w14], w0
    34c4:	10 00 78    	mov.w     [w0], w0
    34c6:	9e 00 78    	mov.w     [w14], w1
    34c8:	91 00 78    	mov.w     [w1], w1
    34ca:	11 01 78    	mov.w     [w1], w2
    34cc:	9e 00 78    	mov.w     [w14], w1
    34ce:	e1 40 90    	mov.b     [w1+6], w1
    34d0:	81 80 fb    	ze        w1, w1
    34d2:	13 00 20    	mov.w     #0x1, w3
    34d4:	81 18 dd    	sl.w      w3, w1, w1
    34d6:	81 80 ea    	com.w     w1, w1
    34d8:	81 00 61    	and.w     w2, w1, w1
    34da:	01 08 78    	mov.w     w1, [w0]
    34dc:	00 80 fa    	ulnk      
    34de:	00 00 06    	return    

000034e0 <_led_toggle>:
    34e0:	02 00 fa    	lnk       #0x2
    34e2:	00 0f 78    	mov.w     w0, [w14]
    34e4:	1e 00 78    	mov.w     [w14], w0
    34e6:	10 00 78    	mov.w     [w0], w0
    34e8:	9e 00 78    	mov.w     [w14], w1
    34ea:	91 00 78    	mov.w     [w1], w1
    34ec:	11 01 78    	mov.w     [w1], w2
    34ee:	9e 00 78    	mov.w     [w14], w1
    34f0:	e1 40 90    	mov.b     [w1+6], w1
    34f2:	81 80 fb    	ze        w1, w1
    34f4:	13 00 20    	mov.w     #0x1, w3
    34f6:	81 18 dd    	sl.w      w3, w1, w1
    34f8:	81 00 69    	xor.w     w2, w1, w1
    34fa:	01 08 78    	mov.w     w1, [w0]
    34fc:	00 80 fa    	ulnk      
    34fe:	00 00 06    	return    

00003500 <_led_write>:
    3500:	04 00 fa    	lnk       #0x4
    3502:	00 0f 78    	mov.w     w0, [w14]
    3504:	11 07 98    	mov.w     w1, [w14+2]
    3506:	1e 00 90    	mov.w     [w14+2], w0
    3508:	00 00 e0    	cp0.w     w0
    350a:	0d 00 32    	bra       Z, 0x3526 <.L7>
    350c:	1e 00 78    	mov.w     [w14], w0
    350e:	10 00 78    	mov.w     [w0], w0
    3510:	9e 00 78    	mov.w     [w14], w1
    3512:	91 00 78    	mov.w     [w1], w1
    3514:	11 01 78    	mov.w     [w1], w2
    3516:	9e 00 78    	mov.w     [w14], w1
    3518:	e1 40 90    	mov.b     [w1+6], w1
    351a:	81 80 fb    	ze        w1, w1
    351c:	13 00 20    	mov.w     #0x1, w3
    351e:	81 18 dd    	sl.w      w3, w1, w1
    3520:	82 80 70    	ior.w     w1, w2, w1
    3522:	01 08 78    	mov.w     w1, [w0]
    3524:	0d 00 37    	bra       0x3540 <.L6>

00003526 <.L7>:
    3526:	1e 00 78    	mov.w     [w14], w0
    3528:	10 00 78    	mov.w     [w0], w0
    352a:	9e 00 78    	mov.w     [w14], w1
    352c:	91 00 78    	mov.w     [w1], w1
    352e:	11 01 78    	mov.w     [w1], w2
    3530:	9e 00 78    	mov.w     [w14], w1
    3532:	e1 40 90    	mov.b     [w1+6], w1
    3534:	81 80 fb    	ze        w1, w1
    3536:	13 00 20    	mov.w     #0x1, w3
    3538:	81 18 dd    	sl.w      w3, w1, w1
    353a:	81 80 ea    	com.w     w1, w1
    353c:	81 00 61    	and.w     w2, w1, w1
    353e:	01 08 78    	mov.w     w1, [w0]

00003540 <.L6>:
    3540:	00 80 fa    	ulnk      
    3542:	00 00 06    	return    

00003544 <_led_read>:
    3544:	02 00 fa    	lnk       #0x2
    3546:	00 0f 78    	mov.w     w0, [w14]
    3548:	1e 00 78    	mov.w     [w14], w0
    354a:	10 00 78    	mov.w     [w0], w0
    354c:	90 00 78    	mov.w     [w0], w1
    354e:	1e 00 78    	mov.w     [w14], w0
    3550:	60 40 90    	mov.b     [w0+6], w0
    3552:	00 80 fb    	ze        w0, w0
    3554:	12 00 20    	mov.w     #0x1, w2
    3556:	00 10 dd    	sl.w      w2, w0, w0
    3558:	00 80 60    	and.w     w1, w0, w0
    355a:	00 f0 a7    	btsc.w    w0, #0xf
    355c:	00 00 ea    	neg.w     w0, w0
    355e:	00 00 ea    	neg.w     w0, w0
    3560:	4f 00 de    	lsr.w     w0, #0xf, w0
    3562:	00 80 fa    	ulnk      
    3564:	00 00 06    	return    

00003566 <_sw_init>:
    3566:	0a 00 fa    	lnk       #0xa
    3568:	00 0f 78    	mov.w     w0, [w14]
    356a:	11 07 98    	mov.w     w1, [w14+2]
    356c:	22 07 98    	mov.w     w2, [w14+4]
    356e:	33 07 98    	mov.w     w3, [w14+6]
    3570:	04 4f 98    	mov.b     w4, [w14+8]
    3572:	1e 00 78    	mov.w     [w14], w0
    3574:	9e 00 90    	mov.w     [w14+2], w1
    3576:	01 08 78    	mov.w     w1, [w0]
    3578:	1e 00 78    	mov.w     [w14], w0
    357a:	ae 00 90    	mov.w     [w14+4], w1
    357c:	11 00 98    	mov.w     w1, [w0+2]
    357e:	1e 00 78    	mov.w     [w14], w0
    3580:	be 00 90    	mov.w     [w14+6], w1
    3582:	21 00 98    	mov.w     w1, [w0+4]
    3584:	1e 00 78    	mov.w     [w14], w0
    3586:	8e 48 90    	mov.b     [w14+8], w1
    3588:	61 40 98    	mov.b     w1, [w0+6]
    358a:	1e 00 78    	mov.w     [w14], w0
    358c:	20 00 90    	mov.w     [w0+4], w0
    358e:	9e 00 78    	mov.w     [w14], w1
    3590:	a1 00 90    	mov.w     [w1+4], w1
    3592:	11 01 78    	mov.w     [w1], w2
    3594:	9e 00 78    	mov.w     [w14], w1
    3596:	e1 40 90    	mov.b     [w1+6], w1
    3598:	81 80 fb    	ze        w1, w1
    359a:	13 00 20    	mov.w     #0x1, w3
    359c:	81 18 dd    	sl.w      w3, w1, w1
    359e:	81 80 ea    	com.w     w1, w1
    35a0:	81 00 61    	and.w     w2, w1, w1
    35a2:	01 08 78    	mov.w     w1, [w0]
    35a4:	1e 00 78    	mov.w     [w14], w0
    35a6:	10 00 90    	mov.w     [w0+2], w0
    35a8:	9e 00 78    	mov.w     [w14], w1
    35aa:	91 00 90    	mov.w     [w1+2], w1
    35ac:	11 01 78    	mov.w     [w1], w2
    35ae:	9e 00 78    	mov.w     [w14], w1
    35b0:	e1 40 90    	mov.b     [w1+6], w1
    35b2:	81 80 fb    	ze        w1, w1
    35b4:	13 00 20    	mov.w     #0x1, w3
    35b6:	81 18 dd    	sl.w      w3, w1, w1
    35b8:	82 80 70    	ior.w     w1, w2, w1
    35ba:	01 08 78    	mov.w     w1, [w0]
    35bc:	00 80 fa    	ulnk      
    35be:	00 00 06    	return    

000035c0 <_sw_read>:
    35c0:	02 00 fa    	lnk       #0x2
    35c2:	00 0f 78    	mov.w     w0, [w14]
    35c4:	1e 00 78    	mov.w     [w14], w0
    35c6:	10 00 78    	mov.w     [w0], w0
    35c8:	90 00 78    	mov.w     [w0], w1
    35ca:	1e 00 78    	mov.w     [w14], w0
    35cc:	60 40 90    	mov.b     [w0+6], w0
    35ce:	00 80 fb    	ze        w0, w0
    35d0:	12 00 20    	mov.w     #0x1, w2
    35d2:	00 10 dd    	sl.w      w2, w0, w0
    35d4:	00 80 60    	and.w     w1, w0, w0
    35d6:	00 f0 a7    	btsc.w    w0, #0xf
    35d8:	00 00 ea    	neg.w     w0, w0
    35da:	00 00 ea    	neg.w     w0, w0
    35dc:	4f 00 de    	lsr.w     w0, #0xf, w0
    35de:	00 80 fa    	ulnk      
    35e0:	00 00 06    	return    
Disassembly of section .dinit:

000035e2 <.dinit>:
    35e2:	42 08 00    	nop       
    35e4:	0a 00 00    	nop       
    35e6:	80 00 00    	nop       
    35e8:	a6 0a 00    	nop       
    35ea:	8c 00 00    	nop       
    35ec:	80 00 00    	nop       
    35ee:	00 0c 00    	nop       
    35f0:	80 00 00    	nop       
    35f2:	80 00 00    	nop       
    35f4:	30 08 00    	nop       
    35f6:	12 00 00    	nop       
    35f8:	80 00 00    	nop       
    35fa:	00 08 00    	nop       
    35fc:	30 00 00    	nop       
    35fe:	80 00 00    	nop       
    3600:	4c 08 00    	nop       
    3602:	b8 01 00    	nop       
    3604:	80 00 00    	nop       
    3606:	04 0a 00    	nop       
    3608:	a2 00 00    	nop       
    360a:	80 00 00    	nop       
    360c:	a0 0b 00    	nop       
    360e:	42 00 00    	nop       
    3610:	80 00 00    	nop       
    3612:	e2 0b 00    	nop       
    3614:	10 00 00    	nop       
    3616:	82 00 00    	nop       
    3618:	bd 37 86    	mov.w     0xc6f6, w13
    361a:	33 bd 37    	bra       0xffffb082
    361c:	06 35 bd    	subr.w    0x1506
    361e:	37 86 36    	bra       LEU, 0xffff428e
    3620:	bd 37 86    	mov.w     0xc6f6, w13
    3622:	37 00 00    	nop       
    3624:	32 0b 00    	nop       
    3626:	6e 00 00    	nop       
    3628:	80 00 00    	nop       
    362a:	00 00 00    	nop       
Disassembly of section .text:

0000362c <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    362c:	02 00 fa    	lnk       #0x2
    362e:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    3630:	1e 00 78    	mov.w     [w14], w0
    3632:	48 00 de    	lsr.w     w0, #0x8, w0
    3634:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    3636:	1e 00 78    	mov.w     [w14], w0
    3638:	44 00 de    	lsr.w     w0, #0x4, w0
    363a:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    363c:	1e 00 78    	mov.w     [w14], w0
    363e:	42 00 de    	lsr.w     w0, #0x2, w0
    3640:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    3642:	1e 00 78    	mov.w     [w14], w0
    3644:	00 00 d1    	lsr.w     w0, w0
    3646:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    3648:	1e 00 78    	mov.w     [w14], w0
    364a:	00 40 78    	mov.b     w0, w0
    364c:	61 40 60    	and.b     w0, #0x1, w0
}
    364e:	00 80 fa    	ulnk      
    3650:	00 00 06    	return    
Disassembly of section .isr:

00003652 <__DefaultInterrupt>:
    3652:	00 40 da    	break     
    3654:	00 00 fe    	reset     
